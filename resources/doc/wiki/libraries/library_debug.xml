<root>
	<collection type="library" gui="1">
		<name>debug</name>
		<desc>TODO</desc>
		<function type="function">
			<name>stackdump</name>
			<desc>Prints the current Lua stack to the console.</desc>
			<lua></lua>
			<overload></overload>
		</function>
		<function type="function" gui="1">
			<name>move_state_to_string</name>
			<desc>Converts the specified move state to a string.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="ai.MoveState">moveState</arg>
				</parameters>
				<returnValues>
					<arg type="string">moveState</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>draw_point</name>
				<desc>
					Draws a point in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the point will be removed after the duration has passed.\n
					Otherwise the point will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">position</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_line</name>
				<desc>
					Draws a line in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the line will be removed after the duration has passed.\n
					Otherwise the line will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">startPosition</arg>
						<arg type="math.Vector">endPosition</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_box</name>
				<desc>
					Draws a box in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the box will be removed after the duration has passed.\n
					Otherwise the box will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">center</arg>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
						<arg type="math.EulerAngles">angles</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">center</arg>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">startPosition</arg>
						<arg type="math.Vector">endPosition</arg>
						<arg type="math.EulerAngles">angles</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">startPosition</arg>
						<arg type="math.Vector">endPosition</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">center</arg>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
						<arg type="math.EulerAngles">angles</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">center</arg>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">startPosition</arg>
						<arg type="math.Vector">endPosition</arg>
						<arg type="math.EulerAngles">angles</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">startPosition</arg>
						<arg type="math.Vector">endPosition</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_sphere</name>
				<desc>
					Draws a sphere in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the sphere will be removed after the duration has passed.\n
					Otherwise the sphere will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)\n
					The recursion level defines the smoothness of the sphere.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">radius</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
						<arg type="int" default="1">recursionLevel</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">radius</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="float" default="0.0">duration</arg>
						<arg type="int" default="1">recursionLevel</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_cone</name>
				<desc>
					Draws a cone in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the cone will be removed after the duration has passed.\n
					Otherwise the cone will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)\n
					The segment count defines the smoothness of the cone.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="math.Vector">direction</arg>
						<arg type="float">distance</arg>
						<arg type="float">angle</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="float" default="0.0">duration</arg>
						<arg type="int" default="12">segmentCount</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="math.Vector">direction</arg>
						<arg type="float">distance</arg>
						<arg type="float">angle</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
						<arg type="int" default="12">segmentCount</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_truncated_cone</name>
				<desc>
					Draws a truncated cone in the world. Only use for debugging purposes!\n
					If startRadius or endRadius is set to 0, an optimized regular cone will be drawn instead.\n
					If the duration isn't set to 0, this function will return nil and the cone will be removed after the duration has passed.\n
					Otherwise the cone will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)\n
					The segment count defines the smoothness of the cone.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">startRadius</arg>
						<arg type="math.Vector">direction</arg>
						<arg type="float">distance</arg>
						<arg type="float">endRadius</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="int" default="12">segmentCount</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">startRadius</arg>
						<arg type="math.Vector">direction</arg>
						<arg type="float">distance</arg>
						<arg type="float">endRadius</arg>
						<arg type="util.Color">color</arg>
						<arg type="int" default="12">segmentCount</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_cylinder</name>
				<desc>
					Draws a cylinder in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the cylinder will be removed after the duration has passed.\n
					Otherwise the cylinder will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)\n
					The segment count defines the smoothness of the cylinder.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">radius</arg>
						<arg type="math.Vector">direction</arg>
						<arg type="float">distance</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="int" default="12">segmentCount</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">radius</arg>
						<arg type="math.Vector">direction</arg>
						<arg type="float">distance</arg>
						<arg type="util.Color">color</arg>
						<arg type="int" default="12">segmentCount</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_axis</name>
				<desc>
					Draws an axis in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the axis will be removed after the duration has passed.\n
					Otherwise the axis will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="math.EulerAngles">angles</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload client="1">
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="math.Vector">x</arg>
						<arg type="math.Vector">y</arg>
						<arg type="math.Vector">z</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_text</name>
				<desc>
					Draws a text in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the line will be removed after the duration has passed.\n
					Otherwise the text will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">text</arg>
						<arg type="math.Vector">position</arg>
						<arg type="math.Vector2">size</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">text</arg>
						<arg type="math.Vector">position</arg>
						<arg type="float">scale</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_path</name>
				<desc>
					Draws a path in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the path will be removed after the duration has passed.\n
					Otherwise the path will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">path</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_spline</name>
				<desc>
					Draws a spline path in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the spline path will be removed after the duration has passed.\n
					Otherwise the spline path will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">path</arg>
						<arg type="util.Color">color</arg>
						<arg type="int">segmentCount</arg>
						<arg type="float" default="1.0">curvature</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>draw_plane</name>
				<desc>
					Draws a plane in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the plane will be removed after the duration has passed.\n
					Otherwise the plane will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.\n
					If this function is run serverside, it will always return nil. (Using a duration of 0 will be pointless in this case.)
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">normal</arg>
						<arg type="float">distance</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Plane">plane</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<!-- clientside -->
			<function type="function" client="1">
				<name>draw_points</name>
				<desc>
					Draws all vertices from the given table as points in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the points will be removed after the duration has passed.\n
					Otherwise the points will automatically removed when all references to the object are destroyed, or DebugRendererObject:Remove is called.\n
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">points</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>draw_lines</name>
				<desc>
					Draws all vertices from the given table as lines in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the lines will be removed after the duration has passed.\n
					Otherwise the lines will automatically removed when all references to the object are destroyed, or DebugRendererObject:Remove is called.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">lines</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>draw_mesh</name>
				<desc>
					Draws one or more meshes in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the meshes will be removed after the duration has passed.\n
					Otherwise the meshes will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">vertices</arg>
						<arg type="util.Color">color</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">vertices</arg>
						<arg type="util.Color">color</arg>
						<arg type="util.Color">colorOutline</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>draw_frustum</name>
				<desc>
					Draws a frustum in the world. Only use for debugging purposes!\n
					If the duration isn't set to 0, this function will return nil and the frustum will be removed after the duration has passed.\n
					Otherwise the meshes will automatically removed when all references to it are destroyed, or DebugRendererObject:Remove is called.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="game.Camera">camera</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">vertices</arg>
						<arg type="float" default="0.0">duration</arg>
					</parameters>
					<returnValues>
						<arg type="debug.RendererObject">rendererObject</arg>
					</returnValues>
				</overload>
			</function>
			<!-- clientside -->
		</group>
		<!-- serverside -->
		<group>
			<function type="function" server="1">
				<name>behavior_selector_type_to_string</name>
				<desc>Converts a BehaviorSelectorType-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.BehaviorTask.SelectorType">selectorType</arg>
					</parameters>
					<returnValues>
						<arg type="string">selectorType</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" server="1">
				<name>behavior_task_decorator_type_to_string</name>
				<desc>Converts a BehaviorTaskDecoratorType-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.BehaviorTask.DecoratorType">selectorType</arg>
					</parameters>
					<returnValues>
						<arg type="string">selectorType</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" server="1">
				<name>behavior_task_result_to_string</name>
				<desc>Converts a BehaviorTaskResult-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.BehaviorTask.Result">result</arg>
					</parameters>
					<returnValues>
						<arg type="string">result</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" server="1">
				<name>behavior_task_type_to_string</name>
				<desc>Converts a BehaviorTaskType-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.BehaviorTask.Type">type</arg>
					</parameters>
					<returnValues>
						<arg type="string">type</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" server="1">
				<name>disposition_to_string</name>
				<desc>Converts a Disposition-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.Disposition">disposition</arg>
					</parameters>
					<returnValues>
						<arg type="string">disposition</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" server="1">
				<name>memory_type_to_string</name>
				<desc>Converts a MemoryType-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.Memory.Type">type</arg>
					</parameters>
					<returnValues>
						<arg type="string">type</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" server="1">
				<name>npc_state_to_string</name>
				<desc>Converts a NPCState-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.NPCState">state</arg>
					</parameters>
					<returnValues>
						<arg type="string">state</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" server="1">
				<name>task_to_string</name>
				<desc>Converts a Task-enum to a string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="ai.Task">task</arg>
					</parameters>
					<returnValues>
						<arg type="string">task</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<!-- serverside -->
	</collection>
</root>
