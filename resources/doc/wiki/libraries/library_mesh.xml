<root>
	<collection type="library">
		<name>mesh</name>
		<desc>TODO</desc>
		<function type="function">
			<name>generate_convex_hull</name>
			<desc>Takes a table of vectors representing a point cloud as input, and returns a table of indices for a convex triangle mesh around that point cloud.</desc>
			<lua>
				local pointCloud = {
					Vector(0.0,0.0,0.0),
					Vector(128.0,128.0,128.0),
					Vector(-64.0,-64.0,-64.0),
					Vector(55.0,-128.0,32.0),
					Vector(5.0,-5.0,2.0),
					Vector(44.0,-33.0,12.0),
					Vector(32.0,86.0,-121.0),
					Vector(66.0,77.0,88.0),
					Vector(-120.0,37.0,45.0),
					Vector(222.0,50.0,10.0)
				}
				local convexTriangleMesh = {}
				local indices = mesh.generate_convex_hull(pointCloud)
				for i=1,#indices,3 do
					local idx1 = indices[i] +1 -- Indices start at 0, but lua-tables start with index 1
					local idx2 = indices[i +1] +1
					local idx3 = indices[i +2] +1
					table.insert(convexTriangleMesh,pointCloud[idx1])
					table.insert(convexTriangleMesh,pointCloud[idx2])
					table.insert(convexTriangleMesh,pointCloud[idx3])
				end
				debug.draw_mesh(convexTriangleMesh,Color.Lime,Color.Crimson,12)
			</lua>
			<overload>
				<parameters>
					<arg type="table" subType="math.Vector">pointCloud</arg>
				</parameters>
				<returnValues>
					<arg type="table" subType="int">convexHullTriangles</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_smallest_enclosing_bbox</name>
			<desc>Takes a table of vectors representing a point cloud as input, and returns the center position, extents and rotation of a smallest bbox enclosing the point cloud.</desc>
			<lua>
				local pointCloud = {
					Vector(0.0,0.0,0.0),
					Vector(128.0,128.0,128.0),
					Vector(-64.0,-64.0,-64.0),
					Vector(55.0,-128.0,32.0),
					Vector(5.0,-5.0,2.0),
					Vector(44.0,-33.0,12.0),
					Vector(32.0,86.0,-121.0),
					Vector(66.0,77.0,88.0),
					Vector(-120.0,37.0,45.0),
					Vector(222.0,50.0,10.0)
				}
				local center,extents,rot = mesh.calc_smallest_enclosing_bbox(pointCloud)
				debug.draw_box(center,-extends,extends,rot:ToEulerAngles(),Color.Lime,12)
			</lua>
			<overload>
				<parameters>
					<arg type="table" subType="math.Vector">pointCloud</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">centerPosition</arg>
					<arg type="math.Vector">extents</arg>
					<arg type="math.Quaternion">rotation</arg>
				</returnValues>
			</overload>
		</function>
	</collection>
</root>
