<root>
	<collection type="library" client="1" gui="1">
		<name>gui</name>
		<desc>TODO</desc>
		<group>
			<function type="function">
				<name>create</name>
				<desc>Creates a new WIElement of the specified type, or returns nil if the class isn't a registered GUI type.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">guiClass</arg>
					</parameters>
					<returnValues>
						<arg type="gui.Element">element</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_label</name>
				<desc>Helper-function for creating a WIText-element.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">text</arg>
						<arg type="gui.Element">parent</arg>
						<arg type="int">x</arg>
						<arg type="int">y</arg>
					</parameters>
					<returnValues>
						<arg type="gui.Text">element</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">text</arg>
					</parameters>
					<returnValues>
						<arg type="gui.Text">element</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_button</name>
				<desc>Helper-function for creating a WIButton-element.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">text</arg>
						<arg type="gui.Element">parent</arg>
						<arg type="int">x</arg>
						<arg type="int">y</arg>
					</parameters>
					<returnValues>
						<arg type="gui.Button">element</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">text</arg>
					</parameters>
					<returnValues>
						<arg type="gui.Button">element</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_checkbox</name>
				<desc>Helper-function for creating a WICheckbox-element.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">text</arg>
						<arg type="gui.Element">parent</arg>
					</parameters>
					<returnValues>
						<arg type="gui.Element">element</arg>
						<arg type="gui.Checkbox">checkbox</arg>
						<arg type="gui.Text">text</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>register</name>
			<desc>Registers a new GUI element with the specified class name and data.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">name</arg>
					<arg type="table">guiClass</arg>
				</parameters>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>get_base_element</name>
				<desc>Returns the base GUI Element, to which all other elements are parented. This element cannot be removed.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="gui.Element">element</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_focused_element</name>
				<desc>Returns the GUI Element which currently has the focus, or nil if no element is focused.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="gui.Element">element</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_element_by_name</name>
				<desc>Returns the GUI element by the specified name.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="gui.Element">element</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_elements_by_name</name>
				<desc>Returns the GUI elements by the specified name.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="gui.Element">elements</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>register_skin</name>
				<desc>Registers a new skin (and reloads it, if it had already been loaded). Returns ''true'' on success.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
						<arg type="table">skinSettings</arg>
						<arg type="table">skinData</arg>
					</parameters>
					<returnValues>
						<arg type="bool">success</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>set_skin</name>
				<desc>Unloads the current skin and loads the specified one.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
				</overload>
			</function>
			<function type="function">
				<name>skin_exists</name>
				<desc>Returns ''true'' if the specified skin is valid.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="bool">exists</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>get_cursor</name>
				<desc>Returns the current shape of the cursor.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="gui.CursorShape">cursor</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>set_cursor</name>
				<desc>Changes the current shape of the cursor.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="gui.CursorShape">cursor</arg>
					</parameters>
				</overload>
			</function>
			<function type="function">
				<name>get_cursor_input_mode</name>
				<desc>Returns the current cursor input mode.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="gui.CursorMode">mode</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>set_cursor_input_mode</name>
				<desc>Changes the current cursor input mode.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="gui.CursorMode">mode</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>get_window_size</name>
			<desc>Returns the size of the game window.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="math.Vector2i">windowSize</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>inject_mouse_input</name>
				<desc>
					Simulates a mouse click on the GUI. If no cursor position is specified, the actual cursor position will be used.\n
					If a GUI-element has claimed the input, ''true'' is returned, otherwise ''false''.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="input.MouseButton">mouseButton</arg>
						<arg type="input.State">state</arg>
						<arg type="input.Modifier">modifiers</arg>
					</parameters>
					<returnValues>
						<arg type="bool">handled</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="input.MouseButton">mouseButton</arg>
						<arg type="input.State">state</arg>
						<arg type="input.Modifier">modifiers</arg>
						<arg type="math.Vector2i">cursorPos</arg>
					</parameters>
					<returnValues>
						<arg type="bool">handled</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>inject_keyboard_input</name>
				<desc>
					Simulates a keyboard input on the GUI.\n
					If a GUI-element has claimed the input, ''true'' is returned, otherwise ''false''.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="input.Key">key</arg>
						<arg type="input.State">state</arg>
						<arg type="input.Modifier">modifiers</arg>
					</parameters>
					<returnValues>
						<arg type="bool">handled</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>inject_char_input</name>
				<desc>
					Simulates a character input on the GUI.\n
					If a GUI-element has claimed the input, ''true'' is returned, otherwise ''false''.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">character</arg>
					</parameters>
					<returnValues>
						<arg type="bool">handled</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>inject_scroll_input</name>
				<desc>
					Simulates a scroll input on the GUI. If no cursor position is specified, the actual cursor position will be used.\n
					If a GUI-element has claimed the input, ''true'' is returned, otherwise ''false''.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector2">offset</arg>
						<arg type="math.Vector2i">cursorPos</arg>
					</parameters>
					<returnValues>
						<arg type="bool">handled</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector2">offset</arg>
					</parameters>
					<returnValues>
						<arg type="bool">handled</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<enum_set client="1">
			<name>CursorShape</name>
			<enum value="0">CURSOR_SHAPE_DEFAULT</enum>
			<enum value="1">CURSOR_SHAPE_HIDDEN</enum>
			<enum value="221185">CURSOR_SHAPE_ARROW</enum>
			<enum value="221186">CURSOR_SHAPE_IBEAM</enum>
			<enum value="221187">CURSOR_SHAPE_CROSSHAIR</enum>
			<enum value="221188">CURSOR_SHAPE_HAND</enum>
			<enum value="221189">CURSOR_SHAPE_HRESIZE</enum>
			<enum value="221190">CURSOR_SHAPE_VRESIZE</enum>
		</enum_set>
		<enum_set client="1">
			<name>CursorMode</name>
			<enum value="212995">CURSOR_MODE_DISABLED</enum>
			<enum value="212994">CURSOR_MODE_HIDDEN</enum>
			<enum value="212993">CURSOR_MODE_NORMAL</enum>
		</enum_set>
	</collection>
</root>
