<root>
	<collection type="library" server="1">
		<name>ai</name>
		<desc>TODO</desc>
		<function type="function">
			<name>create_schedule</name>
			<desc>Creates a new AI Schedule.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="ai.Schedule">schedule</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>register_faction</name>
				<desc>Registers a new faction. If a faction with the specified name already exists, no new faction will be created and that faction will be returned.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="ai.Faction">faction</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_factions</name>
				<desc>Returns a table of all registered factions.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="ai.Faction">factions</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_faction_by_name</name>
				<desc>Returns the function with the specified name, or nil if no faction with that name exists.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="ai.Faction">faction</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>register_task</name>
			<desc>Registers a new task and returns the assigned Id. The class has to be derived from BaseAIBehaviorTask.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="class">taskClass</arg>
					<arg type="ai.BehaviorTask.Type" default="ai.BehaviorTask.TYPE_SEQUENCE">taskType</arg>
					<arg type="ai.BehaviorTask.SelectorType" default="ai.BehaviorTask.SELECTOR_TYPE_SEQUENTIAL">selectorType</arg>
				</parameters>
				<returnValues>
					<arg type="ai.Task">taskId</arg>
				</returnValues>
			</overload>
		</function>
		<enum_set>
			<name>Disposition</name>
			<enum value="0">DISPOSITION_HATE</enum>
			<enum value="1">DISPOSITION_FEAR</enum>
			<enum value="2">DISPOSITION_NEUTRAL</enum>
			<enum value="3">DISPOSITION_LIKE</enum>
		</enum_set>
		<enum_set>
			<name>NPCState</name>
			<enum value="0">NPC_STATE_NONE</enum>
			<enum value="1">NPC_STATE_IDLE</enum>
			<enum value="2">NPC_STATE_ALERT</enum>
			<enum value="3">NPC_STATE_COMBAT</enum>
			<enum value="4">NPC_STATE_SCRIPT</enum>
		</enum_set>
		<enum_set>
			<name>Task</name>
			<enum value="0">TASK_MOVE_TO_TARGET</enum>
			<enum value="1">TASK_PLAY_ANIMATION</enum>
			<enum value="2">TASK_PLAY_ACTIVITY</enum>
			<enum value="3">TASK_PLAY_LAYERED_ANIMATION</enum>
			<enum value="4">TASK_PLAY_LAYERED_ACTIVITY</enum>
			<enum value="5">TASK_MOVE_RANDOM</enum>
			<enum value="6">TASK_PLAY_SOUND</enum>
			<enum value="7">TASK_DEBUG_PRINT</enum>
			<enum value="8">TASK_DEBUG_DRAW_TEXT</enum>
			<enum value="9">TASK_DECORATOR</enum>
			<enum value="10">TASK_WAIT</enum>
			<enum value="11">TASK_TURN_TO_TARGET</enum>
			<enum value="12">TASK_RANDOM</enum>
			<enum value="13">TASK_LOOK_AT_TARGET</enum>
			<enum value="14">TASK_EVENT</enum>
		</enum_set>
		<enum_set>
			<name>MoveState</name>
			<enum value="0">MOVE_STATE_TARGET_UNREACHABLE</enum>
			<enum value="1">MOVE_STATE_TARGET_REACHED</enum>
			<enum value="2">MOVE_STATE_WAITING_FOR_PATH</enum>
			<enum value="3">MOVE_STATE_MOVING_TO_TARGET</enum>
		</enum_set>
	</collection>
</root>
