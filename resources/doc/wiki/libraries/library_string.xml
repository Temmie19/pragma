<root>
	<collection type="library" gui="1">
		<name>string</name>
		<desc>TODO</desc>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>byte</name>
				<desc>
					Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j]. The default value for ''i'' is 1; the default value for ''j'' is ''i''. These indices are corrected following the same rules of function [[string_sub|string.sub]].\n
					Numeric codes are not necessarily portable across platforms.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.byte</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">s</arg>
						<arg type="int">i</arg>
						<arg type="int">j</arg>
					</parameters>
					<returnValues>
						<arg type="int">byte</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">s</arg>
						<arg type="int" default="1">i</arg>
					</parameters>
					<returnValues>
						<arg type="int">byte</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>char</name>
				<desc>
					Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n
					Numeric codes are not necessarily portable across platforms.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.char</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int" variadic="1">values</arg>
					</parameters>
					<returnValues>
						<arg type="string">string</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>dump</name>
			<desc>
				Returns a string containing a binary representation (a ''binary chunk'') of the given function, so that a later [[G_load|''load'']] on this string returns a copy of the function (but with new upvalues). If ''strip'' is a true value, the binary representation may not include all debug information about the function, to save space.\n
				Functions with upvalues have only their number of upvalues saved. When (re)loaded, those upvalues receive fresh instances containing '''nil'''. (You can use the debug library to serialize and reload the upvalues of a function in a way adequate to your needs.)
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.dump</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="function">function</arg>
					<arg type="bool">strip</arg>
				</parameters>
				<returnValues>
					<arg type="string">binaryData</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="function">function</arg>
				</parameters>
				<returnValues>
					<arg type="string">binaryData</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>find</name>
			<desc>
				Looks for the first match of ''pattern'' (see [http://www.lua.org/manual/5.3/manual.html#6.4.1 ยง6.4.1]) in the string ''s''. If it finds a match, then ''find'' returns the indices of ''s'' where this occurrence starts and ends; otherwise, it returns '''nil'''. A third, optional numeric argument ''init'' specifies where to start the search; its default value is 1 and can be negative. A value of '''true''' as a fourth, optional argument ''plain'' turns off the pattern matching facilities, so the function does a plain "find substring" operation, with no characters in ''pattern'' being considered magic. Note that if ''plain'' is given, then ''init'' must be given as well.\n
				If the pattern has captures, then in a successful match the captured values are also returned, after the two indices.
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.find</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">s</arg>
					<arg type="string">pattern</arg>
					<arg type="int" default="1">init</arg>
					<arg type="bool" default="false">plain</arg>
				</parameters>
				<returnValues>
					<arg type="int">occurenceStart</arg>
					<arg type="int">occurenceEnd</arg>
					<arg type="string" variadic="1">value</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>format</name>
			<desc>
				Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the ISO C function ''sprintf''. The only differences are that the options/modifiers ''*'', ''h'', ''L'', ''l'', ''n'', and ''p'' are not supported and that there is an extra option, ''q''. The ''q'' option formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter. For instance, the call
				<syntaxhighlight lang="lua">
				string.format('%q', 'a string with "quotes" and \n new line')
				</syntaxhighlight>
				may produce the string:\n
				''"a string with \"quotes\" and \''\n
				''new line"''\n
				Options ''A'', ''a'', ''E'', ''e'', ''f'', ''G'', and ''g'' all expect a number as argument. Options ''c'', ''d'', ''i'', ''o'', ''u'', ''X'', and ''x'' expect an integer. Option ''q'' expects a string. Option ''s'' expects a string; if its argument is not a string, it is converted to one following the same rules of [[G_tostring|''tostring'']]. If the option has any modifier (flags, width, length), the string argument should not contain embedded zeros.

				When Lua is compiled with a non-C99 compiler, options A and a (hexadecimal floats) do not support any modifier (flags, width, length).
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.format</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">formatstring</arg>
					<arg type="any" variadic="1">arguments</arg>
				</parameters>
				<returnValues>
					<arg type="string">formattedString</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>gmatch</name>
				<desc>
					Returns an iterator function that, each time it is called, returns the next captures from ''pattern'' (see [http://www.lua.org/manual/5.3/manual.html#6.4.1 ยง6.4.1]) over the string ''s''. If ''pattern'' specifies no captures, then the whole match is produced in each call.\n
					As an example, the following loop will iterate over all the words from string ''s'', printing one per line:
					<syntaxhighlight lang="lua">
					s = "hello world from Lua"
						for w in string.gmatch(s, "%a+") do
					print(w)
					end
					</syntaxhighlight>
					The next example collects all pairs ''key=value'' from the given string into a table:
					<syntaxhighlight lang="lua">
					t = {}
					s = "from=world, to=Lua"
					for k, v in string.gmatch(s, "(%w+)=(%w+)") do
						t[k] = v
					end
					</syntaxhighlight>
					For this function, a caret '^' at the start of a pattern does not work as an anchor, as this would prevent the iteration.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.gmatch</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">s</arg>
						<arg type="string">pattern</arg>
					</parameters>
					<returnValues>
						<arg type="function">iterator</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>match</name>
				<desc>Looks for the first ''match'' of ''pattern'' (see [http://www.lua.org/manual/5.3/manual.html#6.4.1 ยง6.4.1]) in the string ''s''. If it finds one, then ''match'' returns the captures from the pattern; otherwise it returns '''nil'''. If ''pattern'' specifies no captures, then the whole match is returned. A third, optional numeric argument ''init'' specifies where to start the search; its default value is 1 and can be negative.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.match</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">s</arg>
						<arg type="string">pattern</arg>
						<arg type="int" default="1">init</arg>
					</parameters>
					<returnValues>
						<arg type="string">capture</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>gsub</name>
				<desc>
					Returns a copy of ''s'' in which all (or the first ''n'', if given) occurrences of the ''pattern'' (see [http://www.lua.org/manual/5.3/manual.html#6.4.1 ยง6.4.1]) have been replaced by a replacement string specified by ''repl'', which can be a string, a table, or a function. ''gsub'' also returns, as its second value, the total number of matches that occurred. The name ''gsub'' comes from ''Global SUBstitution''.
					If ''repl'' is a string, then its value is used for replacement. The character % works as an escape character: any sequence in ''repl'' of the form ''%d'', with ''d'' between 1 and 9, stands for the value of the ''d''-th captured substring. The sequence %0 stands for the whole match. The sequence %% stands for a single %.\n
					If ''repl'' is a table, then the table is queried for every match, using the first capture as the key.\n
					If ''repl'' is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order.\n
					In any case, if the pattern specifies no captures, then it behaves as if the whole pattern was inside a capture.\n
					If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is '''false''' or '''nil''', then there is no replacement (that is, the original match is kept in the string).\n
					Here are some examples:
					<syntaxhighlight lang="lua">
					x = string.gsub("hello world", "(%w+)", "%1 %1")
					--> x="hello hello world world"

					x = string.gsub("hello world", "%w+", "%0 %0", 1)
					--> x="hello hello world"

					x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")
					--> x="world hello Lua from"

					x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)
					--> x="home = /home/roberto, user = roberto"

					x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)
					    return load(s)()
					end)
					--> x="4+5 = 9"

					local t = {name="lua", version="5.3"}
					x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)
					--> x="lua-5.3.tar.gz"
					</syntaxhighlight>
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.gsub</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">s</arg>
						<arg type="string">pattern</arg>
						<arg type="string">repl</arg>
						<arg type="int">n</arg>
					</parameters>
					<returnValues>
						<arg type="string">result</arg>
						<arg type="int">numberOfMatches</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">s</arg>
						<arg type="string">pattern</arg>
						<arg type="table" subType="string">repl</arg>
					</parameters>
					<returnValues>
						<arg type="string">result</arg>
						<arg type="int">numberOfMatches</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">s</arg>
						<arg type="string">pattern</arg>
						<arg type="function">repl</arg>
					</parameters>
					<returnValues>
						<arg type="string">result</arg>
						<arg type="int">numberOfMatches</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>len</name>
			<desc>Receives a string and returns its length. The empty string "" has length 0. Embedded zeros are counted, so "a\000bc\000" has length 5.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.len</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">s</arg>
				</parameters>
				<returnValues>
					<arg type="int">length</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>packsize</name>
			<desc>Returns the size of a string resulting from [[string_pack|''string.pack'']] with the given format. The format string cannot have the variable-length options 's' or 'z' (see [http://www.lua.org/manual/5.3/manual.html#6.4.2 ยง6.4.2]).</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.packsize</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">fmt</arg>
				</parameters>
				<returnValues>
					<arg type="int">packSize</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>rep</name>
			<desc>
				Returns a string that is the concatenation of ''n'' copies of the string ''s'' separated by the string ''sep''. The default value for ''sep'' is the empty string (that is, no separator). Returns the empty string if ''n'' is not positive.\n
				(Note that it is very easy to exhaust the memory of your machine with a single call to this function.)
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.rep</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">s</arg>
					<arg type="int">n</arg>
					<arg type="string" default="&quot;&quot;">sep</arg>
				</parameters>
				<returnValues>
					<arg type="string">concatenation</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>reverse</name>
			<desc>Returns a string that is the string ''s'' reversed.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.reverse</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">s</arg>
				</parameters>
				<returnValues>
					<arg type="string">reversedString</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>sub</name>
			<desc>
				Returns the substring of ''s'' that starts at ''i'' and continues until ''j''; ''i'' and ''j'' can be negative. If ''j'' is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call ''string.sub(s,1,j)'' returns a prefix of ''s'' with length ''j'', and ''string.sub(s, -i)'' returns a suffix of ''s'' with length ''i''.\n
				If, after the translation of negative indices, ''i'' is less than 1, it is corrected to 1. If ''j'' is greater than the string length, it is corrected to that length. If, after these corrections, ''i'' is greater than ''j'', the function returns the empty string.
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.sub</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">s</arg>
					<arg type="int">i</arg>
					<arg type="int" default="-1">j</arg>
				</parameters>
				<returnValues>
					<arg type="string">subString</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>pack</name>
				<desc>Returns a binary string containing the values ''v1'', ''v2'', etc. packed (that is, serialized in binary form) according to the format string ''fmt'' (see [http://www.lua.org/manual/5.3/manual.html#6.4.2 ยง6.4.2]).</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.pack</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">fmt</arg>
						<arg type="any">v1</arg>
						<arg type="any">v2</arg>
						<arg type="any" variadic="1">v</arg>
					</parameters>
					<returnValues>
						<arg type="string">binaryString</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>unpack</name>
				<desc>
					Returns the values packed in string ''s'' (see [[string_pack|''string.pack'']]) according to the format string ''fmt'' (see [http://www.lua.org/manual/5.3/manual.html#6.4.2 ยง6.4.2]). An optional ''pos'' marks where to start reading in ''s'' (default is 1). After the read values, this function also returns the index of the first unread byte in ''s''.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.unpack</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">fmt</arg>
						<arg type="string">s</arg>
						<arg type="int" default="1">pos</arg>
					</parameters>
					<returnValues>
						<arg type="any" variadic="1">packedValues</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>upper</name>
				<desc>Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.upper</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">s</arg>
					</parameters>
					<returnValues>
						<arg type="string">upperCaseString</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>lower</name>
				<desc>Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-string.lower</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">s</arg>
					</parameters>
					<returnValues>
						<arg type="string">lowerCaseString</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" gui="1">
				<name>calc_levenshtein_distance</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">str0</arg>
						<arg type="string">str1</arg>
					</parameters>
					<returnValues>
						<arg type="int">distance</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" gui="1">
				<name>calc_levenshtein_similarity</name>
				<desc>Calculates the levenshtein similarity (A value in [0,1], 0 = strings are entirely different, 1 = strings are the same) between the two strings.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">str0</arg>
						<arg type="string">str1</arg>
					</parameters>
					<returnValues>
						<arg type="float">similarity</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" gui="1">
			<name>find_longest_common_substring</name>
			<desc>
				Finds the longest substring that is contained in both strings and returns the start position (Relative to ''str0'') and length of the substring.\n
				The start position relative to ''str1'' is returned as the third value.
			</desc>
			<lua>
				<desc>The example below will print "This is a" to the console.</desc>
				<code>
					local str1 = "This is an apple"
					local str2 = "This is a banana"
					local start,len = string.find_longest_common_substring(str1,str2)
					if(len > 0) then
						local substr = str1:sub(start,len)
						print(substr)
					end
				</code>
			</lua>
			<overload>
				<parameters>
					<arg type="string">str0</arg>
					<arg type="string">str1</arg>
				</parameters>
				<returnValues>
					<arg type="int">startPosition0</arg>
					<arg type="int">length</arg>
					<arg type="int">startPosition1</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" gui="1">
				<name>split</name>
				<desc></desc>
				<lua>
					local str = "Some test string"
					local t = string.split(str," ") -- Returns a table with [0] = "Some", [1] = "test" and [2] = "string"
				</lua>
				<overload>
					<parameters>
						<arg type="string">string</arg>
						<arg type="string">delimiter</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="string">splitStrings</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" gui="1">
				<name>join</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="string">strings</arg>
						<arg type="string" default=";">joinCharacter</arg>
					</parameters>
					<returnValues>
						<arg type="string">joinedString</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" gui="1">
				<name>remove_whitespace</name>
				<desc>Removes all whitespace characters from the specified string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">string</arg>
					</parameters>
					<returnValues>
						<arg type="string">stringWithoutWhitespace</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" gui="1">
				<name>remove_quotes</name>
				<desc>Removes all quote characters from the specified string.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">string</arg>
					</parameters>
					<returnValues>
						<arg type="string">stringWithoutQuotes</arg>
					</returnValues>
				</overload>
			</function>
		</group>
	</collection>
</root>
