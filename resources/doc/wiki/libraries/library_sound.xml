<root>
	<collection type="library" gui="1">
		<name>sound</name>
		<desc>TODO</desc>
		<group>
			<function type="function" gui="1">
				<name>create</name>
				<desc>
					Creates a new ALSound. If the sound is invalid, or hasn't been precached, a warning will be thrown in the console and nil will be returned.\n
					The 'sound'-parameter has to be either a path to a sound-file, relative to the "sounds"-directory, or the name of a soundscript.\n
					The 'alChannel'-parameter can be used to specify mono or stereo directly. (See ALChannel)\n
					If the sound is supposed to be played as a world sound, make sure to use the '''sound.FCREATE_MONO''' flag.\n
					If ''shared'' is set to ''false'', the sound will be serverside only. This can be useful to ease stress on the network throughput, or for creating spots of interest for NPCs.
				</desc>
				<lua></lua>
				<overload server="1">
					<parameters>
						<arg type="string">soundName</arg>
						<arg type="sound.Type">types</arg>
						<arg type="sound.FCreate" default="sound.FCREATE_NONE">createFlags</arg>
						<arg type="bool" default="true">shared</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Source">soundSource</arg>
					</returnValues>
				</overload>
				<overload client="1">
					<parameters>
						<arg type="string">soundName</arg>
						<arg type="sound.Type">types</arg>
						<arg type="sound.FCreate" default="sound.FCREATE_NONE">createFlags</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Source">soundSource</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" gui="1">
				<name>play</name>
				<desc>
					Creates a new ALSound and plays it automatically. If the sound is invalid, or hasn't been precached, a warning will be thrown in the console and nil will be returned.\n
					The 'sound'-parameter has to be either a path to a sound-file, relative to the "sounds"-directory, or the name of a soundscript.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">soundName</arg>
						<arg type="sound.Type">types</arg>
						<arg type="sound.FCreate" default="sound.FCREATE_NONE">createFlags</arg>
						<arg type="float" default="1.0">gain</arg>
						<arg type="float" default="1.0">pitch</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Source">soundSource</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">soundName</arg>
						<arg type="sound.Type">types</arg>
						<arg type="sound.FCreate">createFlags</arg>
						<arg type="float">gain</arg>
						<arg type="float">pitch</arg>
						<arg type="math.Vector">origin</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Source">soundSource</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">soundName</arg>
						<arg type="sound.Type">types</arg>
						<arg type="sound.FCreate">createFlags</arg>
						<arg type="math.Vector">origin</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Source">soundSource</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" gui="1">
			<name>get_duration</name>
			<desc>Returns the length of the specified sound.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">soundName</arg>
				</parameters>
				<returnValues>
					<arg type="float">duration</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" gui="1">
			<name>get_all</name>
			<desc>Returns a table of all currently existing sounds.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="table" subType="sound.Source">soundSources</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" gui="1">
			<name>is_music_playing</name>
			<desc>Returns ''true'' if a sound with type ''sound.TYPE_MUSIC'' is currently playing.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="bool">isMusicPlaying</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" gui="1">
			<name>find_by_type</name>
			<desc>Returns a table of all active sounds with the given type(s).</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="sound.Type">types</arg>
					<arg type="bool" default="false">exactMatch</arg>
				</parameters>
				<returnValues>
					<arg type="table" subType="sound.Source">soundSources</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" gui="1">
			<name>precache</name>
			<desc>
				Precaches the specified sound.\n
				You can use the 'alChannel' to specify how the sound should be precached.\n
				'''sound.CHANNEL_AUTO''': Will attempt to precache it as stereo, or mono if stereo is not available.\n
				'''sound.CHANNEL_MONO''': Will just precache it as mono.\n
				'''sound.CHANNEL_BOTH''': Will precache both stereo (If available) and mono.
			</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">soundName</arg>
					<arg type="sound.Channel" default="sound.CHANNEL_AUTO">channel</arg>
				</parameters>
			</overload>
		</function>
		<function type="function" gui="1">
			<name>stop_all</name>
			<desc>Stops all sounds that are currently playing.</desc>
			<lua></lua>
			<overload></overload>
		</function>
		<function type="function" gui="1">
			<name>load_scripts</name>
			<desc>Loads the sound scripts from a script-file and precaches all sounds within it. The script-file should be located within "scripts/sounds".</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">soundScriptFileName</arg>
				</parameters>
			</overload>
		</function>
		<function type="function" gui="1">
			<name>read_wav_phonemes</name>
			<desc>
				Reads phonemes from a wav sound-file. The ''phonemes'' table containes the following members:\n
				* {{template_type|string}} plainText: The spoken dialogue of the sound.\n
				* {{template_type|table}} words: The individual words of the spoken dialogue. Each entry in the table is another table with the following members:\n
				** {{template_type|float}} startTime: The time at which this word begins.\n
				** {{template_type|float}} endTime: The time at which this word ends.\n
				** {{template_type|string}} word: The spoken word.\n
				** {{template_type|table}} phonemes: The phonemes for this word. Each entry in the table is another table with the following members:\n
				*** {{template_type|string}} phoneme: The phoneme.\n
				*** {{template_type|float}} startTime: The time at which this phoneme begins.\n
				*** {{template_type|float}} endTime: The time at which this phoneme ends.
			</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">wavFileName</arg>
				</parameters>
				<returnValues>
					<arg type="table">phonemes</arg>
				</returnValues>
			</overload>
		</function>
		<!-- clientside -->
		<group>
			<function type="function" client="1" gui="1">
				<name>create_dsp_effect</name>
				<desc>Creates a new auxiliary effect with the specified name and type and returns it, or nil if there was an error.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="sound.ReverbProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.ChorusProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.DistortionProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.EchoProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.FlangerProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.FrequencyShifterProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.VocalMorpherProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.PitchShifterProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.RingModulatorProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.AutoWahProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.CompressorProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="sound.EqualizerProperties">properties</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1" gui="1">
				<name>get_dsp_effect</name>
				<desc>Returns the auxiliary effect with the specified name, or nil if it doesn't exist.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="sound.Effect">effect</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" client="1" gui="1">
				<name>set_distance_model</name>
				<desc>
					Changes the global distance model for all sounds. The default is AL_LINEAR_DISTANCE_CLAMPED.\n
					'''WARNING''': If this is set to anything but AL_LINEAR_DISTANCE_CLAMPED, ALSound:GetMaxAudibleDistance will not return the correct distance.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="sound.DistanceModel">distanceModel</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" client="1" gui="1">
				<name>get_distance_model</name>
				<desc>Returns the current distance model for sounds.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="sound.DistanceModel">distanceModel</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" client="1" gui="1">
			<name>is_supported</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="sound.ChannelConfig">channelConfig</arg>
					<arg type="sound.SampleType">sampleType</arg>
				</parameters>
				<returnValues>
					<arg type="bool">supported</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" client="1" gui="1">
				<name>get_doppler_factor</name>
				<desc>Returns the global doppler factor.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="float">dopplerFactor</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1" gui="1">
				<name>set_doppler_factor</name>
				<desc>Changes the global doppler factor.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">dopplerFactor</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" client="1" gui="1">
				<name>get_speed_of_sound</name>
				<desc>Returns the global speed of sound.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="float">speedOfSound</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1" gui="1">
				<name>set_speed_of_sound</name>
				<desc>Changes the global speed of sound.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">speedOfSound</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<function type="function" client="1" gui="1">
			<name>get_device_name</name>
			<desc>Returns the name of the device used by the audio engine.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="string">deviceName</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" client="1" gui="1">
				<name>add_global_effect</name>
				<desc>Applies a global effect to all sounds. Returns ''true'' on success.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">effectName</arg>
						<arg type="sound.GlobalEffectFlags" default="sound.GLOBAL_EFFECT_FLAG_ALL">flags</arg>
						<arg type="float" default="1.0">gain</arg>
						<arg type="float" default="1.0">gainHF</arg>
						<arg type="float" default="1.0">gainLF</arg>
					</parameters>
					<returnValues>
						<arg type="bool">success</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1" gui="1">
				<name>remove_global_effect</name>
				<desc>Stops a currently active global effect.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">effectName</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" client="1" gui="1">
				<name>set_global_effect_parameters</name>
				<desc>Changes the parameters for a currently active global effect.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">effectName</arg>
						<arg type="float" default="1.0">gain</arg>
						<arg type="float" default="1.0">gainHF</arg>
						<arg type="float" default="1.0">gainLF</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<!-- clientside -->
		<enum_set type="flags" client="1" gui="1">
			<name>GlobalEffectFlags</name>
			<enum value="0">GLOBAL_EFFECT_FLAG_NONE</enum>
			<enum value="1" type="bit">GLOBAL_EFFECT_FLAG_BIT_RELATIVE</enum>
			<enum value="2" type="bit">GLOBAL_EFFECT_FLAG_BIT_WORLD</enum>
			<enum value="3">GLOBAL_EFFECT_FLAG_ALL</enum>
		</enum_set>
		<enum_set type="flags" gui="1">
			<name>Type</name>
			<enum value="0">TYPE_GENERIC</enum>
			<enum value="1" type="bit">TYPE_EFFECT</enum>
			<enum value="2" type="bit">TYPE_MUSIC</enum>
			<enum value="4" type="bit">TYPE_VOICE</enum>
			<enum value="8" type="bit">TYPE_WEAPON</enum>
			<enum value="16" type="bit">TYPE_NPC</enum>
			<enum value="32" type="bit">TYPE_PLAYER</enum>
			<enum value="64" type="bit">TYPE_VEHICLE</enum>
			<enum value="128" type="bit">TYPE_PHYSICS</enum>
			<enum value="256" type="bit">TYPE_ENVIRONMENT</enum>
			<enum value="512" type="bit">TYPE_GUI</enum>
		</enum_set>
		<enum_set type="flags">
			<name>FCreate</name>
			<enum value="0">FCREATE_NONE</enum>
			<enum value="1" type="bit">FCREATE_MONO</enum>
			<enum value="2" type="bit">FCREATE_STREAM</enum>
			<enum value="4" type="bit">FCREATE_DONT_TRANSMIT</enum>
		</enum_set>
		<enum_set gui="1">
			<name>State</name>
			<enum value="0">STATE_NO_ERROR</enum>
			<enum value="4113">STATE_INITIAL</enum>
			<enum value="4114">STATE_PLAYING</enum>
			<enum value="4115">STATE_PAUSED</enum>
			<enum value="4116">STATE_STOPPED</enum>
		</enum_set>
		<enum_set gui="1">
			<name>Channel</name>
			<enum value="0">CHANNEL_AUTO</enum>
			<enum value="1">CHANNEL_MONO</enum>
			<enum value="2">CHANNEL_BOTH</enum>
		</enum_set>
		<enum_set client="1" gui="1">
			<name>DistanceModel</name>
			<enum value="0">DISTANCE_MODEL_NONE</enum>
			<enum value="53250">DISTANCE_MODEL_INVERSE_CLAMPED</enum>
			<enum value="53251">DISTANCE_MODEL_LINEAR</enum>
			<enum value="53252">DISTANCE_MODEL_LINEAR_CLAMPED</enum>
			<enum value="53253">DISTANCE_MODEL_EXPONENT</enum>
			<enum value="53254">DISTANCE_MODEL_EXPONENT_CLAMPED</enum>
			<enum value="53249">DISTANCE_MODEL_INVERSE</enum>
		</enum_set>
		<enum_set client="1">
			<name>ChannelConfig</name>
			<enum value="0">CHANNEL_CONFIG_MONO</enum>
			<enum value="1">CHANNEL_CONFIG_STEREO</enum>
			<enum value="2">CHANNEL_CONFIG_REAR</enum>
			<enum value="3">CHANNEL_CONFIG_QUAD</enum>
			<enum value="4">CHANNEL_CONFIG_X51</enum>
			<enum value="5">CHANNEL_CONFIG_X61</enum>
			<enum value="6">CHANNEL_CONFIG_X71</enum>
			<enum value="7">CHANNEL_CONFIG_BFORMAT_2D</enum>
			<enum value="8">CHANNEL_CONFIG_BFORMAT_3D</enum>
		</enum_set>
		<enum_set client="1">
			<name>SampleType</name>
			<enum value="0">SAMPLE_TYPE_UINT8</enum>
			<enum value="1">SAMPLE_TYPE_INT16</enum>
			<enum value="2">SAMPLE_TYPE_FLOAT32</enum>
			<enum value="3">SAMPLE_TYPE_MULAW</enum>
		</enum_set>
	</collection>
</root>
