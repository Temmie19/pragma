<root>
	<collection type="library" gui="1">
		<name>console</name>
		<desc>TODO</desc>
		<group>
			<function type="function" shared="1" gui="1">
				<name>print</name>
				<desc>Prints all of the given arguments to the console.</desc>
				<lua>
					print( true ) -- prints 'true' to the console
					print( 18 ) -- prints '18' to the console
					print( "Hello World" ) -- prints 'Hello World' to the console
				</lua>
				<overload>
					<parameters>
						<arg type="any" variadic="1">printValues</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>print_table</name>
				<desc>Prints the contents of the given table to the console.</desc>
				<lua>
					local MyTable = { "Dog", "Cat", "Elephant", "Bird" }

					print_table( MyTable ) -- Prints the contents of the table.
				</lua>
				<overload>
					<parameters>
						<arg type="table">table</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>print_message</name>
				<desc>Prints all of the given arguments to the console. The color of the message depends on which lua state this function has been called in (e.g. client / server). This will '''not''' automatically append a new line!</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any" variadic="1">printValues</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>print_messageln</name>
				<desc>Prints all of the given arguments to the console. The color of the message depends on which lua state this function has been called in (e.g. client / server). This '''will''' automatically append a new line!</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any" variadic="1">printValues</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>print_color</name>
				<desc>Prints all of the given arguments to the console. The color can be specified through the first parameter. This '''will''' automatically append a new line!</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="console.ColorFlag">flags</arg>
						<arg type="any" variadic="1">printValues</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>print_warning</name>
				<desc>Prints a warning message to the console, including a new-line.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any" variadic="1">printValues</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>print_error</name>
				<desc>Prints an error message to the console, including a new-line.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any" variadic="1">printValues</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1">
				<name>register_variable</name>
				<desc>Creates a new ConVar.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
						<arg type="string">default</arg>
						<arg type="console.Flag" default="console.FLAG_NONE">flags</arg>
						<arg type="string" default="">help</arg>
					</parameters>
					<returnValues>
						<arg type="console.Var">conVar</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>register_command</name>
				<desc>
					Creates a new ConCommand. The callback has the following syntax:\n
					{{template_overload|{{template_type|void}}|Callback|{{template_param|ents.PlayerComponent}} pl,{{template_param|string}} arguments...}}
					There are two special prefixes for ConCommands, "+" and "-". A command with the "+"-Prefix will be called whenever a key, which is bound to the command, is pressed. Once the key is released, the "-" counterpart is called, assuming it exists.<br/>
					If either the ''console.FLAG_BIT_JOYSTICK_AXIS_CONTINUOUS'' or ''console.FLAG_BIT_JOYSTICK_AXIS_SINGLE'' flags were specified, the callback will have an additional parameter after the player:<br/>
					{{template_overload|{{template_type|void}}|Callback|{{template_param|ents.PlayerComponent}} pl,{{template_param|float}} joystickAxisMagnitude,{{template_param|string}} arguments...}}
				</desc>
				<lua>
					<desc>
						This will print the sum of all given parameters.\n
						e.g. "math_sum 1 5 7" will print out "13".
					</desc>
					<code>
						console.register_command("math_sum",function(pl,...)
							local sum = 0
							for _,v in ipairs({...}) do
								local n = tonumber(v)
								if(n ~= nil) then
									sum = sum +n
								end
							end
							print(sum)
						end)
					</code>
				</lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
						<arg type="function">callback</arg>
						<arg type="console.Flag" default="console.FLAG_NONE">flags</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1">
			<name>run</name>
			<desc>Runs the specified ConVar or ConCommand. All additional parameters will be treated as cmd args.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">name</arg>
					<arg type="string" variadic="1">arguments</arg>
				</parameters>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>get_convar</name>
				<desc>Returns the ConVar associated with the specified name. Will return ''nil'' if it hasn't been found, or if it's a ConCommand.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="console.Var">conVar</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>get_convar_int</name>
				<desc>Returns the value of the specified ConVar as an integer.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="int">value</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>get_convar_float</name>
				<desc>Returns the value of the specified ConVar as a float.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="float">value</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>get_convar_string</name>
				<desc>Returns the value of the specified ConVar.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="string">value</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>get_convar_bool</name>
				<desc>Returns the value of the specified ConVar as a boolean.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="bool">value</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>get_convar_flags</name>
				<desc>Returns the flags of the specified ConVar.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="console.Flag">flags</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1">
			<name>add_change_callback</name>
			<desc>
				Adds a callback for the specified ConVar. The signature for the callback is:\n
				{{template_overload|{{template_type|void}}|callback|{{template_param|string}} oldValue,{{template_param|string}} newValue}}
			</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">cvarName</arg>
					<arg type="function">callback</arg>
				</parameters>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>register_override</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">overrideSrc</arg>
						<arg type="string">overrideDst</arg>
					</parameters>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>clear_override</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">overrideSrc</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<enum_set type="flags" gui="1">
			<name>ColorFlag</name>
			<enum value="1" type="bit">FOREGROUND_BLUE</enum>
			<enum value="2" type="bit">FOREGROUND_GREEN</enum>
			<enum value="4" type="bit">FOREGROUND_RED</enum>
			<enum value="8" type="bit">FOREGROUND_INTENSITY</enum>
			<enum value="16" type="bit">BACKGROUND_BLUE</enum>
			<enum value="32" type="bit">BACKGROUND_GREEN</enum>
			<enum value="64" type="bit">BACKGROUND_RED</enum>
			<enum value="128" type="bit">BACKGROUND_INTENSITY</enum>
		</enum_set>
		<enum_set type="flags" gui="1">
			<name>Flag</name>
			<enum value="0">FLAG_NONE</enum>
			<enum value="1" type="bit">FLAG_BIT_CHEAT</enum>
			<enum value="2" type="bit">FLAG_BIT_SINGLEPLAYER</enum>
			<enum value="4" type="bit">FLAG_BIT_USERINFO</enum>
			<enum value="8" type="bit">FLAG_BIT_REPLICATED</enum>
			<enum value="16" type="bit">FLAG_BIT_ARCHIVE</enum>
			<enum value="32" type="bit">FLAG_BIT_NOTIFY</enum>
			<enum value="64" type="bit">FLAG_BIT_JOYSTICK_AXIS_CONTINUOUS</enum>
			<enum value="128" type="bit">FLAG_BIT_JOYSTICK_AXIS_SINGLE</enum>
		</enum_set>
	</collection>
</root>
