<root>
	<collection type="library">
		<name>matrix</name>
		<desc>TODO</desc>
		<group>
			<function type="function">
				<name>create_from_axis_angle</name>
				<desc>Creates a matrix from an axis and an angle.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">axis</arg>
						<arg type="float">angle</arg>
					</parameters>
					<returnValues>
						<arg type="math.Mat4">rotationMatrix</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_from_axes</name>
				<desc>Creates a matrix from an axes orientation.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">forward</arg>
						<arg type="math.Vector">right</arg>
						<arg type="math.Vector">up</arg>
					</parameters>
					<returnValues>
						<arg type="math.Mat4">rotationMatrix</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_orthogonal_matrix</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">left</arg>
						<arg type="float">right</arg>
						<arg type="float">bottom</arg>
						<arg type="float">top</arg>
						<arg type="float">nearZ</arg>
						<arg type="float">farZ</arg>
					</parameters>
					<returnValues>
						<arg type="math.Mat4">orthogonalMatrix</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_perspective_matrix</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">fov</arg>
						<arg type="float">aspectRatio</arg>
						<arg type="float">nearZ</arg>
						<arg type="float">farZ</arg>
					</parameters>
					<returnValues>
						<arg type="math.Mat4">perspectiveMatrix</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_look_at_matrix</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">eyePosition</arg>
						<arg type="math.Vector">lookAtTarget</arg>
						<arg type="math.Vector">upDirection</arg>
					</parameters>
					<returnValues>
						<arg type="math.Mat4">lookAtMatrix</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>calc_covariance_matrix</name>
				<desc>Calculates the covariance matrix for the specified points. The ''average'' point can be passed if it's already known, otherwise the algorithm has to calculate it first.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">points</arg>
						<arg type="math.Vector">average</arg>
					</parameters>
					<returnValues>
						<arg type="math.Mat3">covarianceMatrix</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">points</arg>
					</parameters>
					<returnValues>
						<arg type="math.Mat3">covarianceMatrix</arg>
					</returnValues>
				</overload>
			</function>
		</group>
	</collection>
</root>
