<root>
	<collection type="library" gui="1">
		<name>_G</name>
		<desc>TODO</desc>
		<function type="function" shared="1" gui="1">
			<name>include</name>
			<desc>
				Includes the specified lua file. The path is relative to the directory of the script that has invoked this function, unless the path starts with '/', in which case it will start relative to the lua-directory of pragma.\n
				If a pre-compiled lua-file of the same name as the specified ''file'' exists (With the ''.clua''-extension), it will be loaded instead!\n
				If no extension is specified, the string will be treated as directory and all .lua-files within that directory will be included.
			</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">fileNameOrDirectory</arg>
				</parameters>
			</overload>
		</function>
		<function type="function" shared="1" gui="1">
			<name>get_script_path</name>
			<desc>Returns the path to the currently loaded Lua-script file.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="string">scriptPath</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>toboolean</name>
				<desc>Returns ''true'' if the if the specified string contains the word "true", or if the string is an integer number != 0.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">string</arg>
					</parameters>
					<returnValues>
						<arg type="bool">boolean</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>tonumber</name>
				<desc>
					When called with no ''base'', ''tonumber'' tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then ''tonumber'' returns this number; otherwise, it returns '''nil'''.<br/>
					The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [http://www.lua.org/manual/5.3/manual.html#3.1 ยง3.1]). (The string may have leading and trailing spaces and a sign.)<br/>
					When called with ''base'', then ''e'' must be a string to be interpreted as an integer numeral in that base. The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter 'A' (in either upper or lower case) represents 10, 'B' represents 11, and so forth, with 'Z' representing 35. If the string ''e'' is not a valid numeral in the given base, the function returns '''nil'''.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any">e</arg>
						<arg type="int">base</arg>
					</parameters>
					<returnValues>
						<arg type="float">result</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="any">e</arg>
					</parameters>
					<returnValues>
						<arg type="float">result</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>tostring</name>
				<desc>
					Receives a value of any type and converts it to a string in a human-readable format. (For complete control of how numbers are converted, use [[string_format|''string.format'']].)\n
					If the metatable of v has a "__tostring" field, then ''tostring'' calls the corresponding value with ''v'' as argument, and uses the result of the call as its result.
				</desc>
				<lua>
					local Answer = true

					print( "My answer is " ..tostring(Answer) ) -- Prints 'My answer is true'
					print( "I am " ..tostring(2).. " years old" ) -- Prints 'I am 2 years old'
				</lua>
				<overload>
					<parameters>
						<arg type="any">e</arg>
					</parameters>
					<returnValues>
						<arg type="string">result</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>assert</name>
			<desc>Calls ''error'' if the value of its argument ''v'' is false (i.e., '''nil''' or '''false'''); otherwise, returns all its arguments. In case of error, ''message'' is the error object; when absent, it defaults to "assertion failed!"</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-assert</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="any">v</arg>
				</parameters>
				<returnValues>
					<arg type="any" variadic="1">arguments</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="any">v</arg>
					<arg type="string">message</arg>
				</parameters>
				<returnValues>
					<arg type="any" variadic="1">arguments</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1">
			<name>class</name>
			<desc>Registers a new class. A function is returned, which can be used to specify one or more parent classes.</desc>
			<url>https://wiki.pragma-engine.com/index.php?title=G</url>
			<lua>
				local idx = 0
				class 'Test'
				function Test:__init() -- A new instance of 'Test' has been created
					self.m_index = idx
					idx = idx +1
				end
				function Test:__finalize() -- An instance of 'Test' has been destroyed by the garbage collector
					idx = idx -1
				end
				function Test:GetIndex() return self.m_index end
				function Test:Print()
					print("This is object #" .. self:GetIndex())
				end
				local o1 = Test()
				o1:Print()

				class 'TestB' (Test)
				function TestB:__init()
					Test.__init(self)
				end
				function TestB:__finalize()
					Test.__finalize(self)
				end
				function TestB:Print()
					Test.Print(self)
					print("TestB Print")
				end
				local o2 = TestB()
				o2:Print()

				-- If you want to derive from more than one class, you'll have to use this syntax instead:
				class 'Test1'
				function Test1:__init() print("Test1") end

				class 'Test2'
				function Test2:__init() print("Test2") end

				local c = class("Test3")
				c(Test1)
				c(Test2)
				function Test3:__init()
					print("Test3")
					Test2.__init(self)
					Test1.__init(self)
				end

				local o = Test3()
			</lua>
			<overload>
				<parameters>
					<arg type="string">name</arg>
				</parameters>
				<returnValues>
					<arg type="function">function</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>collectgarbage</name>
			<desc>
				This function is a generic interface to the garbage collector. It performs different functions according to its first argument, ''opt'':\n
				* '''"collect"''': performs a full garbage-collection cycle. This is the default option.\n
				* '''"stop"''': stops automatic execution of the garbage collector. The collector will run only when explicitly invoked, until a call to restart it.\n
				* '''"restart"''': restarts automatic execution of the garbage collector.\n
				* '''"count"''': returns the total memory in use by Lua in Kbytes. The value has a fractional part, so that it multiplied by 1024 gives the exact number of bytes in use by Lua (except for overflows).\n
				* '''"step"''': performs a garbage-collection step. The step "size" is controlled by ''arg''. With a zero value, the collector will perform one basic (indivisible) step. For non-zero values, the collector will perform as if that amount of memory (in KBytes) had been allocated by Lua. Returns '''true''' if the step finished a collection cycle.\n
				* '''"setpause"''': sets ''arg'' as the new value for the ''pause'' of the collector (see [http://www.lua.org/manual/5.3/manual.html#2.5 ยง2.5]). Returns the previous value for ''pause''.\n
				* '''"setstepmul"''': sets ''arg'' as the new value for the ''step multiplier'' of the collector (see [http://www.lua.org/manual/5.3/manual.html#2.5 ยง2.5]). Returns the previous value for ''step''.\n
				* '''"isrunning"''': returns a boolean that tells whether the collector is running (i.e., not stopped).
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-collectgarbage</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">opt</arg>
					<arg type="any">arg</arg>
				</parameters>
				<returnValues>
					<arg type="any" variadic="1">arguments</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="string">opt</arg>
				</parameters>
				<returnValues>
					<arg type="any" variadic="1">arguments</arg>
				</returnValues>
			</overload>
			<overload>
				<returnValues>
					<arg type="any" variadic="1">arguments</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>error</name>
			<desc>
				Terminates the last protected function called and returns ''message'' as the error object. Function ''error'' never returns.
				Usually, ''error'' adds some information about the error position at the beginning of the message, if the message is a string. The ''level'' argument specifies how to get the ''error'' position. With level 1 (the default), the error position is where the error function was called. Level 2 points the error to where the function that called ''error'' was called; and so on. Passing a level 0 avoids the addition of error position information to the message.
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-error</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">message</arg>
					<arg type="int" default="1">level</arg>
				</parameters>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>getfenv</name>
			<desc>Returns the current environment in use by the function. f can be a Lua function or a number that specifies the function at that stack level: Level 1 is the function calling getfenv. If the given function is not a Lua function, or if f is 0, getfenv returns the global environment. The default for f is 1.</desc>
			<url>http://www.lua.org/manual/5.1/manual.html#pdf-getfenv</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="int" default="1">f</arg>
				</parameters>
				<returnValues>
					<arg type="any">env</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="function">f</arg>
				</parameters>
				<returnValues>
					<arg type="any">env</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>getmetatable</name>
				<desc>If ''object'' does not have a metatable, returns '''nil'''. Otherwise, if the object's metatable has a "__metatable" field, returns the associated value. Otherwise, returns the metatable of the given object.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-getmetatable</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any">object</arg>
					</parameters>
					<returnValues>
						<arg type="any">metatable</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>setmetatable</name>
				<desc>
					Sets the metatable for the given table. (To change the metatable of other types from Lua code, you must use the debug library ([http://www.lua.org/manual/5.3/manual.html#6.10 ยง6.10]).) If ''metatable'' is '''nil''', removes the metatable of the given table. If the original metatable has a "__metatable" field, raises an error.\n
					This function returns ''table''.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-setmetatable</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table">table</arg>
						<arg type="table">metatable</arg>
					</parameters>
					<returnValues>
						<arg type="table">result</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>ipairs</name>
				<desc>
					Returns three values (an iterator function, the table ''t'', and 0) so that the construction\n
					<syntaxhighlight lang="lua">
					for i,v in ipairs(t) do ''body'' end
					</syntaxhighlight>
					will iterate over the keyโvalue pairs (1,t[1]), (2,t[2]), ..., up to the first nil value.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-ipairs</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table">t</arg>
					</parameters>
					<returnValues>
						<arg type="function">iteratorFunction</arg>
						<arg type="table">t</arg>
						<arg type="int" default="0">0</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>next</name>
				<desc>
					Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. ''next'' returns the next index of the table and its associated value. When called with '''nil''' as its second argument, ''next'' returns an initial index and its associated value. When called with the last index, or with '''nil''' in an empty table, ''next'' returns '''nil'''. If the second argument is absent, then it is interpreted as '''nil'''. In particular, you can use ''next(t)'' to check whether a table is empty.\n
					The order in which the indices are enumerated is not specified, ''even for numeric indices''. (To traverse a table in numerical order, use a numerical '''for'''.)\n
					The behavior of ''next'' is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may clear existing fields.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-next</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table">table</arg>
						<arg type="int">index</arg>
					</parameters>
					<returnValues>
						<arg type="any" variadic="1">result</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>pairs</name>
				<desc>
					If ''t'' has a metamethod ''__pairs'', calls it with ''t'' as argument and returns the first three results from the call.\n
					Otherwise, returns three values: the [[G_next|''next'']] function, the table ''t'', and '''nil''', so that the construction
					<syntaxhighlight lang="lua">
					for k,v in pairs(t) do ''body'' end
					</syntaxhighlight>
					will iterate over all keyโvalue pairs of table ''t''.\n
					See function [[G_next|''next'']] for the caveats of modifying the table during its traversal.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-pairs</url>
				<lua>
					local MyTable = { "Dog", "Cat", "Elephant", "Bird" }

					for k, v in pairs( MyTable ) do
					  print( v ) -- Prints each value in 'MyTable'.
					end
				</lua>
				<overload>
					<parameters>
						<arg type="table">table</arg>
					</parameters>
					<returnValues>
						<arg type="function">nextFunction</arg>
						<arg type="table">t</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>load</name>
			<desc>
				If ''chunk'' is a string, the chunk is this string. If ''chunk'' is a function, ''load'' calls it repeatedly to get the chunk pieces. Each call to ''chunk'' must return a string that concatenates with previous results. A return of an empty string, '''nil''', or no value signals the end of the chunk.\n
				If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns '''nil''' plus the error message.\n
				If the resulting function has upvalues, the first upvalue is set to the value of ''env'', if that parameter is given, or to the value of the global environment. Other upvalues are initialized with '''nil'''. (When you load a main chunk, the resulting function will always have exactly one upvalue, the _ENV variable (see [http://www.lua.org/manual/5.3/manual.html#2.2 ยง2.2]). However, when you load a binary chunk created from a function (see [[string_dump|string.dump]]), the resulting function can have an arbitrary number of upvalues.) All upvalues are fresh, that is, they are not shared with any other function.\n
				''chunkname'' is used as the name of the chunk for error messages and debug information (see [http://www.lua.org/manual/5.3/manual.html#4.9 ยง4.9]). When absent, it defaults to ''chunk'', if ''chunk'' is a string, or to "=(load)" otherwise.\n
				The string ''mode'' controls whether the chunk can be text or binary (that is, a precompiled chunk). It may be the string "b" (only binary chunks), "t" (only text chunks), or "bt" (both binary and text). The default is "bt".\n
				Lua does not check the consistency of binary chunks. Maliciously crafted binary chunks can crash the interpreter.
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-load</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">chunk</arg>
				</parameters>
				<returnValues>
					<arg type="function">compiledChunk</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="string">chunk</arg>
					<arg type="string">chunkname</arg>
					<arg type="string" default="bt">mode</arg>
				</parameters>
				<returnValues>
					<arg type="function">compiledChunk</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="string">chunk</arg>
					<arg type="string">chunkname</arg>
					<arg type="string">mode</arg>
					<arg type="any">env</arg>
				</parameters>
				<returnValues>
					<arg type="function">compiledChunk</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="function">chunk</arg>
					<arg type="string" default="=(load)">chunkname</arg>
					<arg type="string" default="bt">mode</arg>
				</parameters>
				<returnValues>
					<arg type="function">compiledChunk</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="function">chunk</arg>
					<arg type="string">chunkname</arg>
					<arg type="string">mode</arg>
					<arg type="any">env</arg>
				</parameters>
				<returnValues>
					<arg type="function">compiledChunk</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>module</name>
			<desc>
				Creates a module. If there is a table in package.loaded[name], this table is the module. Otherwise, if there is a global table t with the given name, this table is the module. Otherwise creates a new table t and sets it as the value of the global name and the value of package.loaded[name]. This function also initializes t._NAME with the given name, t._M with the module (t itself), and t._PACKAGE with the package name (the full module name minus last component; see below). Finally, module sets t as the new environment of the current function and the new value of package.loaded[name], so that require returns t.\n
				\n
				If name is a compound name (that is, one with components separated by dots), module creates (or reuses, if they already exist) tables for each component. For instance, if name is a.b.c, then module stores the module table in field c of field b of global a.\n
				\n
				This function can receive optional options after the module name, where each option is a function to be applied over the module.
			</desc>
			<url>http://www.lua.org/manual/5.1/manual.html#pdf-module</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">name</arg>
					<arg type="function" variadic="1">arguments</arg>
				</parameters>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>pcall</name>
				<desc>
					Calls function ''f'' with the given arguments in ''protected mode''. This means that any error inside ''f'' is not propagated; instead, ''pcall'' catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, ''pcall'' also returns all results from the call, after this first result. In case of any error, ''pcall'' returns '''false''' plus the error message.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-pcall</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="function">f</arg>
						<arg type="any" variadic="1">arguments</arg>
					</parameters>
					<returnValues>
						<arg type="bool">statusCode</arg>
						<arg type="any" variadic="1">results</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>xpcall</name>
				<desc>This function is similar to [[G_pcall|''pcall'']], except that it sets a new message handler ''msgh''.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-xpcall</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="function">f</arg>
						<arg type="function">msgh</arg>
						<arg type="any" variadic="1">arguments</arg>
					</parameters>
					<returnValues>
						<arg type="bool">result</arg>
						<arg type="any" variadic="1">returnValues</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>rawequal</name>
				<desc>Checks whether ''v1'' is equal to ''v2'', without invoking any metamethod. Returns a boolean.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-rawequal</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any">v1</arg>
						<arg type="any">v2</arg>
					</parameters>
					<returnValues>
						<arg type="bool">equal</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>rawget</name>
				<desc>Gets the real value of ''table[index]'', without invoking any metamethod. ''table'' must be a table; ''index'' may be any value.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-rawget</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table">table</arg>
						<arg type="any">index</arg>
					</parameters>
					<returnValues>
						<arg type="any">value</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>rawlen</name>
				<desc>Returns the length of the object ''v'', which must be a table or a string, without invoking any metamethod. Returns an integer.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-rawlen</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table">v</arg>
					</parameters>
					<returnValues>
						<arg type="int">length</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="string">v</arg>
					</parameters>
					<returnValues>
						<arg type="int">length</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>rawset</name>
				<desc>
					Sets the real value of ''table[index]'' to ''value'', without invoking any metamethod. ''table'' must be a table, ''index'' any value different from '''nil''' and NaN, and ''value'' any Lua value.\n
					This function returns ''table''.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-rawset</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table">table</arg>
						<arg type="any">index</arg>
						<arg type="any">value</arg>
					</parameters>
					<returnValues>
						<arg type="table">table</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>require</name>
			<desc>
				Loads the given module. The function starts by looking into the [[package_loaded|''package.loaded'']] table to determine whether ''modname'' is already loaded. If it is, then ''require'' returns the value stored at ''package.loaded[modname]''. Otherwise, it tries to find a ''loader'' for the module.\n
				To find a loader, ''require'' is guided by the [[package_searchers|''package.searchers'']] sequence. By changing this sequence, we can change how ''require'' looks for a module. The following explanation is based on the default configuration for [[package_searchers|''package.searchers'']].\n
				First ''require'' queries ''package.preload[modname]''. If it has a value, this value (which must be a function) is the loader. Otherwise ''require'' searches for a Lua loader using the path stored in [[package_path|''package.path'']]. If that also fails, it searches for a C loader using the path stored in [[package_cpath|''package.cpath'']]. If that also fails, it tries an ''all-in-one'' loader (see [[package_searchers|''package.searchers'']]).\n
				Once a loader is found, ''require'' calls the loader with two arguments: ''modname'' and an extra value dependent on how it got the loader. (If the loader came from a file, this extra value is the file name.) If the loader returns any non-nil value, ''require'' assigns the returned value to ''package.loaded[modname]''. If the loader does not return a non-nil value and has not assigned any value to ''package.loaded[modname]'', then ''require'' assigns '''true''' to this entry. In any case, ''require'' returns the final value of ''package.loaded[modname]''.\n
				If there is any error loading or running the module, or if it cannot find any loader for the module, then ''require'' raises an error.
			</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-require</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">modname</arg>
				</parameters>
				<returnValues>
					<arg type="any">result</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>select</name>
			<desc>If ''index'' is a number, returns all arguments after argument number ''index''; a negative number indexes from the end (-1 is the last argument). Otherwise, ''index'' must be the string "#", and ''select'' returns the total number of extra arguments it received.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-select</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="int">index</arg>
					<arg type="any" variadic="1">arguments</arg>
				</parameters>
				<returnValues>
					<arg type="any" variadic="1">result</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="string">&quot;#&quot;</arg>
					<arg type="any" variadic="1">arguments</arg>
				</parameters>
				<returnValues>
					<arg type="int">result</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>type</name>
			<desc>Returns the type of its only argument, coded as a string. The possible results of this function are "nil" (a string, not the value '''nil'''), "number", "string", "boolean", "table", "function", "thread", and "userdata".</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-type</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="any">v</arg>
				</parameters>
				<returnValues>
					<arg type="string">type</arg>
				</returnValues>
			</overload>
		</function>
		<member type="bool" mode="r" shared="1" vanilla="1">
			<name>CLIENT</name>
			<desc>Returns ''true'' if the Lua state is clientside, otherwise ''false''.</desc>
		</member>
		<member type="bool" mode="r" shared="1" vanilla="1">
			<name>SERVER</name>
			<desc>Returns ''true'' if the Lua state is serverside, otherwise ''false''.</desc>
		</member>
		<member type="int" mode="r" shared="1" gui="1" vanilla="1">
			<name>_VERSION</name>
			<desc>A global variable (not a function) that holds a string containing the current interpreter version.</desc>
			<url>http://www.lua.org/manual/5.1/manual.html#pdf-_VERSION</url>
		</member>
	</collection>
</root>
