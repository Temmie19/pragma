<root>
	<collection type="library">
		<name>file</name>
		<desc>TODO</desc>
		<group>
			<function type="function">
				<name>open</name>
				<desc>
					Opens the file with the specified mode.\n
					Depending on the location of the file type (virtual, package, local), some of the open modes may not be available.\n
					Note that for security reasons writing files is only allowed from within addons, and the files will always be written relative to that addon!
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">fileName</arg>
						<arg type="file.OpenMode">openMode</arg>
						<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
					</parameters>
					<returnValues>
						<arg type="file.File">file</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>read</name>
				<desc>Reads an entire file as plain text.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">fileName</arg>
						<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
					</parameters>
					<returnValues>
						<arg type="string">fileContent</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>write</name>
				<desc>
					Clears the specified file and writes the content as plain text. Returns true on success.\n
					Note that for security reasons writing files is only allowed from within addons, and the files will always be written relative to that addon!
				</desc>
				<lua>
					local success = file.write( "test.txt", "Hello World!" )
					print( tostring( success ) )
				</lua>
				<overload>
					<parameters>
						<arg type="string">fileName</arg>
						<arg type="string">fileContent</arg>
					</parameters>
					<returnValues>
						<arg type="bool">success</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>create_directory</name>
				<desc>
					Creates the specified directory and returns true on success. Only attempts to create the specified directory, if the parent directory doesn't exist, it will fail.\n
					Note that for security reasons creating directories is only allowed from within addons, and the directory will always be created relative to that addon!
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">directoryName</arg>
					</parameters>
					<returnValues>
						<arg type="bool">success</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_path</name>
				<desc>
					Creates the specified directory and returns true on success. This will create parent directories as well.\n
					Note that for security reasons creating directories is only allowed from within addons, and the directory will always be created relative to that addon!
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">pathName</arg>
					</parameters>
					<returnValues>
						<arg type="bool">success</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>exists</name>
				<desc>Returns ''true'' if the specified file or directory exists.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">fileName</arg>
						<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
					</parameters>
					<returnValues>
						<arg type="bool">exists</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>delete</name>
				<desc>
					Removes the specified file and returns ''true'' on success.
					Note that for security reasons deleting files is only allowed from within addons, and only files relative to the addon can be deleted!
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">fileName</arg>
					</parameters>
					<returnValues>
						<arg type="bool">success</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>is_directory</name>
			<desc>Returns ''true'' if the specified path is a directory.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">path</arg>
					<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
				</parameters>
				<returnValues>
					<arg type="bool">isDirectory</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>find</name>
				<desc>Returns two tables. The first table contains all found files, the second table contains the found directories with the specified name.</desc>
				<lua>
					local files,dirs = file.find("lua/*.lua",FSYS_SEARCH_ALL)
					console.print_table(files)
					console.print_table(dirs)
				</lua>
				<overload>
					<parameters>
						<arg type="string">path</arg>
						<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="string">files</arg>
						<arg type="table" subType="string">directories</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_lua_files</name>
				<desc>Returns a table of all found files within the specified path, including regular lua-files and pre-compiled lua-files. Both will be included with the ".lua" extension.</desc>
				<overload>
					<parameters>
						<arg type="string">path</arg>
						<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="string">files</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>get_attributes</name>
				<desc>Returns the file attribute flags associated with this file.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">path</arg>
					</parameters>
					<returnValues>
						<arg type="file.Attribute">attributes</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_flags</name>
				<desc>Returns the file flags associated with this file.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">path</arg>
						<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
					</parameters>
					<returnValues>
						<arg type="file.Flag">flags</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>get_canonicalized_path</name>
			<desc>Returns a path with all of the "../" and "./" from the source path resolved.</desc>
			<lua>
				local path = "models/./props\\..\\test/test2/../../player/./soldier.wmd"
				path = file.get_canonicalized_path(path)
				print(path) -- Prints "models/player/soldier.wmd"
			</lua>
			<overload>
				<parameters>
					<arg type="string">path</arg>
				</parameters>
				<returnValues>
					<arg type="string">canonicalizedPath</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>get_file_path</name>
				<desc>Returns the path-component of a path with a file.</desc>
				<lua>
					local path = "models/player/soldier.wmd"
					local filePath = file.get_file_path(path)
					print(filePath) -- Prints "models/player/"
				</lua>
				<overload>
					<parameters>
						<arg type="string">path</arg>
					</parameters>
					<returnValues>
						<arg type="string">filePath</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_file_name</name>
				<desc>Returns the filename-component of a path with a file.</desc>
				<lua>
					local path = "models/player/soldier.wmd"
					local fileName = file.get_file_name(path)
					print(fileName) -- Prints "soldier.wmd"
				</lua>
				<overload>
					<parameters>
						<arg type="string">path</arg>
					</parameters>
					<returnValues>
						<arg type="string">fileName</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_file_extension</name>
				<desc>Returns the file's extension, or ''nil'' if it has none.</desc>
				<lua>
					local path = "models/player/soldier.wmd"
					local b,ext = file.get_file_extension(path)
					if(b == true) then
						print(ext) -- Prints "wmd"
					end
				</lua>
				<overload>
					<parameters>
						<arg type="string">path</arg>
					</parameters>
					<returnValues>
						<arg type="string">extension</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>get_size</name>
			<desc>Returns the size of the specified file.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">fileName</arg>
					<arg type="file.SearchMode" default="file.SEARCH_ALL">searchMode</arg>
				</parameters>
				<returnValues>
					<arg type="int">fileSize</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>compare_path</name>
			<desc>Checks whether the two specified paths refer to the same directory or file.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">path0</arg>
					<arg type="string">path1</arg>
				</parameters>
				<returnValues>
					<arg type="bool">sameTarget</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>remove_file_extension</name>
			<desc>Removes the extension from the path or file name.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">fileName</arg>
				</parameters>
				<returnValues>
					<arg type="string">fileNameWithoutExtension</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>find_external_game_resource_files</name>
			<desc>Returns two tables. The first table contains all found files, the second table contains the found directories with the specified name. This function will search through external mounted games.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">fileName</arg>
				</parameters>
				<returnValues>
					<arg type="table" subType="string">files</arg>
					<arg type="table" subType="string">directories</arg>
				</returnValues>
			</overload>
		</function>
		<enum_set type="flags" gui="1">
			<name>OpenMode</name>
			<enum value="1" type="bit">OPEN_MODE_READ</enum>
			<enum value="2" type="bit">OPEN_MODE_WRITE</enum>
			<enum value="4" type="bit">OPEN_MODE_APPEND</enum>
			<enum value="8" type="bit">OPEN_MODE_UPDATE</enum>
			<enum value="16" type="bit">OPEN_MODE_BINARY</enum>
		</enum_set>
		<enum_set type="flags" gui="1">
			<name>Flag</name>
			<enum value="1" type="bit">FLAG_PACKAGE</enum>
			<enum value="2" type="bit">FLAG_COMPRESSED</enum>
			<enum value="4" type="bit">FLAG_DIRECTORY</enum>
			<enum value="8" type="bit">FLAG_ENCRYPTED</enum>
			<enum value="16" type="bit">FLAG_VIRTUAL</enum>
			<enum value="32" type="bit">FLAG_READONLY</enum>
			<enum value="2048" type="bit">FLAG_INVALID</enum>
		</enum_set>
		<enum_set gui="1">
			<name>Type</name>
			<enum value="0">TYPE_VIRTUAL</enum>
			<enum value="1">TYPE_LOCAL</enum>
			<enum value="2">TYPE_PACKAGE</enum>
		</enum_set>
		<enum_set type="flags" gui="1">
			<name>Attribute</name>
			<enum value="1" type="bit">ATTRIBUTE_READONLY</enum>
			<enum value="2" type="bit">ATTRIBUTE_HIDDEN</enum>
			<enum value="4" type="bit">ATTRIBUTE_SYSTEM</enum>
			<enum value="16" type="bit">ATTRIBUTE_DIRECTORY</enum>
			<enum value="32" type="bit">ATTRIBUTE_ARCHIVE</enum>
			<enum value="64" type="bit">ATTRIBUTE_DEVICE</enum>
			<enum value="128" type="bit">ATTRIBUTE_NORMAL</enum>
			<enum value="256" type="bit">ATTRIBUTE_TEMPORARY</enum>
			<enum value="512" type="bit">ATTRIBUTE_SPARSE_FILE</enum>
			<enum value="1024" type="bit">ATTRIBUTE_REPARSE_POINT</enum>
			<enum value="2048" type="bit">ATTRIBUTE_COMPRESSED</enum>
			<enum value="4096" type="bit">ATTRIBUTE_OFFLINE</enum>
			<enum value="8192" type="bit">ATTRIBUTE_NOT_CONTENT_INDEXED</enum>
			<enum value="16384" type="bit">ATTRIBUTE_ENCRYPTED</enum>
			<enum value="65536" type="bit">ATTRIBUTE_VIRTUAL</enum>
			<enum value="math.MAX_UINT32">ATTRIBUTE_INVALID</enum>
		</enum_set>
		<enum_set type="flags" gui="1">
			<name>SearchMode</name>
			<enum value="0">SEARCH_NONE</enum>
			<enum value="1" type="bit">SEARCH_VIRTUAL</enum>
			<enum value="2" type="bit">SEARCH_PACKAGE</enum>
			<enum value="4" type="bit">SEARCH_LOCAL</enum>
			<enum value="8" type="bit">SEARCH_NO_MOUNTS</enum>
			<enum value="12">SEARCH_LOCAL_ROOT</enum>
			<enum value="2048" type="bit">SEARCH_ADDON</enum>
			<enum value="4096" type="bit" client="1">SEARCH_RESOURCES</enum>
			<enum value="math.MAX_UINT32 &amp;~file.SEARCH_NO_MOUNTS" type="bit">SEARCH_ALL</enum>
		</enum_set>
	</collection>
</root>
