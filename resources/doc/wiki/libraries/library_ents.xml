<root>
	<collection type="library">
		<name>ents</name>
		<desc>TODO</desc>
		<group>
			<function type="function" client="1">
				<name>get_instance_buffer</name>
				<desc>Returns the global buffer which contains the render data for all entities, as well as the size of the data per entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="vulkan.Buffer">buffer</arg>
						<arg type="int">instanceSize</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>get_instance_bone_buffer</name>
				<desc>Returns the global buffer which contains the skeleton data for all entities, as well as the size of the data per entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="vulkan.Buffer">buffer</arg>
						<arg type="int">instanceSize</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>get_all</name>
				<desc>Returns a table with all entities in the world, including entities which haven't been spawned!</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="function">iterator</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="ents.IteratorFilterFlags">filterFlags</arg>
						<arg type="table" subType="ents.IteratorFilter" default="{}">filters</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="table" subType="ents.IteratorFilter">filters</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_closest</name>
				<desc>Returns the closest entity from the specified iterator list.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="function">iterator</arg>
						<arg type="math.Vector">origin</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">closestEntity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_farthest</name>
				<desc>Returns the farthest entity from the specified iterator list.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="function">iterator</arg>
						<arg type="math.Vector">origin</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">farthestEntity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_random</name>
				<desc>Returns a random entity from the specified iterator list.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="function">iterator</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">randomEntity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_sorted_by_distance</name>
				<desc>Returns the entities from the specified iterator list sorted by distance (closest to farthest).</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="function">iterator</arg>
						<arg type="math.Vector">origin</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">sortedEntities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_spawned</name>
				<desc>Same as ents.get_all, but only returns spawned entities!</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_players</name>
				<desc>Returns a table with all players.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="ents.PlayerComponent">players</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_npcs</name>
				<desc>Returns a table with all NPCs.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="ents.AIComponent">npcs</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_weapons</name>
				<desc>Returns a table with all weapons.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="ents.WeaponComponent">weapons</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_vehicles</name>
				<desc>Returns a table with all vehicles.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="ents.VehicleComponent">vehicles</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_world</name>
				<desc>Returns the world entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="ents.Entity">world</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_by_index</name>
				<desc>Returns the entity with the specified index, or nil if it doesn't exist.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">index</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">entity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_by_unique_index</name>
				<desc>Returns the entity with the specified unique index, or nil if it doesn't exist.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">uniqueIndex</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">entity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_null</name>
				<desc>Returns a NULL entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="NULL">nullEntity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>get_local_player</name>
				<desc>Returns the local player entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="ents.PlayerComponent">localPlayer</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>get_listener</name>
				<desc>Returns the listener entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="ents.ListenerComponent">listener</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>get_view_body</name>
				<desc>Returns the viewbody entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="ents.ViewBodyComponent">viewBody</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" client="1">
				<name>get_view_model</name>
				<desc>Returns the viewmodel entity.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="ents.ViewModelComponent">viewModel</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>find_by_filter</name>
				<desc>Returns a table of all entities with the specified name, and if one of the entities is a filter, all of the filtered entities will be included as well.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_by_class</name>
				<desc>Returns a table of all entities with the specified class name.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">className</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_by_name</name>
				<desc>Returns a table of all entities with the specified name.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">name</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_by_component</name>
				<desc>Returns all entities that have the specified component.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">componentName</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_in_sphere</name>
				<desc>Returns a table of all entities within the specified sphere.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">radius</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_in_aabb</name>
				<desc>Returns a table of all entities within the specified box.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>find_in_cone</name>
				<desc>Returns a table of all entities within the specified cone.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="math.Vector">direction</arg>
						<arg type="float">radius</arg>
						<arg type="float">angle</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="ents.Entity">entities</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>create</name>
				<desc>Creates a new entity.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">className</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">entity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_trigger</name>
				<desc>
					Helper-function to create a trigger entity.\n
					If a radius is given, a spherical trigger will be created.\n
					If ''min'' and ''max'' vectors are given, a box-trigger will be created.\n
					If a ''shape'' is given, that shape will be used for the trigger. The shape has to be convex!
				</desc>
				<lua>
					local entTrigger = ents.create_trigger(Vector(),250.0)
					if(entTrigger ~= nil) then
					    entTrigger:SetKeyValue("spawnflags",tostring(bit.bor(8,1024)))
					    entTrigger:AddCallback("OnStartTouch",function(entActivator,phys)
					        -- Do something on trigger touch
					        entTrigger:RemoveSafely() -- Remove trigger entity
					    end)
					end
				</lua>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="float">radius</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">entity</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="phys.Shape">shape</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">entity</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">origin</arg>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
					</parameters>
					<returnValues>
						<arg type="ents.Entity">entity</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>register</name>
				<desc>Registers a new entity class.</desc>
				<lua></lua>
				<overload deprecated="1">
					<parameters>
						<arg type="string">className</arg>
						<arg type="class">entityClass</arg>
					</parameters>
				</overload>
				<overload>
					<parameters>
						<arg type="string">className</arg>
						<arg type="table" subType="ents.ComponentId">components</arg>
						<arg type="ents.Entity.Type" default="ents.Entity.TYPE_DEFAULT">entityType</arg>
					</parameters>
				</overload>
				<overload>
					<parameters>
						<arg type="string">className</arg>
						<arg type="table" subType="string">components</arg>
						<arg type="ents.Entity.Type" default="ents.Entity.TYPE_DEFAULT">entityType</arg>
					</parameters>
				</overload>
			</function>
			<function type="function">
				<name>register_component</name>
				<desc>Registers a new entity component.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">componentName</arg>
						<arg type="class">componentClass</arg>
						<arg type="ents.ComponentFlags" default="ents.COMPONENT_FLAG_NONE">flags</arg>
					</parameters>
					<returnValues>
						<arg type="ents.ComponentId">componentId</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>register_component_event</name>
				<desc>Registers a new entity component.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="string">eventName</arg>
					</parameters>
					<returnValues>
						<arg type="ents.ComponentEventId">eventId</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>iterator</name>
			<desc>Returns an iterator for iterating over entities or entity components. See the [[Entities#Iterators|article on iterators]] for more information.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="function">iterator</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="ents.IteratorFilterFlags">filterFlags</arg>
					<arg type="table" subType="ents.IteratorFilter" default="{}">filters</arg>
				</parameters>
				<returnValues>
					<arg type="function">iterator</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="table" subType="ents.IteratorFilter">filters</arg>
				</parameters>
				<returnValues>
					<arg type="function">iterator</arg>
				</returnValues>
			</overload>
		</function>
		<enum_set type="flags">
			<name>ComponentFlags</name>
			<enum value="0">COMPONENT_FLAG_NONE</enum>
			<enum value="1" type="bit">COMPONENT_FLAG_BIT_NETWORKED</enum>
		</enum_set>
		<enum_set type="flags">
			<name>IteratorFilterFlags</name>
			<enum value="0">ITERATOR_FILTER_BIT_NONE</enum>
			<enum value="1" type="bit">ITERATOR_FILTER_BIT_SPAWNED</enum>
			<enum value="2" type="bit">ITERATOR_FILTER_BIT_PENDING</enum>
			<enum value="4" type="bit">ITERATOR_FILTER_BIT_INCLUDE_SHARED</enum>
			<enum value="8" type="bit">ITERATOR_FILTER_BIT_INCLUDE_NETWORK_LOCAL</enum>
			<enum value="16" type="bit">ITERATOR_FILTER_BIT_CHARACTER</enum>
			<enum value="32" type="bit">ITERATOR_FILTER_BIT_PLAYER</enum>
			<enum value="64" type="bit">ITERATOR_FILTER_BIT_WEAPON</enum>
			<enum value="128" type="bit">ITERATOR_FILTER_BIT_VEHICLE</enum>
			<enum value="256" type="bit">ITERATOR_FILTER_BIT_NPC</enum>
			<enum value="512" type="bit">ITERATOR_FILTER_BIT_PHYSICAL</enum>
			<enum value="1024" type="bit">ITERATOR_FILTER_BIT_SCRIPTED</enum>
			<enum value="2048" type="bit">ITERATOR_FILTER_BIT_MAP_ENTITY</enum>
			<enum value="4096" type="bit">ITERATOR_FILTER_BIT_HAS_TRANSFORM</enum>
			<enum value="8192" type="bit">ITERATOR_FILTER_BIT_HAS_MODEL</enum>
			<enum value="4080">ITERATOR_FILTER_ANY_TYPE</enum>
			<enum value="4095">ITERATOR_FILTER_ANY</enum>
			<enum value="13">ITERATOR_FILTER_DEFAULT</enum>
		</enum_set>
		<enum_set>
			<name>ComponentId</name>
			<enum>COMPONENT_OBSERVABLE</enum>
			<enum>COMPONENT_SOUND_DSP_ECHO</enum>
			<enum>COMPONENT_SUBMERGIBLE</enum>
			<enum>COMPONENT_TOUCH</enum>
			<enum>COMPONENT_DAMAGEABLE</enum>
			<enum>COMPONENT_TIME_SCALE</enum>
			<enum>COMPONENT_GRAVITY</enum>
			<enum>COMPONENT_IK</enum>
			<enum>COMPONENT_FUNC_PHYSICS</enum>
			<enum>COMPONENT_USABLE</enum>
			<enum>COMPONENT_LOGIC</enum>
			<enum>COMPONENT_MAP</enum>
			<enum>COMPONENT_VELOCITY</enum>
			<enum>COMPONENT_AI</enum>
			<enum>COMPONENT_SOUND_SCAPE</enum>
			<enum>COMPONENT_SMOKE_TRAIL</enum>
			<enum>COMPONENT_SV_AI_MODEL</enum>
			<enum>COMPONENT_FILTER_CLASS</enum>
			<enum>COMPONENT_CONSTRAINT_CONE_TWIST</enum>
			<enum>COMPONENT_EXPLOSION</enum>
			<enum>COMPONENT_CHARACTER</enum>
			<enum>COMPONENT_LIGHT_SPOT</enum>
			<enum>COMPONENT_FOG_CONTROLLER</enum>
			<enum>COMPONENT_COLOR</enum>
			<enum>COMPONENT_FLAMMABLE</enum>
			<enum>COMPONENT_WATER</enum>
			<enum>COMPONENT_PLAYER</enum>
			<enum>COMPONENT_LIGHT_SPOT_VOLUME</enum>
			<enum>COMPONENT_HEALTH</enum>
			<enum>COMPONENT_KINEMATIC</enum>
			<enum>COMPONENT_LIGHT_POINT</enum>
			<enum>COMPONENT_NAME</enum>
			<enum>COMPONENT_NETWORKED</enum>
			<enum>COMPONENT_PHYSICS</enum>
			<enum>COMPONENT_RADIUS</enum>
			<enum>COMPONENT_RENDER</enum>
			<enum>COMPONENT_MICROPHONE</enum>
			<enum>COMPONENT_FIRE</enum>
			<enum>COMPONENT_SOUND_EMITTER</enum>
			<enum>COMPONENT_TOGGLE</enum>
			<enum>COMPONENT_TRANSFORM</enum>
			<enum>COMPONENT_LIGHT</enum>
			<enum>COMPONENT_VEHICLE</enum>
			<enum>COMPONENT_ENV_TIME_SCALE</enum>
			<enum>COMPONENT_PARTICLE_SYSTEM</enum>
			<enum>COMPONENT_WEAPON</enum>
			<enum>COMPONENT_SPRITE</enum>
			<enum>COMPONENT_SOUND_DSP</enum>
			<enum>COMPONENT_WHEEL</enum>
			<enum>COMPONENT_SOUND_DSP_CHORUS</enum>
			<enum>COMPONENT_DECAL</enum>
			<enum>COMPONENT_SOUND_DSP_DISTORTION</enum>
			<enum>COMPONENT_SOUND_DSP_FLANGER</enum>
			<enum>COMPONENT_RELAY</enum>
			<enum>COMPONENT_SOUND_DSP_EAX_REVERB</enum>
			<enum>COMPONENT_FILTER_NAME</enum>
			<enum>COMPONENT_SOUND_DSP_EQUALIZER</enum>
			<enum>COMPONENT_BOT</enum>
			<enum>COMPONENT_CONSTRAINT_BALL_SOCKET</enum>
			<enum>COMPONENT_QUAKE</enum>
			<enum>COMPONENT_CAMERA</enum>
			<enum>COMPONENT_LIGHT_DIRECTIONAL</enum>
			<enum>COMPONENT_SOUND</enum>
			<enum>COMPONENT_WIND</enum>
			<enum>COMPONENT_BRUSH</enum>
			<enum>COMPONENT_FUNC_SOFT_PHYSICS</enum>
			<enum>COMPONENT_FUNC_PORTAL</enum>
			<enum>COMPONENT_BUTTON</enum>
			<enum>COMPONENT_TRIGGER_PUSH</enum>
			<enum>COMPONENT_PLAYER_SPAWN</enum>
			<enum>COMPONENT_CONSTRAINT_DOF</enum>
			<enum>COMPONENT_PATH_NODE</enum>
			<enum>COMPONENT_CONSTRAINT_FIXED</enum>
			<enum>COMPONENT_CONSTRAINT_HINGE</enum>
			<enum>COMPONENT_CONSTRAINT_SLIDER</enum>
			<enum>COMPONENT_RENDER_TARGET</enum>
			<enum>COMPONENT_TARGET</enum>
			<enum>COMPONENT_PROP</enum>
			<enum>COMPONENT_PROP_DYNAMIC</enum>
			<enum>COMPONENT_PROP_PHYSICS</enum>
			<enum>COMPONENT_TRIGGER_GRAVITY</enum>
			<enum>COMPONENT_TRIGGER_HURT</enum>
			<enum>COMPONENT_TRIGGER_REMOVE</enum>
			<enum>COMPONENT_TRIGGER_TELEPORT</enum>
			<enum>COMPONENT_SKYBOX</enum>
			<enum>COMPONENT_WORLD</enum>
			<enum>COMPONENT_FLASHLIGHT</enum>
			<enum>COMPONENT_SHOOTER</enum>
			<enum>COMPONENT_MODEL</enum>
			<enum>COMPONENT_ANIMATED</enum>
			<enum>COMPONENT_ENTITY</enum>
			<enum>COMPONENT_IO</enum>
			<enum>COMPONENT_ATTACHABLE</enum>
			<enum>COMPONENT_PARENT</enum>
			<enum>COMPONENT_WEATHER</enum>
			<enum>COMPONENT_SOUND_PROBE</enum>
			<enum>COMPONENT_WATER_SURFACE</enum>
			<enum>COMPONENT_LISTENER</enum>
			<enum>COMPONENT_VIEW_BODY</enum>
			<enum>COMPONENT_VIEW_MODEL</enum>
			<enum>COMPONENT_FLEX</enum>
			<enum>COMPONENT_SOFTBODY</enum>
			<enum>COMPONENT_VERTEX_ANIMATED</enum>
			<enum>COMPONENT_OWNABLE</enum>
			<enum server="1">COMPONENT_INFO_LANDMARK</enum>
		</enum_set>
	</collection>
</root>
