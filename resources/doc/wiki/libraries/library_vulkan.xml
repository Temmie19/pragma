<root>
	<collection type="library" client="1" gui="1">
		<name>vulkan</name>
		<desc>TODO</desc>
		<group>
			<function type="function">
				<name>create_descriptor_set</name>
				<desc>Creates a new descriptor set.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.DescriptorSetInfo">descriptorSetInfo</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.DescriptorSet">descriptorSet</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_buffer</name>
				<desc>Creates a new buffer. If the ''data'' argument is specified, the buffer will be initialized with the data from the data stream.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.BufferCreateInfo">bufferCreateInfo</arg>
						<arg type="util.DataStream">data</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Buffer">buffer</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="vulkan.BufferCreateInfo">bufferCreateInfo</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Buffer">buffer</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_image</name>
				<desc>Creates a new image. If the ''data'' argument is specified, the image will be initialized with the data from the data stream.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.ImageCreateInfo">imageCreateInfo</arg>
						<arg type="util.DataStream">data</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Image">image</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="vulkan.ImageCreateInfo">bufferCreateInfo</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Image">image</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_texture</name>
				<desc>Creates a new texture. If ''imgViewCreateInfo'' is not ''nil'', an image view object will be created automatically, unless an image view object was specified in the ''textureCreateInfo''. Same for the ''samplerCreateInfo'' parameter.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Image">image</arg>
						<arg type="vulkan.TextureCreateInfo">textureCreateInfo</arg>
						<arg type="vulkan.ImageViewCreateInfo" default="nil">imgViewCreateInfo</arg>
						<arg type="vulkan.SamplerCreateInfo" default="nil">samplerCreateInfo</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Texture">texture</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_framebuffer</name>
				<desc>Creates a new framebuffer.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">width</arg>
						<arg type="int">height</arg>
						<arg type="table" subType="vulkan.ImageView">attachments</arg>
						<arg type="int" subType="1">layers</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Framebuffer">texture</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_render_pass</name>
				<desc>Creates a new render pass.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.RenderPassCreateInfo">renderPassCreateInfo</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.RenderPass">renderPass</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_render_target</name>
				<desc>Creates a new render target.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.RenderTargetCreateInfo">renderTargetCreateInfo</arg>
						<arg type="vulkan.Texture">texture</arg>
						<arg type="vulkan.RenderPass" default="nil">renderPass</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.RenderTarget">renderPass</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="vulkan.RenderTargetCreateInfo">renderTargetCreateInfo</arg>
						<arg type="table" subType="vulkan.Texture">textures</arg>
						<arg type="vulkan.RenderPass" default="nil">renderPass</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.RenderTarget">renderPass</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_gradient_texture</name>
				<desc>
					Creates a new gradient texture. The direction is a 2-dimensional normal. The 'offset' of each node represents the position of the gradient step, 0 being at the start and 1 at the end (In relation to the direction). A maximum of 3 nodes are supported.\n
						\n
						It is '''not''' guaranteed that the texture has been fully drawn when this function returns.
				</desc>
				<lua>
					<desc>
						Creates a vertical gradient texture with red coloration at the top, green coloration at the middle and blue coloration at the bottom.
					</desc>
					<code>
						local tex = vulkan.create_gradient_texture(256,512,vulkan.FORMAT_R8G8B8A8_UNORM,math.Vector2(0,-1),{
							{
								offset = 0.0,
								color = Color(255,0,0,255)
							},
							{
								offset = 0.5,
								color = Color(0,255,0,255)
							},
							{
								offset = 1.0,
								color = Color(0,0,255,255)
							}
						})
						if(tex ~= nil) then
							-- Use the texture
						end
					</code>
				</lua>
				<overload>
					<parameters>
						<arg type="int">width</arg>
						<arg type="int">height</arg>
						<arg type="vulkan.Format">format</arg>
						<arg type="math.Vector2">gradientDirection</arg>
						<arg type="table">gradientNodes</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Texture">gradientTexture</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_event</name>
				<desc>Creates a new event.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="vulkan.Event">event</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>create_fence</name>
				<desc>Creates a new fence.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="bool" default="false">initiallySignalled</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.Fence">fence</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>calculate_mipmap_count</name>
				<desc>Returns the number of possible mipmaps for an image with the given size.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">width</arg>
						<arg type="int">height</arg>
					</parameters>
					<returnValues>
						<arg type="int">mipmapCount</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>calculate_mipmap_size</name>
				<desc>Returns the mipmap size relative to the given image size.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">width</arg>
						<arg type="int">height</arg>
						<arg type="int">mipmapLevel</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector2i">mipmapSize</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="int">size</arg>
						<arg type="int">mipmapLevel</arg>
					</parameters>
					<returnValues>
						<arg type="int">mipmapSize</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>result_to_string</name>
				<desc>Returns a text message for the given result code.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Result">result</arg>
					</parameters>
					<returnValues>
						<arg type="string">message</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>format_to_string</name>
				<desc>Returns a text message for the given image format.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Format">format</arg>
					</parameters>
					<returnValues>
						<arg type="string">message</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>shader_stage_to_string</name>
				<desc>Returns a text message for the given shader stage.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.ShaderStage">shaderStage</arg>
					</parameters>
					<returnValues>
						<arg type="string">message</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>is_depth_format</name>
				<desc>Returns ''true'' if the specified format is a depth format.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Format">format</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isDepthFormat</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>is_compressed_format</name>
				<desc>Returns ''true'' if the specified format is a compressed format.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Format">format</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isCompressedFormat</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>is_uncompressed_format</name>
				<desc>Returns ''true'' if the specified format is an uncompressed format.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Format">format</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isUncompressedFormat</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>get_bit_size</name>
				<desc>Returns the number of bits that every pixel of an image with this format would take up.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Format">format</arg>
					</parameters>
					<returnValues>
						<arg type="int">bitSize</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_byte_size</name>
				<desc>Returns the number of bytes that every pixel of an image with this format would take up.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.Format">format</arg>
					</parameters>
					<returnValues>
						<arg type="int">byteSize</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>get_swapchain_image_count</name>
			<desc>Returns the number of swapchain images currently being used.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="int">swapchainImageCount</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>wait_idle</name>
			<desc>This function will block until all currently queued device commands have been processed.</desc>
			<lua></lua>
			<overload></overload>
		</function>
		<collection type="library" client="1" gui="1">
			<name>util</name>
			<desc>TODO</desc>
			<group>
				<function type="function">
					<name>get_square_vertex_uv_buffer</name>
					<desc>Returns a buffer containing vertex and uv data for two triangles of a generic square. This buffer is cached and is used for many different purposes, which means you should only ever read from it and never write to it! The data consists of sets of two [pragma:ref]math.Vector2[/pragma:ref], the first being the vertex position and the second the uv coordinate. The number of sets is equal to [pragma:ref]vulkan.get_square_vertex_count[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="vulkan.Buffer">vertexUvBuffer</arg>
						</returnValues>
					</overload>
				</function>
				<function type="function">
					<name>get_square_vertex_buffer</name>
					<desc>Returns a buffer containing vertex data for two triangles of a generic square. This buffer is cached and is used for many different purposes, which means you should only ever read from it and never write to it! The data consists of several [pragma:ref]math.Vector2[/pragma:ref] vertices. The number of vertices is equal to [pragma:ref]vulkan.get_square_vertex_count[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="vulkan.Buffer">vertexBuffer</arg>
						</returnValues>
					</overload>
				</function>
				<function type="function">
					<name>get_square_uv_buffer</name>
					<desc>Returns a buffer containing uv data for two triangles of a generic square. This buffer is cached and is used for many different purposes, which means you should only ever read from it and never write to it! The data consists of several [pragma:ref]math.Vector2[/pragma:ref] uv-coordinates. The number of uv-coordinates is equal to [pragma:ref]vulkan.get_square_vertex_count[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="vulkan.Buffer">uvBuffer</arg>
						</returnValues>
					</overload>
				</function>
				<function type="function">
					<name>get_square_vertices</name>
					<desc>Returns a table of 6 vertices, making up a generic square with the bounds [-1,1].</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="table" subType="math.Vector2">vertices</arg>
						</returnValues>
					</overload>
				</function>
				<function type="function">
					<name>get_square_uv_coordinates</name>
					<desc>Returns a table of 6 uv-coordinates, used in conjunction with [pragma:ref]vulkan.get_square_vertices[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="table" subType="math.Vector2">uvCoordinates</arg>
						</returnValues>
					</overload>
				</function>
				<function type="function">
					<name>get_square_vertex_count</name>
					<desc>Returns the number of vertices used for the buffers of [pragma:ref]vulkan.get_square_vertex_uv_buffer[/pragma:ref], [pragma:ref]vulkan.get_square_vertex_buffer[/pragma:ref] and [pragma:ref]vulkan.get_square_uv_buffer[/pragma:ref]. The returned value is always 6.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">squareVertexCount</arg>
						</returnValues>
					</overload>
				</function>
				<function type="function">
					<name>get_square_vertex_format</name>
					<desc>Returns the vertex format used for the buffers of [pragma:ref]vulkan.get_square_vertex_uv_buffer[/pragma:ref] and [pragma:ref]vulkan.get_square_vertex_buffer[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="vulkan.Format">format</arg>
						</returnValues>
					</overload>
				</function>
				<function type="function">
					<name>get_square_uv_format</name>
					<desc>Returns the uv format used for the buffers of [pragma:ref]vulkan.get_square_vertex_uv_buffer[/pragma:ref] and [pragma:ref]vulkan.get_square_uv_buffer[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="vulkan.Format">format</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
		<enum_set>
			<name>Format</name>
			<enum value="0">FORMAT_UNDEFINED</enum>
			<enum value="1">FORMAT_R4G4_UNORM_PACK8</enum>
			<enum value="2">FORMAT_R4G4B4A4_UNORM_PACK16</enum>
			<enum value="3">FORMAT_B4G4R4A4_UNORM_PACK16</enum>
			<enum value="4">FORMAT_R5G6B5_UNORM_PACK16</enum>
			<enum value="5">FORMAT_B5G6R5_UNORM_PACK16</enum>
			<enum value="6">FORMAT_R5G5B5A1_UNORM_PACK16</enum>
			<enum value="7">FORMAT_B5G5R5A1_UNORM_PACK16</enum>
			<enum value="8">FORMAT_A1R5G5B5_UNORM_PACK16</enum>
			<enum value="9">FORMAT_R8_UNORM</enum>
			<enum value="10">FORMAT_R8_SNORM</enum>
			<enum value="11">FORMAT_R8_USCALED</enum>
			<enum value="12">FORMAT_R8_SSCALED</enum>
			<enum value="13">FORMAT_R8_UINT</enum>
			<enum value="14">FORMAT_R8_SINT</enum>
			<enum value="15">FORMAT_R8_SRGB</enum>
			<enum value="16">FORMAT_R8G8_UNORM</enum>
			<enum value="17">FORMAT_R8G8_SNORM</enum>
			<enum value="18">FORMAT_R8G8_USCALED</enum>
			<enum value="19">FORMAT_R8G8_SSCALED</enum>
			<enum value="20">FORMAT_R8G8_UINT</enum>
			<enum value="21">FORMAT_R8G8_SINT</enum>
			<enum value="22">FORMAT_R8G8_SRGB</enum>
			<enum value="23">FORMAT_R8G8B8_UNORM</enum>
			<enum value="24">FORMAT_R8G8B8_SNORM</enum>
			<enum value="25">FORMAT_R8G8B8_USCALED</enum>
			<enum value="26">FORMAT_R8G8B8_SSCALED</enum>
			<enum value="27">FORMAT_R8G8B8_UINT</enum>
			<enum value="28">FORMAT_R8G8B8_SINT</enum>
			<enum value="29">FORMAT_R8G8B8_SRGB</enum>
			<enum value="30">FORMAT_B8G8R8_UNORM</enum>
			<enum value="31">FORMAT_B8G8R8_SNORM</enum>
			<enum value="32">FORMAT_B8G8R8_USCALED</enum>
			<enum value="33">FORMAT_B8G8R8_SSCALED</enum>
			<enum value="34">FORMAT_B8G8R8_UINT</enum>
			<enum value="35">FORMAT_B8G8R8_SINT</enum>
			<enum value="36">FORMAT_B8G8R8_SRGB</enum>
			<enum value="37">FORMAT_R8G8B8A8_UNORM</enum>
			<enum value="38">FORMAT_R8G8B8A8_SNORM</enum>
			<enum value="39">FORMAT_R8G8B8A8_USCALED</enum>
			<enum value="40">FORMAT_R8G8B8A8_SSCALED</enum>
			<enum value="41">FORMAT_R8G8B8A8_UINT</enum>
			<enum value="42">FORMAT_R8G8B8A8_SINT</enum>
			<enum value="43">FORMAT_R8G8B8A8_SRGB</enum>
			<enum value="44">FORMAT_B8G8R8A8_UNORM</enum>
			<enum value="45">FORMAT_B8G8R8A8_SNORM</enum>
			<enum value="46">FORMAT_B8G8R8A8_USCALED</enum>
			<enum value="47">FORMAT_B8G8R8A8_SSCALED</enum>
			<enum value="48">FORMAT_B8G8R8A8_UINT</enum>
			<enum value="49">FORMAT_B8G8R8A8_SINT</enum>
			<enum value="50">FORMAT_B8G8R8A8_SRGB</enum>
			<enum value="51">FORMAT_A8B8G8R8_UNORM_PACK32</enum>
			<enum value="52">FORMAT_A8B8G8R8_SNORM_PACK32</enum>
			<enum value="53">FORMAT_A8B8G8R8_USCALED_PACK32</enum>
			<enum value="54">FORMAT_A8B8G8R8_SSCALED_PACK32</enum>
			<enum value="55">FORMAT_A8B8G8R8_UINT_PACK32</enum>
			<enum value="56">FORMAT_A8B8G8R8_SINT_PACK32</enum>
			<enum value="57">FORMAT_A8B8G8R8_SRGB_PACK32</enum>
			<enum value="58">FORMAT_A2R10G10B10_UNORM_PACK32</enum>
			<enum value="59">FORMAT_A2R10G10B10_SNORM_PACK32</enum>
			<enum value="60">FORMAT_A2R10G10B10_USCALED_PACK32</enum>
			<enum value="61">FORMAT_A2R10G10B10_SSCALED_PACK32</enum>
			<enum value="62">FORMAT_A2R10G10B10_UINT_PACK32</enum>
			<enum value="63">FORMAT_A2R10G10B10_SINT_PACK32</enum>
			<enum value="64">FORMAT_A2B10G10R10_UNORM_PACK32</enum>
			<enum value="65">FORMAT_A2B10G10R10_SNORM_PACK32</enum>
			<enum value="66">FORMAT_A2B10G10R10_USCALED_PACK32</enum>
			<enum value="67">FORMAT_A2B10G10R10_SSCALED_PACK32</enum>
			<enum value="68">FORMAT_A2B10G10R10_UINT_PACK32</enum>
			<enum value="69">FORMAT_A2B10G10R10_SINT_PACK32</enum>
			<enum value="70">FORMAT_R16_UNORM</enum>
			<enum value="71">FORMAT_R16_SNORM</enum>
			<enum value="72">FORMAT_R16_USCALED</enum>
			<enum value="73">FORMAT_R16_SSCALED</enum>
			<enum value="74">FORMAT_R16_UINT</enum>
			<enum value="75">FORMAT_R16_SINT</enum>
			<enum value="76">FORMAT_R16_SFLOAT</enum>
			<enum value="77">FORMAT_R16G16_UNORM</enum>
			<enum value="78">FORMAT_R16G16_SNORM</enum>
			<enum value="79">FORMAT_R16G16_USCALED</enum>
			<enum value="80">FORMAT_R16G16_SSCALED</enum>
			<enum value="81">FORMAT_R16G16_UINT</enum>
			<enum value="82">FORMAT_R16G16_SINT</enum>
			<enum value="83">FORMAT_R16G16_SFLOAT</enum>
			<enum value="84">FORMAT_R16G16B16_UNORM</enum>
			<enum value="85">FORMAT_R16G16B16_SNORM</enum>
			<enum value="86">FORMAT_R16G16B16_USCALED</enum>
			<enum value="87">FORMAT_R16G16B16_SSCALED</enum>
			<enum value="88">FORMAT_R16G16B16_UINT</enum>
			<enum value="89">FORMAT_R16G16B16_SINT</enum>
			<enum value="90">FORMAT_R16G16B16_SFLOAT</enum>
			<enum value="91">FORMAT_R16G16B16A16_UNORM</enum>
			<enum value="92">FORMAT_R16G16B16A16_SNORM</enum>
			<enum value="93">FORMAT_R16G16B16A16_USCALED</enum>
			<enum value="94">FORMAT_R16G16B16A16_SSCALED</enum>
			<enum value="95">FORMAT_R16G16B16A16_UINT</enum>
			<enum value="96">FORMAT_R16G16B16A16_SINT</enum>
			<enum value="97">FORMAT_R16G16B16A16_SFLOAT</enum>
			<enum value="98">FORMAT_R32_UINT</enum>
			<enum value="99">FORMAT_R32_SINT</enum>
			<enum value="100">FORMAT_R32_SFLOAT</enum>
			<enum value="101">FORMAT_R32G32_UINT</enum>
			<enum value="102">FORMAT_R32G32_SINT</enum>
			<enum value="103">FORMAT_R32G32_SFLOAT</enum>
			<enum value="104">FORMAT_R32G32B32_UINT</enum>
			<enum value="105">FORMAT_R32G32B32_SINT</enum>
			<enum value="106">FORMAT_R32G32B32_SFLOAT</enum>
			<enum value="107">FORMAT_R32G32B32A32_UINT</enum>
			<enum value="108">FORMAT_R32G32B32A32_SINT</enum>
			<enum value="109">FORMAT_R32G32B32A32_SFLOAT</enum>
			<enum value="110">FORMAT_R64_UINT</enum>
			<enum value="111">FORMAT_R64_SINT</enum>
			<enum value="112">FORMAT_R64_SFLOAT</enum>
			<enum value="113">FORMAT_R64G64_UINT</enum>
			<enum value="114">FORMAT_R64G64_SINT</enum>
			<enum value="115">FORMAT_R64G64_SFLOAT</enum>
			<enum value="116">FORMAT_R64G64B64_UINT</enum>
			<enum value="117">FORMAT_R64G64B64_SINT</enum>
			<enum value="118">FORMAT_R64G64B64_SFLOAT</enum>
			<enum value="119">FORMAT_R64G64B64A64_UINT</enum>
			<enum value="120">FORMAT_R64G64B64A64_SINT</enum>
			<enum value="121">FORMAT_R64G64B64A64_SFLOAT</enum>
			<enum value="122">FORMAT_B10G11R11_UFLOAT_PACK32</enum>
			<enum value="123">FORMAT_E5B9G9R9_UFLOAT_PACK32</enum>
			<enum value="124">FORMAT_D16_UNORM</enum>
			<enum value="125">FORMAT_X8_D24_UNORM_PACK32</enum>
			<enum value="126">FORMAT_D32_SFLOAT</enum>
			<enum value="127">FORMAT_S8_UINT</enum>
			<enum value="128">FORMAT_D16_UNORM_S8_UINT</enum>
			<enum value="129">FORMAT_D24_UNORM_S8_UINT</enum>
			<enum value="130">FORMAT_D32_SFLOAT_S8_UINT</enum>
			<enum value="131">FORMAT_BC1_RGB_UNORM_BLOCK</enum>
			<enum value="132">FORMAT_BC1_RGB_SRGB_BLOCK</enum>
			<enum value="133">FORMAT_BC1_RGBA_UNORM_BLOCK</enum>
			<enum value="134">FORMAT_BC1_RGBA_SRGB_BLOCK</enum>
			<enum value="135">FORMAT_BC2_UNORM_BLOCK</enum>
			<enum value="136">FORMAT_BC2_SRGB_BLOCK</enum>
			<enum value="137">FORMAT_BC3_UNORM_BLOCK</enum>
			<enum value="138">FORMAT_BC3_SRGB_BLOCK</enum>
			<enum value="139">FORMAT_BC4_UNORM_BLOCK</enum>
			<enum value="140">FORMAT_BC4_SNORM_BLOCK</enum>
			<enum value="141">FORMAT_BC5_UNORM_BLOCK</enum>
			<enum value="142">FORMAT_BC5_SNORM_BLOCK</enum>
			<enum value="143">FORMAT_BC6H_UFLOAT_BLOCK</enum>
			<enum value="144">FORMAT_BC6H_SFLOAT_BLOCK</enum>
			<enum value="145">FORMAT_BC7_UNORM_BLOCK</enum>
			<enum value="146">FORMAT_BC7_SRGB_BLOCK</enum>
			<enum value="147">FORMAT_ETC2_R8G8B8_UNORM_BLOCK</enum>
			<enum value="148">FORMAT_ETC2_R8G8B8_SRGB_BLOCK</enum>
			<enum value="149">FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK</enum>
			<enum value="150">FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK</enum>
			<enum value="151">FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK</enum>
			<enum value="152">FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK</enum>
			<enum value="153">FORMAT_EAC_R11_UNORM_BLOCK</enum>
			<enum value="154">FORMAT_EAC_R11_SNORM_BLOCK</enum>
			<enum value="155">FORMAT_EAC_R11G11_UNORM_BLOCK</enum>
			<enum value="156">FORMAT_EAC_R11G11_SNORM_BLOCK</enum>
			<enum value="157">FORMAT_ASTC_4x4_UNORM_BLOCK</enum>
			<enum value="158">FORMAT_ASTC_4x4_SRGB_BLOCK</enum>
			<enum value="159">FORMAT_ASTC_5x4_UNORM_BLOCK</enum>
			<enum value="160">FORMAT_ASTC_5x4_SRGB_BLOCK</enum>
			<enum value="161">FORMAT_ASTC_5x5_UNORM_BLOCK</enum>
			<enum value="162">FORMAT_ASTC_5x5_SRGB_BLOCK</enum>
			<enum value="163">FORMAT_ASTC_6x5_UNORM_BLOCK</enum>
			<enum value="164">FORMAT_ASTC_6x5_SRGB_BLOCK</enum>
			<enum value="165">FORMAT_ASTC_6x6_UNORM_BLOCK</enum>
			<enum value="166">FORMAT_ASTC_6x6_SRGB_BLOCK</enum>
			<enum value="167">FORMAT_ASTC_8x5_UNORM_BLOCK</enum>
			<enum value="168">FORMAT_ASTC_8x5_SRGB_BLOCK</enum>
			<enum value="169">FORMAT_ASTC_8x6_UNORM_BLOCK</enum>
			<enum value="170">FORMAT_ASTC_8x6_SRGB_BLOCK</enum>
			<enum value="171">FORMAT_ASTC_8x8_UNORM_BLOCK</enum>
			<enum value="172">FORMAT_ASTC_8x8_SRGB_BLOCK</enum>
			<enum value="173">FORMAT_ASTC_10x5_UNORM_BLOCK</enum>
			<enum value="174">FORMAT_ASTC_10x5_SRGB_BLOCK</enum>
			<enum value="175">FORMAT_ASTC_10x6_UNORM_BLOCK</enum>
			<enum value="176">FORMAT_ASTC_10x6_SRGB_BLOCK</enum>
			<enum value="177">FORMAT_ASTC_10x8_UNORM_BLOCK</enum>
			<enum value="178">FORMAT_ASTC_10x8_SRGB_BLOCK</enum>
			<enum value="179">FORMAT_ASTC_10x10_UNORM_BLOCK</enum>
			<enum value="180">FORMAT_ASTC_10x10_SRGB_BLOCK</enum>
			<enum value="181">FORMAT_ASTC_12x10_UNORM_BLOCK</enum>
			<enum value="182">FORMAT_ASTC_12x10_SRGB_BLOCK</enum>
			<enum value="183">FORMAT_ASTC_12x12_UNORM_BLOCK</enum>
			<enum value="184">FORMAT_ASTC_12x12_SRGB_BLOCK</enum>
		</enum_set>
		<enum_set>
			<name>Result</name>
			<enum value="0">RESULT_SUCCESS</enum>
			<enum value="1">RESULT_NOT_READY</enum>
			<enum value="2">RESULT_TIMEOUT</enum>
			<enum value="3">RESULT_EVENT_SET</enum>
			<enum value="4">RESULT_EVENT_RESET</enum>
			<enum value="5">RESULT_INCOMPLETE</enum>
			<enum value="-1">RESULT_ERROR_OUT_OF_HOST_MEMORY</enum>
			<enum value="-2">RESULT_ERROR_OUT_OF_DEVICE_MEMORY</enum>
			<enum value="-3">RESULT_ERROR_INITIALIZATION_FAILED</enum>
			<enum value="-4">RESULT_ERROR_DEVICE_LOST</enum>
			<enum value="-5">RESULT_ERROR_MEMORY_MAP_FAILED</enum>
			<enum value="-6">RESULT_ERROR_LAYER_NOT_PRESENT</enum>
			<enum value="-7">RESULT_ERROR_EXTENSION_NOT_PRESENT</enum>
			<enum value="-8">RESULT_ERROR_FEATURE_NOT_PRESENT</enum>
			<enum value="-9">RESULT_ERROR_INCOMPATIBLE_DRIVER</enum>
			<enum value="-10">RESULT_ERROR_TOO_MANY_OBJECTS</enum>
			<enum value="-11">RESULT_ERROR_FORMAT_NOT_SUPPORTED</enum>
			<enum value="-1000000000">RESULT_ERROR_SURFACE_LOST_KHR</enum>
			<enum value="-1000000001">RESULT_ERROR_NATIVE_WINDOW_IN_USE_KHR</enum>
			<enum value="1000001003">RESULT_SUBOPTIMAL_KHR</enum>
			<enum value="-1000001004">RESULT_ERROR_OUT_OF_DATE_KHR</enum>
			<enum value="-1000003001">RESULT_ERROR_INCOMPATIBLE_DISPLAY_KHR</enum>
			<enum value="-1000011001">RESULT_ERROR_VALIDATION_FAILED_EXT</enum>
		</enum_set>
		<enum_set>
			<name>SamplerMipmapMode</name>
			<enum value="1">SAMPLER_MIPMAP_MODE_LINEAR</enum>
			<enum value="0">SAMPLER_MIPMAP_MODE_NEAREST</enum>
		</enum_set>
		<enum_set>
			<name>SamplerAddressMode</name>
			<enum value="3">SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER</enum>
			<enum value="2">SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE</enum>
			<enum value="4">SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE</enum>
			<enum value="1">SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT</enum>
			<enum value="0">SAMPLER_ADDRESS_MODE_REPEAT</enum>
		</enum_set>
		<enum_set>
			<name>CompareOp</name>
			<enum value="7">COMPARE_OP_ALWAYS</enum>
			<enum value="2">COMPARE_OP_EQUAL</enum>
			<enum value="4">COMPARE_OP_GREATER</enum>
			<enum value="6">COMPARE_OP_GREATER_OR_EQUAL</enum>
			<enum value="1">COMPARE_OP_LESS</enum>
			<enum value="3">COMPARE_OP_LESS_OR_EQUAL</enum>
			<enum value="0">COMPARE_OP_NEVER</enum>
			<enum value="5">COMPARE_OP_NOT_EQUAL</enum>
		</enum_set>
		<enum_set>
			<name>BorderColor</name>
			<enum value="2">BORDER_COLOR_FLOAT_OPAQUE_BLACK</enum>
			<enum value="4">BORDER_COLOR_FLOAT_OPAQUE_WHITE</enum>
			<enum value="0">BORDER_COLOR_FLOAT_TRANSPARENT_BLACK</enum>
			<enum value="3">BORDER_COLOR_INT_OPAQUE_BLACK</enum>
			<enum value="5">BORDER_COLOR_INT_OPAQUE_WHITE</enum>
			<enum value="1">BORDER_COLOR_INT_TRANSPARENT_BLACK</enum>
		</enum_set>
		<enum_set>
			<name>ImageLayout</name>
			<enum value="0">IMAGE_LAYOUT_UNDEFINED</enum>
			<enum value="1">IMAGE_LAYOUT_GENERAL</enum>
			<enum value="2">IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</enum>
			<enum value="3">IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</enum>
			<enum value="4">IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</enum>
			<enum value="5">IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</enum>
			<enum value="6">IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</enum>
			<enum value="7">IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</enum>
			<enum value="8">IMAGE_LAYOUT_PREINITIALIZED</enum>
			<enum value="1000001002">IMAGE_LAYOUT_PRESENT_SRC_KHR</enum>
		</enum_set>
		<enum_set>
			<name>AttachmentLoadOp</name>
			<enum value="0">ATTACHMENT_LOAD_OP_LOAD</enum>
			<enum value="1">ATTACHMENT_LOAD_OP_CLEAR</enum>
			<enum value="2">ATTACHMENT_LOAD_OP_DONT_CARE</enum>
		</enum_set>
		<enum_set>
			<name>AttachmentStoreOp</name>
			<enum value="0">ATTACHMENT_STORE_OP_STORE</enum>
			<enum value="1">ATTACHMENT_STORE_OP_DONT_CARE</enum>
		</enum_set>
		<enum_set>
			<name>ImageType</name>
			<enum value="0">IMAGE_TYPE_1D</enum>
			<enum value="1">IMAGE_TYPE_2D</enum>
			<enum value="2">IMAGE_TYPE_3D</enum>
		</enum_set>
		<enum_set>
			<name>ImageTiling</name>
			<enum value="0">IMAGE_TILING_OPTIMAL</enum>
			<enum value="1">IMAGE_TILING_LINEAR</enum>
		</enum_set>
		<enum_set>
			<name>ImageViewType</name>
			<enum value="0">IMAGE_VIEW_TYPE_1D</enum>
			<enum value="1">IMAGE_VIEW_TYPE_2D</enum>
			<enum value="2">IMAGE_VIEW_TYPE_3D</enum>
			<enum value="3">IMAGE_VIEW_TYPE_CUBE</enum>
			<enum value="4">IMAGE_VIEW_TYPE_1D_ARRAY</enum>
			<enum value="5">IMAGE_VIEW_TYPE_2D_ARRAY</enum>
			<enum value="6">IMAGE_VIEW_TYPE_CUBE_ARRAY</enum>
		</enum_set>
		<enum_set>
			<name>CommandBufferLevel</name>
			<enum value="0">COMMAND_BUFFER_LEVEL_PRIMARY</enum>
			<enum value="1">COMMAND_BUFFER_LEVEL_SECONDARY</enum>
		</enum_set>
		<enum_set>
			<name>ComponentSwizzle</name>
			<enum value="0">COMPONENT_SWIZZLE_IDENTITY</enum>
			<enum value="1">COMPONENT_SWIZZLE_ZERO</enum>
			<enum value="2">COMPONENT_SWIZZLE_ONE</enum>
			<enum value="3">COMPONENT_SWIZZLE_R</enum>
			<enum value="4">COMPONENT_SWIZZLE_G</enum>
			<enum value="5">COMPONENT_SWIZZLE_B</enum>
			<enum value="6">COMPONENT_SWIZZLE_A</enum>
		</enum_set>
		<enum_set>
			<name>DescriptorType</name>
			<enum value="0">DESCRIPTOR_TYPE_SAMPLER</enum>
			<enum value="1">DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</enum>
			<enum value="2">DESCRIPTOR_TYPE_SAMPLED_IMAGE</enum>
			<enum value="3">DESCRIPTOR_TYPE_STORAGE_IMAGE</enum>
			<enum value="4">DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</enum>
			<enum value="5">DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</enum>
			<enum value="6">DESCRIPTOR_TYPE_UNIFORM_BUFFER</enum>
			<enum value="7">DESCRIPTOR_TYPE_STORAGE_BUFFER</enum>
			<enum value="8">DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</enum>
			<enum value="9">DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</enum>
			<enum value="10">DESCRIPTOR_TYPE_INPUT_ATTACHMENT</enum>
		</enum_set>
		<enum_set>
			<name>QueryType</name>
			<enum value="0">QUERY_TYPE_OCCLUSION</enum>
			<enum value="1">QUERY_TYPE_PIPELINE_STATISTICS</enum>
			<enum value="2">QUERY_TYPE_TIMESTAMP</enum>
		</enum_set>
		<enum_set>
			<name>PipelineBindPoint</name>
			<enum value="0">PIPELINE_BIND_POINT_GRAPHICS</enum>
			<enum value="1">PIPELINE_BIND_POINT_COMPUTE</enum>
		</enum_set>
		<enum_set>
			<name>PrimitiveTopology</name>
			<enum value="0">PRIMITIVE_TOPOLOGY_POINT_LIST</enum>
			<enum value="1">PRIMITIVE_TOPOLOGY_LINE_LIST</enum>
			<enum value="2">PRIMITIVE_TOPOLOGY_LINE_STRIP</enum>
			<enum value="3">PRIMITIVE_TOPOLOGY_TRIANGLE_LIST</enum>
			<enum value="4">PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP</enum>
			<enum value="5">PRIMITIVE_TOPOLOGY_TRIANGLE_FAN</enum>
			<enum value="6">PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY</enum>
			<enum value="7">PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY</enum>
			<enum value="8">PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY</enum>
			<enum value="9">PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY</enum>
			<enum value="10">PRIMITIVE_TOPOLOGY_PATCH_LIST</enum>
		</enum_set>
		<enum_set>
			<name>SharingMode</name>
			<enum value="0">SHARING_MODE_EXCLUSIVE</enum>
			<enum value="1">SHARING_MODE_CONCURRENT</enum>
		</enum_set>
		<enum_set>
			<name>IndexType</name>
			<enum value="0">INDEX_TYPE_UINT16</enum>
			<enum value="1">INDEX_TYPE_UINT32</enum>
		</enum_set>
		<enum_set>
			<name>Filter</name>
			<enum value="0">FILTER_NEAREST</enum>
			<enum value="1">FILTER_LINEAR</enum>
		</enum_set>
		<enum_set>
			<name>PolygonMode</name>
			<enum value="0">POLYGON_MODE_FILL</enum>
			<enum value="1">POLYGON_MODE_LINE</enum>
			<enum value="2">POLYGON_MODE_POINT</enum>
		</enum_set>
		<enum_set>
			<name>CullMode</name>
			<enum value="0">CULL_MODE_NONE</enum>
			<enum value="1">CULL_MODE_FRONT_BIT</enum>
			<enum value="2">CULL_MODE_BACK_BIT</enum>
			<enum value="3">CULL_MODE_FRONT_AND_BACK</enum>
		</enum_set>
		<enum_set>
			<name>FrontFace</name>
			<enum value="0">FRONT_FACE_COUNTER_CLOCKWISE</enum>
			<enum value="1">FRONT_FACE_CLOCKWISE</enum>
		</enum_set>
		<enum_set>
			<name>BlendFactor</name>
			<enum value="0">BLEND_FACTOR_ZERO</enum>
			<enum value="1">BLEND_FACTOR_ONE</enum>
			<enum value="2">BLEND_FACTOR_SRC_COLOR</enum>
			<enum value="3">BLEND_FACTOR_ONE_MINUS_SRC_COLOR</enum>
			<enum value="4">BLEND_FACTOR_DST_COLOR</enum>
			<enum value="5">BLEND_FACTOR_ONE_MINUS_DST_COLOR</enum>
			<enum value="6">BLEND_FACTOR_SRC_ALPHA</enum>
			<enum value="7">BLEND_FACTOR_ONE_MINUS_SRC_ALPHA</enum>
			<enum value="8">BLEND_FACTOR_DST_ALPHA</enum>
			<enum value="9">BLEND_FACTOR_ONE_MINUS_DST_ALPHA</enum>
			<enum value="10">BLEND_FACTOR_CONSTANT_COLOR</enum>
			<enum value="11">BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR</enum>
			<enum value="12">BLEND_FACTOR_CONSTANT_ALPHA</enum>
			<enum value="13">BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA</enum>
			<enum value="14">BLEND_FACTOR_SRC_ALPHA_SATURATE</enum>
			<enum value="15">BLEND_FACTOR_SRC1_COLOR</enum>
			<enum value="16">BLEND_FACTOR_ONE_MINUS_SRC1_COLOR</enum>
			<enum value="17">BLEND_FACTOR_SRC1_ALPHA</enum>
			<enum value="18">BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA</enum>
		</enum_set>
		<enum_set>
			<name>BlendOp</name>
			<enum value="0">BLEND_OP_ADD</enum>
			<enum value="1">BLEND_OP_SUBTRACT</enum>
			<enum value="2">BLEND_OP_REVERSE_SUBTRACT</enum>
			<enum value="3">BLEND_OP_MIN</enum>
			<enum value="4">BLEND_OP_MAX</enum>
		</enum_set>
		<enum_set>
			<name>StencilOp</name>
			<enum value="0">STENCIL_OP_KEEP</enum>
			<enum value="1">STENCIL_OP_ZERO</enum>
			<enum value="2">STENCIL_OP_REPLACE</enum>
			<enum value="3">STENCIL_OP_INCREMENT_AND_CLAMP</enum>
			<enum value="4">STENCIL_OP_DECREMENT_AND_CLAMP</enum>
			<enum value="5">STENCIL_OP_INVERT</enum>
			<enum value="6">STENCIL_OP_INCREMENT_AND_WRAP</enum>
			<enum value="7">STENCIL_OP_DECREMENT_AND_WRAP</enum>
		</enum_set>
		<enum_set>
			<name>LogicOp</name>
			<enum value="0">LOGIC_OP_CLEAR</enum>
			<enum value="1">LOGIC_OP_AND</enum>
			<enum value="2">LOGIC_OP_AND_REVERSE</enum>
			<enum value="3">LOGIC_OP_COPY</enum>
			<enum value="4">LOGIC_OP_AND_INVERTED</enum>
			<enum value="5">LOGIC_OP_NO_OP</enum>
			<enum value="6">LOGIC_OP_XOR</enum>
			<enum value="7">LOGIC_OP_OR</enum>
			<enum value="8">LOGIC_OP_NOR</enum>
			<enum value="9">LOGIC_OP_EQUIVALENT</enum>
			<enum value="10">LOGIC_OP_INVERT</enum>
			<enum value="11">LOGIC_OP_OR_REVERSE</enum>
			<enum value="12">LOGIC_OP_COPY_INVERTED</enum>
			<enum value="13">LOGIC_OP_OR_INVERTED</enum>
			<enum value="14">LOGIC_OP_NAND</enum>
			<enum value="15">LOGIC_OP_SET</enum>
		</enum_set>
		<enum_set>
			<name>SystemAllocationScope</name>
			<enum value="0">SYSTEM_ALLOCATION_SCOPE_COMMAND</enum>
			<enum value="1">SYSTEM_ALLOCATION_SCOPE_OBJECT</enum>
			<enum value="2">SYSTEM_ALLOCATION_SCOPE_CACHE</enum>
			<enum value="3">SYSTEM_ALLOCATION_SCOPE_DEVICE</enum>
			<enum value="4">SYSTEM_ALLOCATION_SCOPE_INSTANCE</enum>
		</enum_set>
		<enum_set>
			<name>PhysicalDeviceType</name>
			<enum value="0">PHYSICAL_DEVICE_TYPE_OTHER</enum>
			<enum value="1">PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU</enum>
			<enum value="2">PHYSICAL_DEVICE_TYPE_DISCRETE_GPU</enum>
			<enum value="3">PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU</enum>
			<enum value="4">PHYSICAL_DEVICE_TYPE_CPU</enum>
		</enum_set>
		<enum_set>
			<name>VertexInputRate</name>
			<enum value="0">VERTEX_INPUT_RATE_VERTEX</enum>
			<enum value="1">VERTEX_INPUT_RATE_INSTANCE</enum>
		</enum_set>
		<enum_set>
			<name>SubpassContents</name>
			<enum value="0">SUBPASS_CONTENTS_INLINE</enum>
			<enum value="1">SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS</enum>
		</enum_set>
		<enum_set type="flags">
			<name>DynamicState</name>
			<enum value="0">DYNAMIC_STATE_NONE</enum>
			<enum value="1" type="bit">DYNAMIC_STATE_VIEWPORT_BIT</enum>
			<enum value="2" type="bit">DYNAMIC_STATE_SCISSOR_BIT</enum>
			<enum value="4" type="bit">DYNAMIC_STATE_LINE_WIDTH_BIT</enum>
			<enum value="8" type="bit">DYNAMIC_STATE_DEPTH_BIAS_BIT</enum>
			<enum value="16" type="bit">DYNAMIC_STATE_BLEND_CONSTANTS_BIT</enum>
			<enum value="32" type="bit">DYNAMIC_STATE_DEPTH_BOUNDS_BIT</enum>
			<enum value="64" type="bit">DYNAMIC_STATE_STENCIL_COMPARE_MASK_BIT</enum>
			<enum value="128" type="bit">DYNAMIC_STATE_STENCIL_WRITE_MASK_BIT</enum>
			<enum value="256" type="bit">DYNAMIC_STATE_STENCIL_REFERENCE_BIT</enum>
			<enum value="512" type="bit">DYNAMIC_STATE_VIEWPORT_W_SCALING_NV_BIT</enum>
			<enum value="1024" type="bit">DYNAMIC_STATE_DISCARD_RECTANGLE_EXT_BIT</enum>
			<enum value="2048" type="bit">DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT_BIT</enum>
			<enum value="4096" type="bit">DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV_BIT</enum>
			<enum value="8192" type="bit">DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV_BIT</enum>
			<enum value="16384" type="bit">DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>Queue</name>
			<enum value="1" type="bit">QUEUE_GRAPHICS_BIT</enum>
			<enum value="2" type="bit">QUEUE_COMPUTE_BIT</enum>
			<enum value="4" type="bit">QUEUE_TRANSFER_BIT</enum>
			<enum value="8" type="bit">QUEUE_SPARSE_BINDING_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>MemoryProperty</name>
			<enum value="1" type="bit">MEMORY_PROPERTY_DEVICE_LOCAL_BIT</enum>
			<enum value="2" type="bit">MEMORY_PROPERTY_HOST_VISIBLE_BIT</enum>
			<enum value="4" type="bit">MEMORY_PROPERTY_HOST_COHERENT_BIT</enum>
			<enum value="8" type="bit">MEMORY_PROPERTY_HOST_CACHED_BIT</enum>
			<enum value="16" type="bit">MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>Access</name>
			<enum value="1" type="bit">ACCESS_INDIRECT_COMMAND_READ_BIT</enum>
			<enum value="2" type="bit">ACCESS_INDEX_READ_BIT</enum>
			<enum value="4" type="bit">ACCESS_VERTEX_ATTRIBUTE_READ_BIT</enum>
			<enum value="8" type="bit">ACCESS_UNIFORM_READ_BIT</enum>
			<enum value="16" type="bit">ACCESS_INPUT_ATTACHMENT_READ_BIT</enum>
			<enum value="32" type="bit">ACCESS_SHADER_READ_BIT</enum>
			<enum value="64" type="bit">ACCESS_SHADER_WRITE_BIT</enum>
			<enum value="128" type="bit">ACCESS_COLOR_ATTACHMENT_READ_BIT</enum>
			<enum value="256" type="bit">ACCESS_COLOR_ATTACHMENT_WRITE_BIT</enum>
			<enum value="512" type="bit">ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT</enum>
			<enum value="1024" type="bit">ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT</enum>
			<enum value="2048" type="bit">ACCESS_TRANSFER_READ_BIT</enum>
			<enum value="4096" type="bit">ACCESS_TRANSFER_WRITE_BIT</enum>
			<enum value="8192" type="bit">ACCESS_HOST_READ_BIT</enum>
			<enum value="16384" type="bit">ACCESS_HOST_WRITE_BIT</enum>
			<enum value="32768" type="bit">ACCESS_MEMORY_READ_BIT</enum>
			<enum value="65536" type="bit">ACCESS_MEMORY_WRITE_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>BufferUsage</name>
			<enum value="1" type="bit">BUFFER_USAGE_TRANSFER_SRC_BIT</enum>
			<enum value="2" type="bit">BUFFER_USAGE_TRANSFER_DST_BIT</enum>
			<enum value="4" type="bit">BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT</enum>
			<enum value="8" type="bit">BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT</enum>
			<enum value="16" type="bit">BUFFER_USAGE_UNIFORM_BUFFER_BIT</enum>
			<enum value="32" type="bit">BUFFER_USAGE_STORAGE_BUFFER_BIT</enum>
			<enum value="64" type="bit">BUFFER_USAGE_INDEX_BUFFER_BIT</enum>
			<enum value="128" type="bit">BUFFER_USAGE_VERTEX_BUFFER_BIT</enum>
			<enum value="256" type="bit">BUFFER_USAGE_INDIRECT_BUFFER_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>BufferCreateFlags</name>
			<enum value="1" type="bit">BUFFER_CREATE_SPARSE_BINDING_BIT</enum>
			<enum value="2" type="bit">BUFFER_CREATE_SPARSE_RESIDENCY_BIT</enum>
			<enum value="4" type="bit">BUFFER_CREATE_SPARSE_ALIASED_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>ShaderStage</name>
			<enum value="1" type="bit">SHADER_STAGE_VERTEX_BIT</enum>
			<enum value="2" type="bit">SHADER_STAGE_TESSELLATION_CONTROL_BIT</enum>
			<enum value="4" type="bit">SHADER_STAGE_TESSELLATION_EVALUATION_BIT</enum>
			<enum value="8" type="bit">SHADER_STAGE_GEOMETRY_BIT</enum>
			<enum value="16" type="bit">SHADER_STAGE_FRAGMENT_BIT</enum>
			<enum value="32" type="bit">SHADER_STAGE_COMPUTE_BIT</enum>
			<enum value="31">SHADER_STAGE_ALL_GRAPHICS</enum>
			<enum value="2147483647">SHADER_STAGE_ALL</enum>
		</enum_set>
		<enum_set type="flags">
			<name>ImageUsage</name>
			<enum value="1" type="bit">IMAGE_USAGE_TRANSFER_SRC_BIT</enum>
			<enum value="2" type="bit">IMAGE_USAGE_TRANSFER_DST_BIT</enum>
			<enum value="4" type="bit">IMAGE_USAGE_SAMPLED_BIT</enum>
			<enum value="8" type="bit">IMAGE_USAGE_STORAGE_BIT</enum>
			<enum value="16" type="bit">IMAGE_USAGE_COLOR_ATTACHMENT_BIT</enum>
			<enum value="32" type="bit">IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</enum>
			<enum value="64" type="bit">IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT</enum>
			<enum value="128" type="bit">IMAGE_USAGE_INPUT_ATTACHMENT_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>ImageCreateFlags</name>
			<enum value="1" type="bit">IMAGE_CREATE_SPARSE_BINDING_BIT</enum>
			<enum value="2" type="bit">IMAGE_CREATE_SPARSE_RESIDENCY_BIT</enum>
			<enum value="4" type="bit">IMAGE_CREATE_SPARSE_ALIASED_BIT</enum>
			<enum value="8" type="bit">IMAGE_CREATE_MUTABLE_FORMAT_BIT</enum>
			<enum value="16" type="bit">IMAGE_CREATE_CUBE_COMPATIBLE_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>PipelineCreateFlags</name>
			<enum value="1" type="bit">PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT</enum>
			<enum value="2" type="bit">PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT</enum>
			<enum value="4" type="bit">PIPELINE_CREATE_DERIVATIVE_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>ColorComponent</name>
			<enum value="0">COLOR_COMPONENT_NONE</enum>
			<enum value="1" type="bit">COLOR_COMPONENT_R_BIT</enum>
			<enum value="2" type="bit">COLOR_COMPONENT_G_BIT</enum>
			<enum value="4" type="bit">COLOR_COMPONENT_B_BIT</enum>
			<enum value="8" type="bit">COLOR_COMPONENT_A_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>FenceCreateFlags</name>
			<enum value="1" type="bit">FENCE_CREATE_SIGNALED_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>FormatFeature</name>
			<enum value="1" type="bit">FORMAT_FEATURE_SAMPLED_IMAGE_BIT</enum>
			<enum value="2" type="bit">FORMAT_FEATURE_STORAGE_IMAGE_BIT</enum>
			<enum value="4" type="bit">FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT</enum>
			<enum value="8" type="bit">FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT</enum>
			<enum value="16" type="bit">FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT</enum>
			<enum value="32" type="bit">FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT</enum>
			<enum value="64" type="bit">FORMAT_FEATURE_VERTEX_BUFFER_BIT</enum>
			<enum value="128" type="bit">FORMAT_FEATURE_COLOR_ATTACHMENT_BIT</enum>
			<enum value="256" type="bit">FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT</enum>
			<enum value="512" type="bit">FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</enum>
			<enum value="1024" type="bit">FORMAT_FEATURE_BLIT_SRC_BIT</enum>
			<enum value="2048" type="bit">FORMAT_FEATURE_BLIT_DST_BIT</enum>
			<enum value="4096" type="bit">FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>QueryControl</name>
			<enum value="1">QUERY_CONTROL_PRECISE_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>QueryFlags</name>
			<enum value="1" type="bit">QUERY_RESULT_64_BIT</enum>
			<enum value="2" type="bit">QUERY_RESULT_WAIT_BIT</enum>
			<enum value="4" type="bit">QUERY_RESULT_WITH_AVAILABILITY_BIT</enum>
			<enum value="8" type="bit">QUERY_RESULT_PARTIAL_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>CommandBufferUsage</name>
			<enum value="1" type="bit">COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT</enum>
			<enum value="2" type="bit">COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT</enum>
			<enum value="4" type="bit">COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>QueryPipelineStatistics</name>
			<enum value="1" type="bit">QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT</enum>
			<enum value="2" type="bit">QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT</enum>
			<enum value="4" type="bit">QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT</enum>
			<enum value="8" type="bit">QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT</enum>
			<enum value="16" type="bit">QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT</enum>
			<enum value="32" type="bit">QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT</enum>
			<enum value="64" type="bit">QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT</enum>
			<enum value="128" type="bit">QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT</enum>
			<enum value="256" type="bit">QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT</enum>
			<enum value="512" type="bit">QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT</enum>
			<enum value="1024" type="bit">QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>ImageAspect</name>
			<enum value="0">IMAGE_ASPECT_NONE</enum>
			<enum value="1" type="bit">IMAGE_ASPECT_COLOR_BIT</enum>
			<enum value="2" type="bit">IMAGE_ASPECT_DEPTH_BIT</enum>
			<enum value="4" type="bit">IMAGE_ASPECT_STENCIL_BIT</enum>
			<enum value="8" type="bit">IMAGE_ASPECT_METADATA_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>SparseImageFormat</name>
			<enum value="1" type="bit">SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT</enum>
			<enum value="2" type="bit">SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT</enum>
			<enum value="4" type="bit">SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>SparseMemoryBind</name>
			<enum value="1" type="bit">SPARSE_MEMORY_BIND_METADATA_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>PipelineStage</name>
			<enum value="1" type="bit">PIPELINE_STAGE_TOP_OF_PIPE_BIT</enum>
			<enum value="2" type="bit">PIPELINE_STAGE_DRAW_INDIRECT_BIT</enum>
			<enum value="4" type="bit">PIPELINE_STAGE_VERTEX_INPUT_BIT</enum>
			<enum value="8" type="bit">PIPELINE_STAGE_VERTEX_SHADER_BIT</enum>
			<enum value="16" type="bit">PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</enum>
			<enum value="32" type="bit">PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</enum>
			<enum value="64" type="bit">PIPELINE_STAGE_GEOMETRY_SHADER_BIT</enum>
			<enum value="128" type="bit">PIPELINE_STAGE_FRAGMENT_SHADER_BIT</enum>
			<enum value="256" type="bit">PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</enum>
			<enum value="512" type="bit">PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT</enum>
			<enum value="1024" type="bit">PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT</enum>
			<enum value="2048" type="bit">PIPELINE_STAGE_COMPUTE_SHADER_BIT</enum>
			<enum value="4096" type="bit">PIPELINE_STAGE_TRANSFER_BIT</enum>
			<enum value="8192" type="bit">PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT</enum>
			<enum value="16384" type="bit">PIPELINE_STAGE_HOST_BIT</enum>
			<enum value="32768" type="bit">PIPELINE_STAGE_ALL_GRAPHICS_BIT</enum>
			<enum value="65536" type="bit">PIPELINE_STAGE_ALL_COMMANDS_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>CommandPoolCreateFlags</name>
			<enum value="1" type="bit">COMMAND_POOL_CREATE_TRANSIENT_BIT</enum>
			<enum value="2" type="bit">COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>CommandPoolResetFlags</name>
			<enum value="1" type="bit">COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>CommandBufferResetFlags</name>
			<enum value="1" type="bit">COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>SampleCount</name>
			<enum value="1" type="bit">SAMPLE_COUNT_1_BIT</enum>
			<enum value="2" type="bit">SAMPLE_COUNT_2_BIT</enum>
			<enum value="4" type="bit">SAMPLE_COUNT_4_BIT</enum>
			<enum value="8" type="bit">SAMPLE_COUNT_8_BIT</enum>
			<enum value="16" type="bit">SAMPLE_COUNT_16_BIT</enum>
			<enum value="32" type="bit">SAMPLE_COUNT_32_BIT</enum>
			<enum value="64" type="bit">SAMPLE_COUNT_64_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>AttachmentDescription</name>
			<enum value="1" type="bit">ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>StencilFlags</name>
			<enum value="1" type="bit">STENCIL_FACE_FRONT_BIT</enum>
			<enum value="2" type="bit">STENCIL_FACE_BACK_BIT</enum>
			<enum value="3">STENCIL_FRONT_AND_BACK</enum>
		</enum_set>
		<enum_set type="flags">
			<name>DescriptorPoolCreateFlags</name>
			<enum value="1" type="bit">DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT</enum>
		</enum_set>
		<enum_set>
			<name>PresentMode</name>
			<enum value="0">PRESENT_MODE_IMMEDIATE_KHR</enum>
			<enum value="1">PRESENT_MODE_MAILBOX_KHR</enum>
			<enum value="2">PRESENT_MODE_FIFO_KHR</enum>
			<enum value="3">PRESENT_MODE_FIFO_RELAXED_KHR</enum>
		</enum_set>
		<enum_set>
			<name>Colorspace</name>
			<enum value="0">COLORSPACE_SRGB_NONLINEAR_KHR</enum>
		</enum_set>
		<enum_set type="flags">
			<name>DisplayPlaneAlpha</name>
			<enum value="1" type="bit">DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR</enum>
			<enum value="2" type="bit">DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR</enum>
			<enum value="4" type="bit">DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR</enum>
			<enum value="8" type="bit">DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR</enum>
		</enum_set>
		<enum_set type="flags">
			<name>CompositeAlpha</name>
			<enum value="1" type="bit">COMPOSITE_ALPHA_OPAQUE_BIT_KHR</enum>
			<enum value="2" type="bit">COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR</enum>
			<enum value="4" type="bit">COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR</enum>
			<enum value="8" type="bit">COMPOSITE_ALPHA_INHERIT_BIT_KHR</enum>
		</enum_set>
		<enum_set type="flags">
			<name>SurfaceTransform</name>
			<enum value="1" type="bit">SURFACE_TRANSFORM_IDENTITY_BIT_KHR</enum>
			<enum value="2" type="bit">SURFACE_TRANSFORM_ROTATE_90_BIT_KHR</enum>
			<enum value="4" type="bit">SURFACE_TRANSFORM_ROTATE_180_BIT_KHR</enum>
			<enum value="8" type="bit">SURFACE_TRANSFORM_ROTATE_270_BIT_KHR</enum>
			<enum value="16" type="bit">SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR</enum>
			<enum value="32" type="bit">SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR</enum>
			<enum value="64" type="bit">SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR</enum>
			<enum value="128" type="bit">SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR</enum>
			<enum value="256" type="bit">SURFACE_TRANSFORM_INHERIT_BIT_KHR</enum>
		</enum_set>
		<enum_set type="flags">
			<name>DebugReportFlags</name>
			<enum value="1" type="bit">DEBUG_REPORT_INFORMATION_BIT_EXT</enum>
			<enum value="2" type="bit">DEBUG_REPORT_WARNING_BIT_EXT</enum>
			<enum value="4" type="bit">DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT</enum>
			<enum value="8" type="bit">DEBUG_REPORT_ERROR_BIT_EXT</enum>
			<enum value="16" type="bit">DEBUG_REPORT_DEBUG_BIT_EXT</enum>
		</enum_set>
		<enum_set>
			<name>DebugReportObjectType</name>
			<enum value="0">DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT</enum>
			<enum value="1">DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT</enum>
			<enum value="2">DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT</enum>
			<enum value="3">DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT</enum>
			<enum value="4">DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT</enum>
			<enum value="5">DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT</enum>
			<enum value="6">DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT</enum>
			<enum value="7">DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT</enum>
			<enum value="8">DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT</enum>
			<enum value="9">DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT</enum>
			<enum value="10">DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT</enum>
			<enum value="11">DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT</enum>
			<enum value="12">DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT</enum>
			<enum value="13">DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT</enum>
			<enum value="14">DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT</enum>
			<enum value="15">DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT</enum>
			<enum value="16">DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT</enum>
			<enum value="17">DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT</enum>
			<enum value="18">DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT</enum>
			<enum value="19">DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT</enum>
			<enum value="20">DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT</enum>
			<enum value="21">DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT</enum>
			<enum value="22">DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT</enum>
			<enum value="23">DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT</enum>
			<enum value="24">DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT</enum>
			<enum value="25">DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT</enum>
			<enum value="26">DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT</enum>
			<enum value="27">DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT</enum>
		</enum_set>
		<enum_set type="flags">
			<name>MemoryFeature</name>
			<enum value="1" type="bit">MEMORY_FEATURE_DEVICE_LOCAL_BIT</enum>
			<enum value="2" type="bit">MEMORY_FEATURE_HOST_CACHED_BIT</enum>
			<enum value="4" type="bit">MEMORY_FEATURE_HOST_COHERENT_BIT</enum>
			<enum value="8" type="bit">MEMORY_FEATURE_LAZILY_ALLOCATED_BIT</enum>
			<enum value="16" type="bit">MEMORY_FEATURE_HOST_ACCESSABLE_BIT</enum>
			<enum value="1" type="bit">MEMORY_FEATURE_GPU_BULK_BIT</enum>
			<enum value="17">MEMORY_FEATURE_CPU_TO_GPU</enum>
			<enum value="22">MEMORY_FEATURE_GPU_TO_CPU</enum>
		</enum_set>
		<enum_set type="flags">
			<name>QueueFamily</name>
			<enum value="1" type="bit">QUEUE_FAMILY_GRAPHICS_BIT</enum>
			<enum value="2" type="bit">QUEUE_FAMILY_COMPUTE_BIT</enum>
			<enum value="4" type="bit">QUEUE_FAMILY_DMA_BIT</enum>
		</enum_set>
		<enum_set>
			<name>RasterizationOrderAMD</name>
			<enum value="0">RASTERIZATION_ORDER_AMD_STRICT</enum>
			<enum value="1">RASTERIZATION_ORDER_AMD_RELAXED</enum>
		</enum_set>
	</collection>
</root>
