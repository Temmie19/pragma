<root>
	<collection type="library">
		<name>util</name>
		<desc>TODO</desc>
		<function type="function">
			<name>get_date_time</name>
			<desc>Returns the current date and time as string.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string" default="%Y-%m-%d %X">value</arg>
				</parameters>
				<returnValues>
					<arg type="string">dateTime</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>round_string</name>
			<desc>Rounds the specified value for the specified number of decimal places.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
					<arg type="int" default="0">places</arg>
				</parameters>
				<returnValues>
					<arg type="string">roundedValue</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>fade_property</name>
			<desc>Interpolates the property between its current value and the specified target value over the specified duration.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="util.ColorProperty">property</arg>
					<arg type="util.Color">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.Vector2Property">property</arg>
					<arg type="math.Vector2">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.Vector2iProperty">property</arg>
					<arg type="math.Vector2i">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.Vector3Property">property</arg>
					<arg type="math.Vector3">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.Vector3iProperty">property</arg>
					<arg type="math.Vector3i">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.Vector4Property">property</arg>
					<arg type="math.Vector4">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.Vector4iProperty">property</arg>
					<arg type="math.Vector4i">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.QuaternionProperty">property</arg>
					<arg type="math.Quaternion">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.EulerAnglesProperty">property</arg>
					<arg type="math.EulerAngles">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.IntProperty">property</arg>
					<arg type="int">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="util.FloatProperty">property</arg>
					<arg type="float">targetValue</arg>
					<arg type="float">duration</arg>
				</parameters>
				<returnValues>
					<arg type="util.Callback">callback</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>is_table</name>
				<desc>Returns ''true'' if the given argument is a table, otherwise ''false''.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any" default="nil">value</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isTable</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>is_valid_entity</name>
				<desc>Returns ''false'' if the given parameter is ''nil'', not an entity, or an invalid entity.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any" default="nil">value</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isEntityAndValid</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>is_valid</name>
				<desc>Returns ''false'' if the given parameter is nil, or has an "IsValid"-method, which returned ''false''.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="any" default="nil">value</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isValid</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>register_class</name>
			<desc>
				Attempts to register the class. If the class had already been registered, it will return ''false'', otherwise ''true''.\n
				This is (almost) equivalent to:\n
				<syntaxhighlight lang="lua">
				class 'className' (BaseClass)
				</syntaxhighlight>
				With the exception that it will not overwrite existing classes.\n
				You can also specify libraries inside the class name, in which case the class will be registered to that library (e.g. util.register_class("math.SomeMathClass")).
			</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">className</arg>
					<arg type="class" variadic="1">parentClasses</arg>
				</parameters>
				<returnValues>
					<arg type="bool">success</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>splash_damage</name>
			<desc>Damages all entities within the sphere specified in the splash damage info structure.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="util.SplashDamageInfo">splashDamageInfo</arg>
				</parameters>
			</overload>
		</function>
		<function type="function">
			<name>shake_screen</name>
			<desc>Shake's the player's screen, if in the specified radius to the given origin. If no origin is specified, the shake will be applied at full scale, regardless of the player's position (globally).</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">origin</arg>
					<arg type="float">radius</arg>
					<arg type="float">amplitude</arg>
					<arg type="float">frequency</arg>
					<arg type="float">duration</arg>
					<arg type="float">fadeInDuration</arg>
					<arg type="float">fadeOutDuration</arg>
				</parameters>
			</overload>
			<overload>
				<parameters>
					<arg type="float">amplitude</arg>
					<arg type="float">frequency</arg>
					<arg type="float">duration</arg>
					<arg type="float">fadeInDuration</arg>
					<arg type="float">fadeOutDuration</arg>
				</parameters>
			</overload>
		</function>
		<function type="function">
			<name>get_faded_time_factor</name>
			<desc>Returns a factor value between 0 and 1, representing how far 'curTime' is into 'duration', with an ease-in/ease-out effect.</desc>
			<lua>
				local f = util.get_faded_time_factor(3,10,0.25,0.25)
				msgn(f) -- 1.0
				f = util.get_faded_time_factor(0.1,5,0.5,0.75)
				msgn(f) -- 0.2
				f = util.get_faded_time_factor(3,3.5,0.25,1)
				msgn(f) -- 0.5
			</lua>
			<overload>
				<parameters>
					<arg type="float">curTime</arg>
					<arg type="float">duration</arg>
					<arg type="float">fadeIn</arg>
					<arg type="float">fadeOut</arg>
				</parameters>
				<returnValues>
					<arg type="float">fadedTimeFactor</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>get_scale_factor</name>
			<desc>Returns a scale factor, representing how far into the range the given value lies.</desc>
			<lua>
				local f = util.get_scale_factor(0.5,-0.25,1.75)
				msgn(f) -- 0.375
				f = util.get_scale_factor(5,10)
				msgn(f) -- 0.5
				f = util.get_scale_factor(-3,4,8)
				msgn(f) -- 0
			</lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
					<arg type="float">range</arg>
				</parameters>
				<returnValues>
					<arg type="float">scaleFactor</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="float">value</arg>
					<arg type="float">min</arg>
					<arg type="float">max</arg>
				</parameters>
				<returnValues>
					<arg type="float">scaleFactor</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>local_to_world</name>
				<desc>Transforms the local position/rotation 'rot'/'pos' to a world position/rotation.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Quaternion">localRotation</arg>
						<arg type="math.Quaternion">rotation</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">worldRotation</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">localPosition</arg>
						<arg type="math.Quaternion">localRotation</arg>
						<arg type="math.Vector">position</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">worldPosition</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">localPosition</arg>
						<arg type="math.Quaternion">localRotation</arg>
						<arg type="math.Vector">position</arg>
						<arg type="math.Quaternion">rotation</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">worldPosition</arg>
						<arg type="math.Quaternion">worldRotation</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>world_to_local</name>
				<desc>Transforms the world position/rotation 'rot'/'pos' to a local position/rotation.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Quaternion">localRotation</arg>
						<arg type="math.Quaternion">rotation</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">localRotation</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">localPosition</arg>
						<arg type="math.Quaternion">localRotation</arg>
						<arg type="math.Vector">position</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">localPosition</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">localPosition</arg>
						<arg type="math.Quaternion">localRotation</arg>
						<arg type="math.Vector">position</arg>
						<arg type="math.Quaternion">rotation</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">localPosition</arg>
						<arg type="math.Quaternion">localRotation</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>get_pretty_bytes</name>
				<desc>Returns the given bytes as a formatted string.</desc>
				<lua>
					print(util.get_pretty_bytes(1234567)) -- Prints "1.18 MiB"
				</lua>
				<overload>
					<parameters>
						<arg type="int">bytes</arg>
					</parameters>
					<returnValues>
						<arg type="string">prettyBytes</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>get_pretty_duration</name>
				<desc>Returns the given duration in milliseconds as a formatted string. If ''segmentCount'' is set to 0, only the largest component will be returned (e.g. days) and no remainders. If set to -1, all components will be returned (Except for all remaining milliseconds, which can be toggled with ''ignoreRemainingMs'').</desc>
				<lua>
					print(util.get_pretty_duration(123456789,-1,false)) -- Prints "1d 34h 17m 36s 789ms"
					print(util.get_pretty_duration(123456789)) -- Prints "1d"
				</lua>
				<overload>
					<parameters>
						<arg type="int">milliseconds</arg>
						<arg type="int" default="0">segmentCount</arg>
						<arg type="bool" default="true">ignoreRemainingMs</arg>
					</parameters>
					<returnValues>
						<arg type="string">prettyDuration</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function">
				<name>units_to_metres</name>
				<desc>Converts the specified units to metres.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">units</arg>
					</parameters>
					<returnValues>
						<arg type="float">metres</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>metres_to_units</name>
				<desc>Converts the specified metres to units.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">metres</arg>
					</parameters>
					<returnValues>
						<arg type="float">units</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>read_scene_file</name>
			<desc>
				Reads a scene from a file and returns the root data object. The table has the following members:\n
				* {{template_type|string}} identifier
				* {{template_type|table}} parameters
				* {{template_type|table}} children
			</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">sceneFileName</arg>
				</parameters>
				<returnValues>
					<arg type="table">sceneScriptData</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_world_direction_from_2d_coordinates</name>
			<desc>Returns the direction from the center of the near plane to the point on the far plane with the given uv coordinates (''Vector(0.5,0.5)'' being the center of the far plane).</desc>
			<lua></lua>
			<overload client="1">
				<parameters>
					<arg type="game.Camera">camera</arg>
					<arg type="int">width</arg>
					<arg type="int">height</arg>
					<arg type="math.Vector2">uv</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">worldDirection</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="math.Vector">forward</arg>
					<arg type="math.Vector">right</arg>
					<arg type="math.Vector">up</arg>
					<arg type="float">fov</arg>
					<arg type="float">nearZ</arg>
					<arg type="float">farZ</arg>
					<arg type="float">aspectRatio</arg>
					<arg type="int">width</arg>
					<arg type="int">height</arg>
					<arg type="math.Vector2">uv</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">worldDirection</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>fire_bullets</name>
			<desc>If ''hitReport'' is set to ''true'', the function will return a table of TraceResult objects, with one result for each fired bullet. If set to ''false'', ''nil'' will be returned.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="game.BulletInfo">bulletInfo</arg>
					<arg type="bool" default="false">hitReport</arg>
				</parameters>
				<returnValues>
					<arg type="table" subType="phys.RayCastResult">hitResults</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_giblet</name>
			<desc>Creates a giblet effect. If called serverside, this function will always return ''nil''.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="game.GibletCreateInfo">createInfo</arg>
				</parameters>
				<returnValues>
					<arg type="ents.ParticleSystemComponent">particle</arg>
				</returnValues>
			</overload>
		</function>
		<!-- serverside -->
		<function type="function" server="1">
			<name>create_explosion</name>
			<desc>Creates an explosion with damage and visual effects.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="util.SplashDamageInfo">splashDamageInfo</arg>
				</parameters>
			</overload>
		</function>
		<!-- serverside -->
		<!-- clientside -->
		<function type="function" client="1">
			<name>create_particle_tracer</name>
			<desc>Creates a bullet tracer effect.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">startPos</arg>
					<arg type="math.Vector">endPos</arg>
					<arg type="float" default="1.0">radius</arg>
					<arg type="util.Color" default="util.Color(255,255,90,255)">color</arg>
					<arg type="float" default="200.0">effectLength</arg>
					<arg type="float" default="6000.0">speed</arg>
					<arg type="string" default="&quot;particles/beam_tracer&quot;">material</arg>
					<arg type="float" default="0.25">bloomScale</arg>
				</parameters>
				<returnValues>
					<arg type="ents.ParticleSystemComponent">particle</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" client="1">
			<name>create_muzzle_flash</name>
			<desc>Creates a muzzle-flash effect.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="ents.Entity">sourceEntity</arg>
					<arg type="string">attachmentName</arg>
					<arg type="math.Vector" default="math.Vector()">position</arg>
					<arg type="math.Quaternion" default="math.Quaternion()">rotation</arg>
				</parameters>
				<returnValues>
					<arg type="ents.ParticleSystemComponent">particle</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="ents.Entity">sourceEntity</arg>
					<arg type="int">attachmentId</arg>
					<arg type="math.Vector" default="math.Vector()">position</arg>
					<arg type="math.Quaternion" default="math.Quaternion()">rotation</arg>
				</parameters>
				<returnValues>
					<arg type="ents.ParticleSystemComponent">particle</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="math.Vector">position</arg>
					<arg type="math.Quaternion">rotation</arg>
				</parameters>
				<returnValues>
					<arg type="ents.ParticleSystemComponent">particle</arg>
				</returnValues>
			</overload>
		</function>
		<!-- clientside -->
		<enum_set type="generic_constants" gui="1">
			<name>Sizeof</name>
			<enum value="1">SIZEOF_CHAR</enum>
			<enum value="1">SIZEOF_BOOL</enum>
			<enum value="4">SIZEOF_INT</enum>
			<enum value="4">SIZEOF_FLOAT</enum>
			<enum value="8">SIZEOF_DOUBLE</enum>
			<enum value="8">SIZEOF_LONG_LONG</enum>
			<enum value="8">SIZEOF_LONG_DOUBLE</enum>
			<enum value="12">SIZEOF_VECTOR3</enum>
			<enum value="8">SIZEOF_VECTOR2</enum>
			<enum value="16">SIZEOF_VECTOR4</enum>
			<enum value="12">SIZEOF_EULER_ANGLES</enum>
			<enum value="16">SIZEOF_QUATERNION</enum>
			<enum value="16">SIZEOF_MAT2</enum>
			<enum value="24">SIZEOF_MAT2X3</enum>
			<enum value="32">SIZEOF_MAT2X4</enum>
			<enum value="24">SIZEOF_MAT3X2</enum>
			<enum value="36">SIZEOF_MAT3</enum>
			<enum value="48">SIZEOF_MAT3X4</enum>
			<enum value="32">SIZEOF_MAT4X2</enum>
			<enum value="48">SIZEOF_MAT4X3</enum>
			<enum value="64">SIZEOF_MAT4</enum>
			<enum value="8">SIZEOF_VECTOR2I</enum>
			<enum value="12">SIZEOF_VECTORI</enum>
			<enum value="16">SIZEOF_VECTOR4I</enum>
		</enum_set>
		<enum_set>
			<name>VarType</name>
			<enum value="0">VAR_TYPE_INVALID</enum>
			<enum value="1">VAR_TYPE_BOOL</enum>
			<enum value="2">VAR_TYPE_DOUBLE</enum>
			<enum value="3">VAR_TYPE_FLOAT</enum>
			<enum value="4">VAR_TYPE_INT8</enum>
			<enum value="5">VAR_TYPE_INT16</enum>
			<enum value="6">VAR_TYPE_INT32</enum>
			<enum value="7">VAR_TYPE_INT64</enum>
			<enum value="8">VAR_TYPE_LONG_DOUBLE</enum>
			<enum value="9">VAR_TYPE_STRING</enum>
			<enum value="10">VAR_TYPE_UINT8</enum>
			<enum value="11">VAR_TYPE_UINT16</enum>
			<enum value="12">VAR_TYPE_UINT32</enum>
			<enum value="13">VAR_TYPE_UINT64</enum>
			<enum value="14">VAR_TYPE_EULER_ANGLES</enum>
			<enum value="15">VAR_TYPE_COLOR</enum>
			<enum value="16">VAR_TYPE_VECTOR</enum>
			<enum value="17">VAR_TYPE_VECTOR2</enum>
			<enum value="18">VAR_TYPE_VECTOR4</enum>
			<enum value="19">VAR_TYPE_ENTITY</enum>
			<enum value="20">VAR_TYPE_QUATERNION</enum>
		</enum_set>
		<enum_set gui="1">
			<name>EventReply</name>
			<enum value="0">EVENT_REPLY_UNHANDLED</enum>
			<enum value="1">EVENT_REPLY_HANDLED</enum>
		</enum_set>
	</collection>
</root>
