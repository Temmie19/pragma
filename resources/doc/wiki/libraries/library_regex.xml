<root>
	<collection type="library">
		<name>regex</name>
		<desc>TODO</desc>
		<function type="function">
			<name>match</name>
			<desc>Compares the subject against the given regex expression.</desc>
			<lua>
				local str = "abc"
				local pattern = "^\\d+$"
				local b,result = regex.match(str,pattern)
				if(b == true) then
					-- str is a (positive) number
				else
					-- str is not a (positive) number
				end
			</lua>
			<overload>
				<parameters>
					<arg type="string">subject</arg>
					<arg type="string">regex</arg>
					<arg type="regex.Match" default="regex.MATCH_DEFAULT | regex.FORMAT_DEFAULT">matchFlags</arg>
				</parameters>
				<returnValues>
					<arg type="bool">match</arg>
					<arg type="regex.Result">result</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>search</name>
			<desc>Tries to find a match in the given subject. False is returned if no match has been found, otherwise true. The [pragma:ref?regex.Result]RegexResult[/pragma:ref] object can be used to find multiple matches inside a string.</desc>
			<lua>
				local str = "FirstSearchResult|SecondSearchResult&amp;#($*%&amp;#&amp;ThirdSearchResult"
				local pattern = "[a-zA-Z0-9_-]{3,18}"

				local b,result = regex.search(str,pattern)
				local offset = 0
				while(b == true) do
					print(result:GetString())

					offset = offset +result:GetPosition() +result:GetLength()
					b,result = regex.search(str,pattern,offset)
				end
			</lua>
			<overload>
				<parameters>
					<arg type="string">subject</arg>
					<arg type="string">regex</arg>
					<arg type="int" default="0">offset</arg>
					<arg type="regex.Match" default="regex.MATCH_DEFAULT | regex.FORMAT_DEFAULT">matchFlags</arg>
				</parameters>
				<returnValues>
					<arg type="bool">match</arg>
					<arg type="regex.Result">result</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>replace</name>
			<desc>Replaces all found matches in the subject with the given replacement string and returns the result as a new string.</desc>
			<lua>
				local str = "Romanes eunt domus"
				local pattern = "[^a-z]+"
				local replace = "_"

				local str = regex.replace(str,pattern,replace)
				print(str) -- Prints "_omanes_eunt_domus"
			</lua>
			<overload>
				<parameters>
					<arg type="string">subject</arg>
					<arg type="string">regex</arg>
					<arg type="string">replace</arg>
					<arg type="regex.Match" default="regex.MATCH_DEFAULT | regex.FORMAT_DEFAULT">matchFlags</arg>
				</parameters>
				<returnValues>
					<arg type="string">newString</arg>
				</returnValues>
			</overload>
		</function>
		<enum_set type="flags">
			<name>Match</name>
			<enum value="0">MATCH_DEFAULT</enum>
			<enum value="1" type="bit">MATCH_NOT_BOL</enum>
			<enum value="2" type="bit">MATCH_NOT_EOL</enum>
			<enum value="4" type="bit">MATCH_NOT_BOW</enum>
			<enum value="8" type="bit">MATCH_NOT_EOW</enum>
			<enum value="16" type="bit">MATCH_ANY</enum>
			<enum value="32" type="bit">MATCH_NOT_NULL</enum>
			<enum value="64" type="bit">MATCH_CONTINUOUS</enum>
			<enum value="256" type="bit">MATCH_PREV_AVAIL</enum>
		</enum_set>
		<enum_set type="flags">
			<name>Format</name>
			<enum value="0">FORMAT_DEFAULT</enum>
			<enum value="1024" type="bit">FORMAT_SED</enum>
			<enum value="2048" type="bit">FORMAT_NO_COPY</enum>
			<enum value="4096" type="bit">FORMAT_FIRST_ONLY</enum>
		</enum_set>
	</collection>
</root>
