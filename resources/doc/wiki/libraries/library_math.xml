<root>
	<collection type="library" gui="1">
		<name>math</name>
		<desc>TODO</desc>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>abs</name>
			<desc>Returns the absolute value of ''x''. (integer/float)</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.abs</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">x</arg>
				</parameters>
				<returnValues>
					<arg type="float">absoluteValue</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>acos</name>
				<desc>Returns the arc cosine of ''x'' (in radians).</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.acos</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">acos</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>asin</name>
				<desc>Returns the arc sine of ''x'' (in radians).</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.asin</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">asin</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>atan</name>
				<desc>
					Returns the arc tangent of ''y''/''x'' (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of ''x'' being zero.)\n
					The default value for ''x'' is 1, so that the call ''math.atan(y)'' returns the arc tangent of ''y''.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.atan</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">y</arg>
						<arg type="float" default="1.0">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">atan</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>cos</name>
				<desc>Returns the cosine of ''x'' (assumed to be in radians).</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.cos</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">cos</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>sin</name>
				<desc>Returns the sine of ''x'' (assumed to be in radians).</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.sin</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">sin</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>tan</name>
				<desc>Returns the tangent of ''x'' (assumed to be in radians).</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.tan</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">tan</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>deg</name>
				<desc>Converts the angle ''x'' from radians to degrees.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.deg</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">deg</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>rad</name>
				<desc>Converts the angle ''x'' from degrees to radians.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.rad</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">rad</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>exp</name>
			<desc>Returns the value ''e''<sup>x</sup> (where ''e'' is the base of natural logarithms).</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.exp</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">x</arg>
				</parameters>
				<returnValues>
					<arg type="float">exp</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>floor</name>
				<desc>Returns the largest integral value smaller than or equal to ''x''.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.floor</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="int">floor</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>ceil</name>
				<desc>Returns the smallest integral value larger than or equal to ''x''.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.ceil</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="int">ceil</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>fmod</name>
			<desc>Returns the remainder of the division of ''x'' by ''y'' that rounds the quotient towards zero. (integer/float)</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.fmod</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">x</arg>
					<arg type="float">y</arg>
				</parameters>
				<returnValues>
					<arg type="float">remainder</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>log</name>
			<desc>Returns the logarithm of ''x'' in the given base. The default for ''base'' is ''e'' (so that the function returns the natural logarithm of ''x'').</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.log</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">x</arg>
					<arg type="float">base</arg>
				</parameters>
				<returnValues>
					<arg type="float">log</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="float">x</arg>
				</parameters>
				<returnValues>
					<arg type="float">log</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>max</name>
				<desc>Returns the argument with the maximum value, according to the Lua operator &lt;. (integer/float)</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.max</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float" variadic="1">values</arg>
					</parameters>
					<returnValues>
						<arg type="float">max</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>min</name>
				<desc>Returns the argument with the minimum value, according to the Lua operator &lt;. (integer/float)</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.min</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float" variadic="1">values</arg>
					</parameters>
					<returnValues>
						<arg type="float">min</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>modf</name>
			<desc>Returns the integral part of ''x'' and the fractional part of ''x''. Its second result is always a float.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.modf</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">x</arg>
				</parameters>
				<returnValues>
					<arg type="float">integral</arg>
					<arg type="float">fractional</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>sqrt</name>
			<desc>Returns the square root of ''x''. (You can also use the expression ''x''^0.5 to compute this value.)</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.sqrt</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">x</arg>
				</parameters>
				<returnValues>
					<arg type="float">sqrt</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>tointeger</name>
			<desc>If the value ''x'' is convertible to an integer, returns that integer. Otherwise, returns '''nil'''.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.tointeger</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="any">x</arg>
				</parameters>
				<returnValues>
					<arg type="int">integer</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>type</name>
			<desc>Returns "integer" if ''x'' is an integer, "float" if it is a float, or '''nil''' if ''x'' is not a number.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.type</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="any">x</arg>
				</parameters>
				<returnValues>
					<arg type="string">type</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1" vanilla="1">
			<name>ult</name>
			<desc>Returns a boolean, true if integer ''m'' is below integer ''n'' when they are compared as unsigned integers.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.ult</url>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="int">m</arg>
					<arg type="int">n</arg>
				</parameters>
				<returnValues>
					<arg type="bool">result</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>randomf</name>
				<desc>Returns a random float in the range [min,max].</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">min</arg>
						<arg type="float">max</arg>
					</parameters>
					<returnValues>
						<arg type="float">randomValue</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>random</name>
				<desc>
					When called without arguments, returns a pseudo-random float with uniform distribution in the range [0,1). When called with two integers ''m'' and ''n'', ''math.random'' returns a pseudo-random integer with uniform distribution in the range [m, n]. (The value ''n''-''m'' cannot be negative and must fit in a Lua integer.) The call ''math.random(n)'' is equivalent to ''math.random(1,n)''.\n
					This function is an interface to the underling pseudo-random generator function provided by C.
				</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.random</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">m</arg>
						<arg type="int">n</arg>
					</parameters>
					<returnValues>
						<arg type="int">random</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="int">m</arg>
					</parameters>
					<returnValues>
						<arg type="int">random</arg>
					</returnValues>
				</overload>
				<overload>
					<returnValues>
						<arg type="int">random</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1" vanilla="1">
				<name>randomseed</name>
				<desc>Sets ''x'' as the "seed" for the pseudo-random generator: equal seeds produce equal sequences of numbers.</desc>
				<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.randomseed</url>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">x</arg>
					</parameters>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1">
			<name>approach</name>
			<desc>Approaches the target value by the specified increment/decrement.</desc>
			<lua>
				local r = math.approach(0.1,0.5,0.6) -- r = 0.5
				r = math.approach(1.2,1.8,0.2) -- r = 1.4
				r = math.approach(3,-5,4) -- r = -1
			</lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
					<arg type="float">target</arg>
					<arg type="float">increment</arg>
				</parameters>
				<returnValues>
					<arg type="float">newValue</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>get_angle_difference</name>
				<desc>Returns the angular difference between the two given values.</desc>
				<lua>
					local a = 355
					local b = 1
					local r = math.get_angle_difference(a,b) -- Returns 6
				</lua>
				<overload>
					<parameters>
						<arg type="float">angle0</arg>
						<arg type="float">angle1</arg>
					</parameters>
					<returnValues>
						<arg type="float">angleDifference</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>approach_angle</name>
				<desc>Approaches angle b from angle a by the specified maximum amount.</desc>
				<lua>
					local a = 175
					local b = -170
					local r = math.approach_angle(a,b,6) -- Returns -179
				</lua>
				<overload>
					<parameters>
						<arg type="float">angle0</arg>
						<arg type="float">angle1</arg>
						<arg type="float">amount</arg>
					</parameters>
					<returnValues>
						<arg type="float">newAngle</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>normalize_angle</name>
				<desc>Forces the given angle into the range from the given base to base +360.</desc>
				<lua>
					local ang = 210
					ang = math.normalize_angle(ang) -- Returns -150
				</lua>
				<overload>
					<parameters>
						<arg type="float">angle</arg>
						<arg type="float" default="-180">base</arg>
					</parameters>
					<returnValues>
						<arg type="float">normalizedAngle</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>clamp_angle</name>
				<desc>Clams the ''ang'' within the angle range [''min'',''max''].</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">angle</arg>
						<arg type="float">min</arg>
						<arg type="float">max</arg>
					</parameters>
					<returnValues>
						<arg type="float">clampedAngle</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>is_angle_in_range</name>
				<desc>Returns ''true'' if the ''ang'' is within the angle range [''min'',''max''].</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">angle</arg>
						<arg type="float">min</arg>
						<arg type="float">max</arg>
					</parameters>
					<returnValues>
						<arg type="bool">inRange</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1">
			<name>perlin_noise</name>
			<desc>Calculates a perlin noise value from the given vector.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">vector</arg>
					<arg type="float">seed</arg>
				</parameters>
				<returnValues>
					<arg type="float">noise</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="math.Vector">vector</arg>
				</parameters>
				<returnValues>
					<arg type="float">noise</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1">
			<name>sign</name>
			<desc>Returns -1 if the given value is negative, and 1 otherwise.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
				</parameters>
				<returnValues>
					<arg type="int">sign</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1">
			<name>clamp</name>
			<desc>Clamps the given value to the min/max values.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
					<arg type="float">min</arg>
					<arg type="float">max</arg>
				</parameters>
				<returnValues>
					<arg type="int">clampedValue</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1">
			<name>lerp</name>
			<desc>Linearly interpolates between the values a and b by the specified scale amount.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">a</arg>
					<arg type="float">b</arg>
					<arg type="float">amount</arg>
				</parameters>
				<returnValues>
					<arg type="int">lerpedValue</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>get_next_power_of_2</name>
				<desc>Returns the next power of 2 after the specified value.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">value</arg>
					</parameters>
					<returnValues>
						<arg type="int">result</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>get_previous_power_of_2</name>
				<desc>Returns the previous power of 2 before the specified value.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">value</arg>
					</parameters>
					<returnValues>
						<arg type="int">result</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1">
			<name>round</name>
			<desc>Rounds the specified value to the nearest integer.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
				</parameters>
				<returnValues>
					<arg type="int">roundedValue</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1">
			<name>snap_to_grid</name>
			<desc>Snaps the given value to the specified grid size.</desc>
			<lua>
				local v = math.snap_to_grid(7.5,16)
				print(v) -- Prints '0'
				v = math.snap_to_grid(8,16)
				print(v) -- Prints '16'
				v = math.snap_to_grid(-22,16)
				print(v) -- Prints '-16'
			</lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
					<arg type="int" default="1">gridSize</arg>
				</parameters>
				<returnValues>
					<arg type="int">snappedValue</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>calc_hermite_spline</name>
				<desc>
					Calculates a hermite spline curve from the given points and returns a ''table'' with ''segmentCount''-elements of points for the curve.\n
					The curve will be created between ''p1'' and ''p2'', ''p0'' is the previous point on the path (Use the same argument as ''p1'' if no previous point exists) and ''p3'' is the next point on the curve (Use the same argument as ''p2'' if ''p2'' is the last point on the path.).\n
					''curvature'' describes the intensity of the curve. A value of ''0.0'' would create a straight path (Making the function useless), ''2.0'' would be a greatly exaggerated curve.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">p0</arg>
						<arg type="math.Vector">p1</arg>
						<arg type="math.Vector">p2</arg>
						<arg type="math.Vector">p3</arg>
						<arg type="int">segmentCount</arg>
						<arg type="float" default="1.0">curvature</arg>
					</parameters>
					<returnValues>
						<arg type="table" subType="math.Vector">curvePoints</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>calc_hermite_spline_position</name>
				<desc>
					Calculates a position on hermite spline curve between the points ''p1'' and ''p2''. s is a value in the range [0,1], with ''0'' being at the start (''p1'') and ''1'' being at the end (''p2'').\n
					''curvature'' describes the intensity of the curve. A value of ''0.0'' would create a straight path (Making the function useless), ''2.0'' would be a greatly exaggerated curve.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">p0</arg>
						<arg type="math.Vector">p1</arg>
						<arg type="math.Vector">p2</arg>
						<arg type="math.Vector">p3</arg>
						<arg type="float">s</arg>
						<arg type="float" default="1.0">curvature</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">position</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1">
				<name>smooth_step</name>
				<desc>Calculates a [pragma:ref?https://en.wikipedia.org/wiki/Smoothstep]smoothstep[/pragma:ref] value.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">edge0</arg>
						<arg type="float">edge1</arg>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">smoothValue</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>smoother_step</name>
				<desc>Calculates a [pragma:ref?https://en.wikipedia.org/wiki/Smoothstep#Variations]smootherstep[/pragma:ref] value.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">edge0</arg>
						<arg type="float">edge1</arg>
						<arg type="float">x</arg>
					</parameters>
					<returnValues>
						<arg type="float">smoothValue</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1">
			<name>is_in_range</name>
			<desc>Returns ''true'' if the specified ''val'' is within the range [''min'',''max''].</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">value</arg>
					<arg type="float">min</arg>
					<arg type="float">max</arg>
				</parameters>
				<returnValues>
					<arg type="bool">inRange</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function" shared="1" gui="1">
			<name>normalize_uv_coordinates</name>
			<desc>Moves the UV coordinates into a normalized [0,1] range.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector2">uvCoordinates</arg>
				</parameters>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>solve_quadric</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">c0</arg>
						<arg type="float">c1</arg>
						<arg type="float">c2</arg>
					</parameters>
					<returnValues>
						<arg type="float">result0</arg>
						<arg type="float">result1</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>solve_cubic</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">c0</arg>
						<arg type="float">c1</arg>
						<arg type="float">c2</arg>
						<arg type="float">c3</arg>
					</parameters>
					<returnValues>
						<arg type="float">result0</arg>
						<arg type="float">result1</arg>
						<arg type="float">result2</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>solve_quartic</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">c0</arg>
						<arg type="float">c1</arg>
						<arg type="float">c2</arg>
						<arg type="float">c3</arg>
						<arg type="float">c4</arg>
					</parameters>
					<returnValues>
						<arg type="float">result0</arg>
						<arg type="float">result1</arg>
						<arg type="float">result2</arg>
						<arg type="float">result3</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1">
				<name>calc_ballistic_range</name>
				<desc>Returns the maximum ballistic range for a projectile launched with the specified ''speed''.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">speed</arg>
						<arg type="float">gravity</arg>
						<arg type="float">initialHeight</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">ballisticRange</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>calc_ballistic_position</name>
				<desc>Calculates the position on a projectile trajectory at time ''t''.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">start</arg>
						<arg type="math.Vector">velocity</arg>
						<arg type="float">gravity</arg>
						<arg type="float">t</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">ballisticPosition</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>calc_ballistic_velocity</name>
				<desc>
					Calculates the velocity required to launch a projectile from position ''start'' to position ''endPos'' at the specified launch ''angle''.\n
					If no solution exists, ''nil'' will be returned.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">start</arg>
						<arg type="math.Vector">endPos</arg>
						<arg type="float">angle</arg>
						<arg type="float">gravity</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">ballisticVelocity</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>calc_ballistic_time_of_flight</name>
				<desc>Calculates the flight time required to reach the specified destination if a projectile is launched from ''start''.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">start</arg>
						<arg type="float">launchAngle</arg>
						<arg type="float">velocity</arg>
						<arg type="float">gravity</arg>
					</parameters>
					<returnValues>
						<arg type="float">timeOfFlight</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">start</arg>
						<arg type="float">velocity</arg>
						<arg type="float">gravity</arg>
					</parameters>
					<returnValues>
						<arg type="float">timeOfFlight</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">start</arg>
						<arg type="math.Vector">end</arg>
						<arg type="float">launchAngle</arg>
						<arg type="float">velocity</arg>
						<arg type="float">gravity</arg>
					</parameters>
					<returnValues>
						<arg type="float">timeOfFlight</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">start</arg>
						<arg type="math.Vector">end</arg>
						<arg type="float">velocity</arg>
						<arg type="float">gravity</arg>
					</parameters>
					<returnValues>
						<arg type="float">timeOfFlight</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>calc_ballistic_angle_of_reach</name>
				<desc>Returns the angle at which a projectile must be launched from ''start'' to reach the specified ''distance''.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">start</arg>
						<arg type="float">distance</arg>
						<arg type="float">initialVelocity</arg>
						<arg type="float">gravity</arg>
					</parameters>
					<returnValues>
						<arg type="float">angleOfReach</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>solve_ballistic_arc</name>
				<desc>
					Calculates possible velocities for the specified projectile arc. The first result is the number of solutions, which can be either ''0'', ''1'', or ''2'' (Low angle and high angle). Each solution is then returned as a [pragma:ref]math.Vector[/pragma:ref].\n
					''targetVel'' can be provided if the target is currently moving.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">projPos</arg>
						<arg type="float">projSpeed</arg>
						<arg type="math.Vector">tgt</arg>
						<arg type="math.Vector">targetVel</arg>
						<arg type="float">gravity</arg>
					</parameters>
					<returnValues>
						<arg type="int">solutionCount</arg>
						<arg type="math.Vector">solution0</arg>
						<arg type="math.Vector">solution1</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>solve_ballistic_arc_lateral</name>
				<desc>
					Calculates possible velocities for the specified projectile arc. If no solution has been found, ''nil'' will be returned.\n
					If there is a solution, and ''targetVelocity'' was provided, the function will return the ''fireVelocity'', ''gravity'' and the ''impactPoint''.\n
					If no ''targetVelocity'' was provided, the function will return only the ''fireVelocity'' and the ''gravity''.
				</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">projPos</arg>
						<arg type="float">lateralSpeed</arg>
						<arg type="math.Vector">targetPos</arg>
						<arg type="math.Vector">targetVel</arg>
						<arg type="float">maxHeightOffset</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">fireVelocity</arg>
						<arg type="float">gravity</arg>
						<arg type="math.Vector">impactPoint</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">projPos</arg>
						<arg type="float">lateralSpeed</arg>
						<arg type="math.Vector">targetPos</arg>
						<arg type="float">maxHeightOffset</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">fireVelocity</arg>
						<arg type="float">gravity</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function" shared="1" gui="1">
			<name>max_abs</name>
			<desc>Returns the largest of the specified values while disregarding the sign.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float" variadic="1">values</arg>
				</parameters>
				<returnValues>
					<arg type="float">absMaxValue</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function" shared="1" gui="1">
				<name>ease_in</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">value</arg>
						<arg type="math.EaseType" default="math.EASE_TYPE_LINEAR">type</arg>
					</parameters>
					<returnValues>
						<arg type="float">easedValue</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>ease_out</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">value</arg>
						<arg type="math.EaseType" default="math.EASE_TYPE_LINEAR">type</arg>
					</parameters>
					<returnValues>
						<arg type="float">easedValue</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>ease_in_out</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">value</arg>
						<arg type="math.EaseType" default="math.EASE_TYPE_LINEAR">type</arg>
					</parameters>
					<returnValues>
						<arg type="float">easedValue</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<group>
			<function type="function" shared="1" gui="1">
				<name>is_nan</name>
				<desc>Returns ''true'' if the specified value is NaN.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">value</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isNan</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>is_inf</name>
				<desc>Returns ''true'' if the specified value is infinite.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">value</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isInfinite</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function" shared="1" gui="1">
				<name>is_finite</name>
				<desc>Returns ''true'' if the specified value is finite (i.e. not infinite and not NaN).</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">value</arg>
					</parameters>
					<returnValues>
						<arg type="bool">isFinite</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<enum_set gui="1">
			<name>EaseType</name>
			<enum value="0">EASE_TYPE_BACK</enum>
			<enum value="1">EASE_TYPE_BOUNCE</enum>
			<enum value="2">EASE_TYPE_CIRCULAR</enum>
			<enum value="3">EASE_TYPE_CUBIC</enum>
			<enum value="4">EASE_TYPE_ELASTIC</enum>
			<enum value="5">EASE_TYPE_EXPONENTIAL</enum>
			<enum value="6">EASE_TYPE_LINEAR</enum>
			<enum value="7">EASE_TYPE_QUADRATIC</enum>
			<enum value="8">EASE_TYPE_QUARTIC</enum>
			<enum value="9">EASE_TYPE_QUINTIC</enum>
			<enum value="10">EASE_TYPE_SINE</enum>
		</enum_set>
		<enum_set type="generic_constants" gui="1">
			<name>Max</name>
			<enum value="127">MAX_SINT8</enum>
			<enum value="-128">MIN_SINT8</enum>
			<enum value="255">MAX_UINT8</enum>
			<enum value="0">MIN_UINT8</enum>
			<enum value="32767">MAX_SINT16</enum>
			<enum value="-32768">MIN_SINT16</enum>
			<enum value="65535">MAX_UINT16</enum>
			<enum value="0">MIN_UINT16</enum>
			<enum value="2147483647">MAX_SINT32</enum>
			<enum value="-2147483648">MIN_SINT32</enum>
			<enum value="4294967295">MAX_UINT32</enum>
			<enum value="0">MIN_UINT32</enum>
			<enum value="9223372036854775807">MAX_SINT64</enum>
			<enum value="-9223372036854775808">MIN_SINT64</enum>
			<enum value="18446744073709551615">MAX_UINT64</enum>
			<enum value="0">MIN_UINT64</enum>
			<enum value="3.40282e+38">MAX_FLOAT</enum>
			<enum value="-3.40282e+38">MIN_FLOAT</enum>
			<enum value="1.79769e+308">MAX_DOUBLE</enum>
			<enum value="-1.79769e+308">MIN_DOUBLE</enum>
			<enum value="1.79769e+308">MAX_LONG_DOUBLE</enum>
			<enum value="-1.79769e+308">MIN_LONG_DOUBLE</enum>
		</enum_set>
		<enum_set>
			<name>RotationOrder</name>
			<enum value="0">ROTATION_ORDER_XYZ</enum>
			<enum value="1">ROTATION_ORDER_YXZ</enum>
			<enum value="2">ROTATION_ORDER_XZX</enum>
			<enum value="3">ROTATION_ORDER_XYX</enum>
			<enum value="4">ROTATION_ORDER_YXY</enum>
			<enum value="5">ROTATION_ORDER_YZY</enum>
			<enum value="6">ROTATION_ORDER_ZYZ</enum>
			<enum value="7">ROTATION_ORDER_ZXZ</enum>
			<enum value="8">ROTATION_ORDER_XZY</enum>
			<enum value="9">ROTATION_ORDER_YZX</enum>
			<enum value="10">ROTATION_ORDER_ZYX</enum>
			<enum value="11">ROTATION_ORDER_ZXY</enum>
		</enum_set>
		<enum_set>
			<name>Axis</name>
			<enum value="0">AXIS_X</enum>
			<enum value="1">AXIS_Y</enum>
			<enum value="2">AXIS_Z</enum>
		</enum_set>
		<member type="float" mode="r" shared="1" gui="1" vanilla="1">
			<name>huge</name>
			<desc>The float value ''HUGE_VAL'', a value larger than any other numeric value.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.huge</url>
		</member>
		<member type="int" mode="r" shared="1" gui="1" vanilla="1">
			<name>maxinteger</name>
			<desc>An integer with the maximum value for an integer.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.maxinteger</url>
		</member>
		<member type="int" mode="r" shared="1" gui="1" vanilla="1">
			<name>mininteger</name>
			<desc>An integer with the minimum value for an integer.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.mininteger</url>
		</member>
		<member type="float" mode="r" shared="1" gui="1" vanilla="1">
			<name>pi</name>
			<desc>The value of ''π''.</desc>
			<url>http://www.lua.org/manual/5.3/manual.html#pdf-math.mininteger</url>
		</member>
	</collection>
</root>
