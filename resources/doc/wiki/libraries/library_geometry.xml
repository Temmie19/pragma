<root>
	<collection type="library">
		<name>geometry</name>
		<desc>TODO</desc>
		<group>
			<function type="function">
				<name>closest_point_on_aabb_to_point</name>
				<desc>Returns the closest point within the AABB to the specified point.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
						<arg type="math.Vector">point</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">closestPoint</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>closest_points_between_lines</name>
				<desc>Returns the closest points for each line towards the other line, as well as the dot product between the two.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">line0Start</arg>
						<arg type="math.Vector">line0End</arg>
						<arg type="math.Vector">line1Start</arg>
						<arg type="math.Vector">line1End</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">closestPointOnLine0</arg>
						<arg type="math.Vector">closestPointOnLine1</arg>
						<arg type="float">angle</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>closest_point_on_plane_to_point</name>
				<desc>Returns the closest point within the plane to the specified point.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">planeNormal</arg>
						<arg type="float">planeDistance</arg>
						<arg type="math.Vector">point</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">closestPoint</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>closest_point_on_triangle_to_point</name>
				<desc>Returns the closest point on the triangle to the specified point.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">triVert0</arg>
						<arg type="math.Vector">triVert1</arg>
						<arg type="math.Vector">triVert2</arg>
						<arg type="math.Vector">point</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">closestPoint</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>closest_point_on_line_to_point</name>
				<desc>Returns the closest point on the specified line to the given point. If ''clampResultToSegment'' is set to ''true'', the line defined by ''lineStart'' and ''lineEnd'' will be treated as a line '''segment'''.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">lineStart</arg>
						<arg type="math.Vector">lineEnd</arg>
						<arg type="math.Vector">point</arg>
						<arg type="bool" default="true">clampResultToSegment</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">closestPoint</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>closest_point_on_sphere_to_line</name>
				<desc>Returns the closest point within the given sphere to the specified line. If ''clampResultToSegment'' is set to ''true'', the line defined by ''lineStart'' and ''lineEnd'' will be treated as a line segment.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">sphereOrigin</arg>
						<arg type="float">sphereRadius</arg>
						<arg type="math.Vector">lineStart</arg>
						<arg type="math.Vector">lineEnd</arg>
						<arg type="bool" default="true">clampResultToSegment</arg>
					</parameters>
					<returnValues>
						<arg type="math.Vector">closestPoint</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>smallest_enclosing_sphere</name>
			<desc>Returns the origin and radius of the smallest possible sphere which still encompasses all given points.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="table" subType="math.Vector">vertices</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">sphereOrigin</arg>
					<arg type="float">sphereRadius</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>get_triangle_winding_order</name>
			<desc>Returns the triangle winding order.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">vertex0</arg>
					<arg type="math.Vector">vertex1</arg>
					<arg type="math.Vector">vertex2</arg>
					<arg type="math.Vector">normal</arg>
				</parameters>
				<returnValues>
					<arg type="geometry.WindingOrder">windingOrder</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="math.Vector2">vertex0</arg>
					<arg type="math.Vector2">vertex1</arg>
					<arg type="math.Vector2">vertex2</arg>
				</parameters>
				<returnValues>
					<arg type="geometry.WindingOrder">windingOrder</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>generate_truncated_cone_mesh</name>
			<desc>
				Generates a truncated cone and returns a table of its vertices.\n
				If ''bCaps'' is set to ''false'', the generated cone won't have caps on the sides.\n
				If ''bGenerateTriangles'' is set to ''true'', an additional table will be returned, containing the triangle indices.\n
				If ''bGenerateNormals'' is set to ''true'', an additional table will be returned, containing the normals for the cone.\n
				''segmentCount'' specifies the smoothness of the cone.
			</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">origin</arg>
					<arg type="float">startRadius</arg>
					<arg type="math.Vector">direction</arg>
					<arg type="float">endRadius</arg>
					<arg type="int" default="12">segmentCount</arg>
					<arg type="bool" default="true">caps</arg>
					<arg type="bool" default="true">generateTriangles</arg>
					<arg type="bool" default="false">generateNormals</arg>
				</parameters>
				<returnValues>
					<arg type="table" subType="math.Vector">vertices</arg>
					<arg type="table" subType="int">triangles</arg>
					<arg type="table" subType="math.Vector">normals</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_face_normal</name>
			<desc>Calculates the normal for a triangle face.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">vertex0</arg>
					<arg type="math.Vector">vertex1</arg>
					<arg type="math.Vector">vertex2</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">faceNormal</arg>
				</returnValues>
			</overload>
		</function>
		<group>
			<function type="function">
				<name>calc_volume_of_triangle</name>
				<desc>Calculates the volume of the specified triangle.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">vertex0</arg>
						<arg type="math.Vector">vertex1</arg>
						<arg type="math.Vector">vertex2</arg>
					</parameters>
					<returnValues>
						<arg type="float">volume</arg>
					</returnValues>
				</overload>
			</function>
			<function type="function">
				<name>calc_volume_of_polyhedron</name>
				<desc>Calculates the volume of the specified polyhedron.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="table" subType="math.Vector">vertices</arg>
						<arg type="table" subType="int">triangles</arg>
					</parameters>
					<returnValues>
						<arg type="float">volume</arg>
					</returnValues>
				</overload>
			</function>
		</group>
		<function type="function">
			<name>calc_center_of_mass</name>
			<desc>Calculates the center of mass, as well as the volume, for the specified polyhedron.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="table" subType="math.Vector">vertices</arg>
					<arg type="table" subType="int">triangles</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">centerOfMass</arg>
					<arg type="float">volume</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_barycentric_coordinates</name>
			<desc>Calculates the barycentric coordinates for a point on a triangle.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">p0</arg>
					<arg type="math.Vector2">uv0</arg>
					<arg type="math.Vector">p1</arg>
					<arg type="math.Vector2">uv1</arg>
					<arg type="math.Vector">p2</arg>
					<arg type="math.Vector2">uv2</arg>
					<arg type="math.Vector">hitPoint</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector2">barycentricCoordinates</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="math.Vector">p0</arg>
					<arg type="math.Vector">p1</arg>
					<arg type="math.Vector">p2</arg>
					<arg type="math.Vector">hitPoint</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector2">barycentricCoordinates</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_rotation_between_planes</name>
			<desc>Calculates the rotation between two planes.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">planeNormal0</arg>
					<arg type="math.Vector">planeNormal1</arg>
				</parameters>
				<returnValues>
					<arg type="math.Quaternion">rotation</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>get_side_of_point_to_line</name>
			<desc>Returns which side the point is on in relation to the specified line.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector2">lineStart</arg>
					<arg type="math.Vector2">lineEnd</arg>
					<arg type="math.Vector2">point</arg>
				</parameters>
				<returnValues>
					<arg type="geometry.LineSide">side</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>get_side_of_point_to_plane</name>
			<desc>Returns which side the point is on in relation to the specified plane.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">planeNormal</arg>
					<arg type="float">planeDistance</arg>
					<arg type="math.Vector">point</arg>
				</parameters>
				<returnValues>
					<arg type="geometry.PlaneSide">side</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>get_outline_vertices</name>
			<desc>Returns the indices of the vertices that make up the specified poly in sequential order.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="table" subType="math.Vector2">vertices</arg>
				</parameters>
				<returnValues>
					<arg type="table" subType="int">outlineIndices</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>triangulate</name>
			<desc>Generates a set of triangles which fill out a contour of 2d vectors.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="table" subType="math.Vector2">contour</arg>
				</parameters>
				<returnValues>
					<arg type="table" subType="int">triangles</arg>
				</returnValues>
			</overload>
		</function>
		<enum_set>
			<name>LineSide</name>
			<enum value="0">LINE_SIDE_LEFT</enum>
			<enum value="1">LINE_SIDE_RIGHT</enum>
			<enum value="2">LINE_SIDE_ON_LINE</enum>
		</enum_set>
		<enum_set>
			<name>PlaneSide</name>
			<enum value="0">PLANE_SIDE_FRONT</enum>
			<enum value="1">PLANE_SIDE_BACK</enum>
			<enum value="2">PLANE_SIDE_ON_PLANE</enum>
		</enum_set>
		<enum_set>
			<name>WindingOrder</name>
			<enum value="0">WINDING_ORDER_CLOCKWISE</enum>
			<enum value="1">WINDING_ORDER_COUNTER_CLOCKWISE</enum>
		</enum_set>
		<enum_set client="1">
			<name>FrustumPlane</name>
			<enum value="0">FRUSTUM_PLANE_LEFT</enum>
			<enum value="1">FRUSTUM_PLANE_RIGHT</enum>
			<enum value="2">FRUSTUM_PLANE_TOP</enum>
			<enum value="3">FRUSTUM_PLANE_BOTTOM</enum>
			<enum value="4">FRUSTUM_PLANE_NEAR</enum>
			<enum value="5">FRUSTUM_PLANE_FAR</enum>
			<enum value="6">FRUSTUM_PLANE_COUNT</enum>
		</enum_set>
		<enum_set client="1">
			<name>FrustumPoint</name>
			<enum value="0">FRUSTUM_POINT_FAR_BOTTOM_LEFT</enum>
			<enum value="1">FRUSTUM_POINT_FAR_TOP_LEFT</enum>
			<enum value="2">FRUSTUM_POINT_FAR_TOP_RIGHT</enum>
			<enum value="3">FRUSTUM_POINT_FAR_BOTTOM_RIGHT</enum>
			<enum value="4">FRUSTUM_POINT_NEAR_BOTTOM_LEFT</enum>
			<enum value="5">FRUSTUM_POINT_NEAR_TOP_LEFT</enum>
			<enum value="6">FRUSTUM_POINT_NEAR_TOP_RIGHT</enum>
			<enum value="7">FRUSTUM_POINT_NEAR_BOTTOM_RIGHT</enum>
		</enum_set>
	</collection>
</root>
