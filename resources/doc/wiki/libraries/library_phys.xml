<root>
	<collection type="library">
		<name>phys</name>
		<desc>TODO</desc>
		<function type="function">
			<name>create_convex_hull_shape</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="phys.ConvexHullShape">hullShape</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_box_shape</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">halfExtents</arg>
				</parameters>
				<returnValues>
					<arg type="phys.ConvexShape">shape</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_capsule_shape</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">halfWidth</arg>
					<arg type="float">halfHeight</arg>
				</parameters>
				<returnValues>
					<arg type="phys.ConvexShape">shape</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_sphere_shape</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">radius</arg>
				</parameters>
				<returnValues>
					<arg type="phys.ConvexShape">shape</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_cylinder_shape</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">radius</arg>
					<arg type="float">height</arg>
				</parameters>
				<returnValues>
					<arg type="phys.ConvexShape">shape</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_torus_shape</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="int">subDivisions</arg>
					<arg type="float">outerRadius</arg>
					<arg type="float">innerRadius</arg>
				</parameters>
				<returnValues>
					<arg type="phys.CompoundShape">shape</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_heightfield_terrain_shape</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="int">width</arg>
					<arg type="int">height</arg>
					<arg type="float">maxHeight</arg>
					<arg type="int">upAxis</arg>
				</parameters>
				<returnValues>
					<arg type="phys.Heightfield">heightField</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_rigid_body</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="float">mass</arg>
					<arg type="phys.Shape">shape</arg>
					<arg type="math.Vector">localInertia</arg>
				</parameters>
				<returnValues>
					<arg type="phys.RigidBody">rigidBody</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_ghost_object</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.Shape">shape</arg>
				</parameters>
				<returnValues>
					<arg type="phys.CollisionObj">rigidBody</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_fixed_constraint</name>
			<desc>Creates a fixed constraint.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RigidBody">rigidBody0</arg>
					<arg type="math.Vector">pivot0</arg>
					<arg type="math.Quaternion">rotation0</arg>
					<arg type="phys.RigidBody">rigidBody1</arg>
					<arg type="math.Vector">pivot1</arg>
					<arg type="math.Quaternion">rotation1</arg>
				</parameters>
				<returnValues>
					<arg type="phys.FixedConstraint">constraint</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_ballsocket_constraint</name>
			<desc>Creates a ball socket constraint.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RigidBody">rigidBody0</arg>
					<arg type="math.Vector">pivot0</arg>
					<arg type="phys.RigidBody">rigidBody1</arg>
					<arg type="math.Vector">pivot1</arg>
				</parameters>
				<returnValues>
					<arg type="phys.BallSocketConstraint">constraint</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_hinge_constraint</name>
			<desc>Creates a hinge constraint.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RigidBody">rigidBody0</arg>
					<arg type="math.Vector">pivot0</arg>
					<arg type="phys.RigidBody">rigidBody1</arg>
					<arg type="math.Vector">pivot1</arg>
					<arg type="math.Vector">axis</arg>
				</parameters>
				<returnValues>
					<arg type="phys.HingeConstraint">constraint</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_slider_constraint</name>
			<desc>Creates a slider constraint.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RigidBody">rigidBody0</arg>
					<arg type="math.Vector">pivot0</arg>
					<arg type="math.Quaternion">rotation0</arg>
					<arg type="phys.RigidBody">rigidBody1</arg>
					<arg type="math.Vector">pivot1</arg>
					<arg type="math.Quaternion">rotation1</arg>
				</parameters>
				<returnValues>
					<arg type="phys.SliderConstraint">constraint</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_conetwist_constraint</name>
			<desc>Creates a cone twist constraint.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RigidBody">rigidBody0</arg>
					<arg type="math.Vector">pivot0</arg>
					<arg type="math.Quaternion">rotation0</arg>
					<arg type="phys.RigidBody">rigidBody1</arg>
					<arg type="math.Vector">pivot1</arg>
					<arg type="math.Quaternion">rotation1</arg>
				</parameters>
				<returnValues>
					<arg type="phys.ConeTwistConstraint">constraint</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_dof_constraint</name>
			<desc>Creates a 6 degrees of freedom constraint.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RigidBody">rigidBody0</arg>
					<arg type="math.Vector">pivot0</arg>
					<arg type="math.Quaternion">rotation0</arg>
					<arg type="phys.RigidBody">rigidBody1</arg>
					<arg type="math.Vector">pivot1</arg>
					<arg type="math.Quaternion">rotation1</arg>
				</parameters>
				<returnValues>
					<arg type="phys.DoFConstraint">constraint</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>create_surface_material</name>
			<desc>Creates a new surface material.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">name</arg>
					<arg type="float">friction</arg>
					<arg type="float">restitution</arg>
				</parameters>
				<returnValues>
					<arg type="game.SurfaceMaterial">surfaceMaterial</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>get_surface_material</name>
			<desc>Returns the surface material associated with the given name or index, or ''nil'' if none was found.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="string">name</arg>
				</parameters>
				<returnValues>
					<arg type="game.SurfaceMaterial">surfaceMaterial</arg>
				</returnValues>
			</overload>
			<overload>
				<parameters>
					<arg type="int">index</arg>
				</parameters>
				<returnValues>
					<arg type="game.SurfaceMaterial">surfaceMaterial</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>get_surface_materials</name>
			<desc>Returns a table of all registered surface materials.</desc>
			<lua></lua>
			<overload>
				<returnValues>
					<arg type="table" subType="game.SurfaceMaterial">surfaceMaterial</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>raycast</name>
			<desc>
				Casts a ray using the given data. The result type depends on various things:\n
				* If no hits were detected, false will be returned\n
				* If phys.FTRACE_ALL_HITS was specified in the flags and at least one hit was detected, a table of TraceResult objects will be returned\n
				* Otherwise a single TraceResult object will be returned
			</desc>
			<lua>
				<desc>The ray will hit anything but NPCs and the local player. All hits will be returned, not just the closest one, due to the specified flags.</desc>
				<code>
					local pl = ents.get_local_player()
					local pos = pl:GetEyePos()
					local dir = pl:GetViewForward()
					local dist = 2048
					local flags = FTRACE_FILTER_INVERT | FTRACE_ALL_HITS
					local masks = COLLISIONMASK_NPC
					local data = TraceData()
					data:SetSource(pos) -- Start Position of the ray
					data:SetTarget(pos +dir *dist) -- End Position
					data:SetFlags(flags)
					data:SetCollisionMasks(masks)
					data:SetFilter({pl})
					local r = game.raycast(data)
					if(r == false) then print("RayCast didn't hit!")
					else
						print(#r .. " hits have been found:")
						for _,v in ipairs(r) do
							print("Hit: " .. tostring(v.hit))
							print("Entity: " .. v.entity:GetClass())
							print("Fraction: " .. tostring(v.fraction))
							print("Distance: " .. tostring(v.distance))
							print("Position: " .. tostring(v.position))
							print("Normal: " .. tostring(v.normal))
							debugoverlay.draw_line(pos,v.position,Color(255,0,0,255),12)
						end
					end
				</code>
			</lua>
			<overload>
				<parameters>
					<arg type="phys.RayCastData">raycastData</arg>
				</parameters>
				<returnValues>
					<arg type="bool">hit</arg>
					<arg type="phys.RayCastResult">result</arg>
					<arg type="table" subType="phys.RayCastResult">result</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>sweep</name>
			<desc>Performs a sweep using the given data. To perform a sweep, you have to specify a Entity, PhysObj, PhysShape or PhysCollisionObj as source. You cannot use phys.FTRACE_ALL_HITS with this function.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RayCastData">raycastData</arg>
				</parameters>
				<returnValues>
					<arg type="bool">hit</arg>
					<arg type="phys.RayCastResult">result</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>overlap</name>
			<desc>Performs an overlap check using the given data. To perform an overlap check, you have to specify a Entity, PhysObj, PhysShape or PhysCollisionObject as source. You cannot use phys.FTRACE_ALL_HITS with this function.</desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="phys.RayCastData">raycastData</arg>
				</parameters>
				<returnValues>
					<arg type="bool">hit</arg>
					<arg type="phys.RayCastResult">result</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_torque_from_angular_velocity</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">angularVelocity</arg>
					<arg type="math.Mat3">invInertiaTensor</arg>
					<arg type="float">delta</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">torque</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_angular_velocity_from_torque</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">torque</arg>
					<arg type="math.Mat3">invInertiaTensor</arg>
					<arg type="float">delta</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">angularVelocity</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_force_from_linear_velocity</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">linearVelocity</arg>
					<arg type="float">mass</arg>
					<arg type="float">delta</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">force</arg>
				</returnValues>
			</overload>
		</function>
		<function type="function">
			<name>calc_linear_velocity_from_force</name>
			<desc></desc>
			<lua></lua>
			<overload>
				<parameters>
					<arg type="math.Vector">force</arg>
					<arg type="float">mass</arg>
					<arg type="float">delta</arg>
				</parameters>
				<returnValues>
					<arg type="math.Vector">linearVelocity</arg>
				</returnValues>
			</overload>
		</function>
		<enum_set>
			<name>ActivationState</name>
			<enum value="1">ACTIVATION_STATE_ACTIVE_TAG</enum>
			<enum value="2">ACTIVATION_STATE_ISLAND_SLEEPING</enum>
			<enum value="3">ACTIVATION_STATE_WANTS_DEACTIVATION</enum>
			<enum value="4">ACTIVATION_STATE_DISABLE_DEACTIVATION</enum>
			<enum value="5">ACTIVATION_STATE_DISABLE_SIMULATION</enum>
		</enum_set>
		<enum_set>
			<name>Type</name>
			<enum value="0">TYPE_NONE</enum>
			<enum value="1">TYPE_DYNAMIC</enum>
			<enum value="2">TYPE_STATIC</enum>
			<enum value="3">TYPE_SOFTBODY</enum>
			<enum value="4">TYPE_BOXCONTROLLER</enum>
			<enum value="5">TYPE_CAPSULECONTROLLER</enum>
		</enum_set>
		<enum_set type="flags">
			<name>CollisionMask</name>
			<enum value="0">COLLISIONMASK_NONE</enum>
			<enum value="1" type="bit">COLLISIONMASK_STATIC</enum>
			<enum value="2" type="bit">COLLISIONMASK_DYNAMIC</enum>
			<enum value="4" type="bit">COLLISIONMASK_GENERIC</enum>
			<enum value="8" type="bit">COLLISIONMASK_PLAYER</enum>
			<enum value="16" type="bit">COLLISIONMASK_NPC</enum>
			<enum value="32" type="bit">COLLISIONMASK_VEHICLE</enum>
			<enum value="64" type="bit">COLLISIONMASK_ITEM</enum>
			<enum value="4095">COLLISIONMASK_ALL</enum>
			<enum value="4096" type="bit">COLLISIONMASK_DEFAULT</enum>
			<enum value="128" type="bit">COLLISIONMASK_PARTICLE</enum>
			<enum value="256" type="bit">COLLISIONMASK_CHARACTER</enum>
			<enum value="512" type="bit">COLLISIONMASK_TRIGGER</enum>
			<enum value="1024" type="bit">COLLISIONMASK_WATER</enum>
			<enum value="2048" type="bit">COLLISIONMASK_WATER_SURFACE</enum>
			<enum value="8192" type="bit">COLLISIONMASK_PLAYER_HITBOX</enum>
			<enum value="16384" type="bit">COLLISIONMASK_NPC_HITBOX</enum>
			<enum value="24576">COLLISIONMASK_CHARACTER_HITBOX</enum>
			<enum value="28647">COLLISIONMASK_ALL_HITBOX</enum>
			<enum value="32768" type="bit">COLLISIONMASK_NO_COLLISION</enum>
		</enum_set>
		<enum_set type="flags">
			<name>FTrace</name>
			<enum value="1" type="bit">FTRACE_ALL_HITS</enum>
			<enum value="2" type="bit">FTRACE_FILTER_INVERT</enum>
			<enum value="256" type="bit">FTRACE_IGNORE_DYNAMIC</enum>
			<enum value="512" type="bit">FTRACE_IGNORE_STATIC</enum>
		</enum_set>
	</collection>
</root>
