<root>
	<collection type="library">
		<name>time</name>
		<collection type="class">
			<name>Timer</name>
			<desc>TODO</desc>
			<group>
				<function type="method" shared="1">
					<name>Start</name>
					<desc>Starts or resumes the timer.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>Stop</name>
					<desc>Stops the timer and resets it.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>Pause</name>
					<desc>Pauses the timer at the current position.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>Remove</name>
					<desc>Removes the timer.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>IsValid</name>
					<desc>Returns true if this timer is valid.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">valid</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetTimeLeft</name>
					<desc>Returns the time until the next timer call.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">timeLeft</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetInterval</name>
					<desc>Returns the time between timer calls.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">interval</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetInterval</name>
					<desc>Changes the time interval between each timer call.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">interval</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetRepetitionsLeft</name>
					<desc>Returns the amount of repetitions that are left before the timer has run out.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">repetitionsLeft</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetRepetitions</name>
					<desc>Changes the amount of repetitions this timer goes through before it has run out.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">repetitionsLeft</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>IsRunning</name>
					<desc>Returns true if the timer is currently running.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">running</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsPaused</name>
					<desc>Returns true if the timer is paused.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">paused</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>Call</name>
					<desc>Calls the function associated with this timer immediately. Has no effect on the time until the next call if the timer is running.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>SetCall</name>
					<desc>Changes the function associated with this timer.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="function">callback</arg>
						</parameters>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
