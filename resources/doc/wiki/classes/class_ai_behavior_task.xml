<root>
	<collection type="library">
		<name>ai</name>
		<collection type="class" server="1">
			<name>BehaviorTask</name>
			<desc>TODO</desc>
			<function type="method" server="1">
				<name>tostring</name>
				<desc>Converts the task to a string.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="string">task</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" server="1">
					<name>GetType</name>
					<desc>Returns the task's type.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.BehaviorTask.Type">type</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetSelectorType</name>
					<desc>Returns the selector type of this task.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.BehaviorTask.SelectorType">selectorType</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" server="1">
				<name>IsActive</name>
				<desc>Returns ''true'' if this task is currently active.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="bool">isActive</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" server="1">
					<name>GetTask</name>
					<desc>Returns the ''n''-th sub-task of this task.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.BehaviorTask">task</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetTasks</name>
					<desc>Returns all sub-tasks within this task.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="table" subType="ai.BehaviorTask">tasks</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>SetScheduleParameter</name>
					<desc>Parameter ''taskParamId'' of this task will be associated with parameter ''schedParamId'' of the schedule this task belongs to.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="int">scheduleParameterId</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>LinkParameter</name>
					<desc>Links one of the task's parameter to a parameter of another task. If ''otherTaskId'' is not specified, it will be the same as ''paramId''.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="ai.BehaviorTask">taskOther</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterIdOther</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="ai.BehaviorTask">taskOther</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>HasParameter</name>
					<desc>Returns ''true'' if the specified parameter was defined.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
						</parameters>
						<returnValues>
							<arg type="bool">hasParameter</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterBool</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as boolean. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="bool" default="false">default</arg>
						</parameters>
						<returnValues>
							<arg type="bool">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterBool</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="bool">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterInt</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as integer. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="int" default="0">default</arg>
						</parameters>
						<returnValues>
							<arg type="int">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterInt</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="int">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterFloat</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as float. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="float" default="0.0">default</arg>
						</parameters>
						<returnValues>
							<arg type="float">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterFloat</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="float">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterString</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as string. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="string" default="">default</arg>
						</parameters>
						<returnValues>
							<arg type="string">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterString</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="string">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterEntity</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as Entity. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="ents.Entity" default="NULL">default</arg>
						</parameters>
						<returnValues>
							<arg type="ents.Entity">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterEntity</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="ents.Entity">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterVector</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as Vector. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="math.Vector" default="math.Vector()">default</arg>
						</parameters>
						<returnValues>
							<arg type="math.Vector">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterVector</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="math.Vector">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterQuaternion</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as Quaternion. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="math.Quaternion" default="math.Quaternion()">default</arg>
						</parameters>
						<returnValues>
							<arg type="math.Quaternion">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterQuaternion</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="math.Quaternion">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterEulerAngles</name>
					<desc>Returns the schedule's parameter for the specified parameter ID as EulerAngles. If the parameter wasn't set, ''default'' will be returned.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="math.EulerAngles" default="math.EulerAngles()">default</arg>
						</parameters>
						<returnValues>
							<arg type="math.EulerAngles">value</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetParameterEulerAngles</name>
					<desc>Sets a permanent parameter for the task for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
							<arg type="math.EulerAngles">value</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetParameterType</name>
					<desc>Returns the parameter type for the specified parameter ID.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
							<arg type="ai.BehaviorTask.ParameterId">taskParameterId</arg>
						</parameters>
						<returnValues>
							<arg type="ai.BehaviorTask.ParameterType">value</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>SetDebugName</name>
					<desc>Changes the debug name of this task.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">debugName</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetDebugName</name>
					<desc>Returns the debug name of this task if one was assigned.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="string">debugName</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>CreateTask</name>
					<desc>
						Creates a new task of the specified type and adds it as a child. You can either create a [pragma:ref?ai.register_task]pre-registered task[/pragma:ref] by providing the task Id, or create an anonymous task by providing the task class directly. The class has to be derived from [pragma:ref]ai.BaseBehaviorTask[/pragma:ref]. [pragma:ref?ai.task]Engine tasks[/pragma:ref] can only be created by providing the Id. Some tasks may ignore the ''taskType'' or ''selectorType'' and use their own instead.
					</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">taskClass</arg>
							<arg type="ai.BehaviorTask.Type" default="ai.BehaviorTask.TYPE_SEQUENCE">taskType</arg>
							<arg type="ai.BehaviorTask.SelectorType" default="ai.BehaviorTask.SELECTOR_TYPE_SEQUENTIAL">selectorType</arg>
						</parameters>
						<returnValues>
							<arg type="ai.BehaviorTask">task</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="ai.Task">taskId</arg>
							<arg type="ai.BehaviorTask.Type" default="ai.BehaviorTask.TYPE_SEQUENCE">taskType</arg>
							<arg type="ai.BehaviorTask.SelectorType" default="ai.BehaviorTask.SELECTOR_TYPE_SEQUENTIAL">selectorType</arg>
						</parameters>
						<returnValues>
							<arg type="ai.BehaviorTask">task</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>CreateDecoratedTask</name>
					<desc>Same as [pragma:ref]ai.BehaviorTask:CreateTask[/pragma:ref], but creates an intermediary decorator task of the specified type as well.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.DecoratorType">decoratorType</arg>
							<arg type="string">taskClass</arg>
							<arg type="ai.BehaviorTask.Type" default="ai.BehaviorTask.TYPE_SEQUENCE">taskType</arg>
							<arg type="ai.BehaviorTask.SelectorType" default="ai.BehaviorTask.SELECTOR_TYPE_SEQUENTIAL">selectorType</arg>
						</parameters>
						<returnValues>
							<arg type="ai.BehaviorTask">task</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="ai.BehaviorTask.DecoratorType">decoratorType</arg>
							<arg type="ai.Task">taskId</arg>
							<arg type="ai.BehaviorTask.Type" default="ai.BehaviorTask.TYPE_SEQUENCE">taskType</arg>
							<arg type="ai.BehaviorTask.SelectorType" default="ai.BehaviorTask.SELECTOR_TYPE_SEQUENTIAL">selectorType</arg>
						</parameters>
						<returnValues>
							<arg type="ai.BehaviorTask">task</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<enum_set>
				<name>Type</name>
				<enum value="0">TYPE_SELECTOR</enum>
				<enum value="1">TYPE_SEQUENCE</enum>
			</enum_set>
			<enum_set>
				<name>Result</name>
				<enum value="4294967295">RESULT_INITIAL</enum>
				<enum value="0">RESULT_PENDING</enum>
				<enum value="1">RESULT_FAILED</enum>
				<enum value="2">RESULT_SUCCEEDED</enum>
			</enum_set>
			<enum_set>
				<name>SelectorType</name>
				<enum value="0">SELECTOR_TYPE_SEQUENTIAL</enum>
				<enum value="1">SELECTOR_TYPE_RANDOM_SHUFFLE</enum>
			</enum_set>
			<enum_set>
				<name>DecoratorType</name>
				<enum value="0">DECORATOR_TYPE_INHERIT</enum>
				<enum value="1">DECORATOR_TYPE_ALWAYS_FAIL</enum>
				<enum value="2">DECORATOR_TYPE_ALWAYS_SUCCEED</enum>
				<enum value="3">DECORATOR_TYPE_INVERT</enum>
				<enum value="4">DECORATOR_TYPE_LIMIT</enum>
				<enum value="5">DECORATOR_TYPE_REPEAT</enum>
				<enum value="6">DECORATOR_TYPE_UNTIL_FAIL</enum>
				<enum value="7">DECORATOR_TYPE_UNTIL_SUCCESS</enum>
			</enum_set>
		</collection>
	</collection>
</root>
