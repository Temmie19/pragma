<root>
	<collection type="library">
		<name>phys</name>
		<collection type="class">
			<name>IKTree</name>
			<collection type="class">
				<name>Node</name>
				<desc>TODO</desc>
				<function type="function" shared="1">
					<name>Create</name>
					<desc>Creates a new IKTree node object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">origin</arg>
							<arg type="math.Vector">rotationAxis</arg>
							<arg type="phys.IKTree.Node.Purpose">purpose</arg>
							<arg type="float">minTheta</arg>
							<arg type="float">maxTheta</arg>
							<arg type="float">restAngle</arg>
						</parameters>
						<returnValues>
							<arg type="phys.IKTree.Node">node</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">origin</arg>
							<arg type="math.Vector">rotationAxis</arg>
							<arg type="phys.IKTree.Node.Purpose">purpose</arg>
						</parameters>
						<returnValues>
							<arg type="phys.IKTree.Node">node</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLocalTransform</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.Transform">transform</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1" debug="1">
					<name>PrintNode</name>
					<desc></desc>
					<lua></lua>
					<overload></overload>
				</function>
				<group>
					<function type="method" shared="1">
						<name>GetRotationAxis</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="math.Vector">rotationAxis</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>SetRotationAxis</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<parameters>
								<arg type="math.Vector">rotationAxis</arg>
							</parameters>
						</overload>
					</function>
				</group>
				<group>
					<function type="method" shared="1">
						<name>GetLeftChildNode</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="phys.IKTree.Node">node</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>GetRightChildNode</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="phys.IKTree.Node">node</arg>
							</returnValues>
						</overload>
					</function>
				</group>
				<function type="method" shared="1">
					<name>InitNode</name>
					<desc></desc>
					<lua></lua>
					<overload></overload>
				</function>
				<group>
					<function type="method" shared="1">
						<name>GetAttach</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="math.Vector">attach</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>SetAttach</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<parameters>
								<arg type="math.Vector">attach</arg>
							</parameters>
						</overload>
					</function>
				</group>
				<function type="method" shared="1">
					<name>GetRelativePosition</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">relativePosition</arg>
						</returnValues>
					</overload>
				</function>
				<group>
					<function type="method" shared="1">
						<name>GetTheta</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="float">theta</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>AddToTheta</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<parameters>
								<arg type="float">delta</arg>
							</parameters>
							<returnValues>
								<arg type="float">theta</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>UpdateTheta</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<parameters>
								<arg type="float">delta</arg>
							</parameters>
							<returnValues>
								<arg type="float">theta</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>GetMinTheta</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="float">minTheta</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>GetMaxTheta</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="float">maxTheta</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>SetTheta</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<parameters>
								<arg type="float">theta</arg>
							</parameters>
						</overload>
					</function>
				</group>
				<group>
					<function type="method" shared="1">
						<name>GetS</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="math.Vector">s</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>GetW</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="math.Vector">w</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>ComputeS</name>
						<desc></desc>
						<lua></lua>
						<overload></overload>
					</function>
					<function type="method" shared="1">
						<name>ComputeW</name>
						<desc></desc>
						<lua></lua>
						<overload></overload>
					</function>
				</group>
				<function type="method" shared="1">
					<name>GetRestAngle</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">restAngle</arg>
						</returnValues>
					</overload>
				</function>
				<group>
					<function type="method" shared="1">
						<name>IsEffector</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="bool">isEffector</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>IsJoint</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="bool">isJoint</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>IsFrozen</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="bool">isFrozen</arg>
							</returnValues>
						</overload>
					</function>
				</group>
				<group>
					<function type="method" shared="1">
						<name>GetEffectorIndex</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="int">effectorIndex</arg>
							</returnValues>
						</overload>
					</function>
					<function type="method" shared="1">
						<name>GetJointIndex</name>
						<desc></desc>
						<lua></lua>
						<overload>
							<returnValues>
								<arg type="int">jointIndex</arg>
							</returnValues>
						</overload>
					</function>
				</group>
				<group>
					<function type="method" shared="1">
						<name>Freeze</name>
						<desc></desc>
						<lua></lua>
						<overload></overload>
					</function>
					<function type="method" shared="1">
						<name>UnFreeze</name>
						<desc></desc>
						<lua></lua>
						<overload></overload>
					</function>
				</group>
				<enum_set>
					<name>Purpose</name>
					<enum value="0">PURPOSE_JOINT</enum>
					<enum value="1">PURPOSE_EFFECTOR</enum>
				</enum_set>
			</collection>
		</collection>
	</collection>
</root>
