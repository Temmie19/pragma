<root>
	<collection type="library">
		<name>phys</name>
		<collection type="class">
			<name>RigidBody</name>
			<derivedFrom>phys.CollisionObj</derivedFrom>
			<desc>TODO</desc>
			<group>
				<function type="method" shared="1">
					<name>SetLinearVelocity</name>
					<desc>Changes the velocity of this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">velocity</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearVelocity</name>
					<desc>Returns the PhysRigidBody's velocity.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">velocity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularVelocity</name>
					<desc>Changes the PhysRigidBody's angular velocity.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">angularVelocity</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularVelocity</name>
					<desc>Returns the PhysRigidBody's angular velocity.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">angularVelocity</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetMass</name>
					<desc>Changes the mass of this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">mass</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetMass</name>
					<desc>Returns the mass of this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">mass</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetInertia</name>
					<desc>Returns the body's inertia.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">inertia</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetInvInertiaTensorWorld</name>
					<desc>Returns the inverted inertia tensor matrix.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Mat3">invInertiaTensor</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>ApplyForce</name>
					<desc>Applies the force on the rigid body. If no second parameter is given, the force will be applied from the center of the object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">force</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">force</arg>
							<arg type="math.Vector">relPos</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ApplyImpulse</name>
					<desc>Applies the impulse on the rigid body. If no second parameter is given, the impulse will be applied from the center of the object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">impulse</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">impulse</arg>
							<arg type="math.Vector">relPos</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ApplyTorque</name>
					<desc>Applies the torque on the rigid body.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">torque</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ApplyTorqueImpulse</name>
					<desc>Applies the torque impulse on the rigid body.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">torque</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>ClearForces</name>
					<desc>Clears all forces currently affecting this rigid body.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>GetTotalForce</name>
					<desc>Returns the total force currently affecting this rigid body.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">totalForce</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetTotalTorque</name>
					<desc>Returns the total torque currently affecting this rigid body.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">totalTorque</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetDamping</name>
					<desc>Changes the damping factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">linearDamping</arg>
							<arg type="float">angularDamping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearDamping</name>
					<desc>Changes the linear damping factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">damping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularDamping</name>
					<desc>Changes the angular damping factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">damping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearDamping</name>
					<desc>Returns the linear damping factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">damping</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularDamping</name>
					<desc>Returns the angular damping factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">damping</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetBoneID</name>
					<desc>Returns the bone id associated with this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">boneId</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetBoneID</name>
					<desc>Changes the bone id associated with this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">boneId</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetLinearFactor</name>
					<desc>Changes the linear factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">linearFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearFactor</name>
					<desc>Returns the linear factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">linearFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularFactor</name>
					<desc>Changes the angular factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">angularFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularFactor</name>
					<desc>Returns the linear factor for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">angularFactor</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetLinearSleepingThreshold</name>
					<desc>The rigid body will never go to sleep if the linear velocity is above this value.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">threshold</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearSleepingThreshold</name>
					<desc>Returns the linear sleeping threshold for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">sleepingThreshold</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularSleepingThreshold</name>
					<desc>The rigid body will never go to sleep if the angular velocity is above this value.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">threshold</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularSleepingThreshold</name>
					<desc>Returns the angular sleeping threshold for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">sleepingThreshold</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetSleepingThreshold</name>
					<desc>Returns the linear and angular sleeping thresholds for this PhysRigidBody.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">linearSleepingThreshold</arg>
							<arg type="float">angularSleepingThreshold</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetKinematic</name>
					<desc>Changes whether this body is kinematic.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">kinematic</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsKinematic</name>
					<desc>Returns whether this body is kinematic.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">kinematic</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
