<root>
	<collection type="library">
		<name>vulkan</name>
		<collection type="class" client="1" gui="1">
			<name>Memory</name>
			<desc>TODO</desc>
			<function type="method">
				<name>tostring</name>
				<desc>Converts the memory object to a string.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="string">memory</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method">
				<name>IsValid</name>
				<desc>Returns ''true'' if the sampler is valid.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="bool">valid</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method">
				<name>GetParentMemory</name>
				<desc>Returns the memory's parent memory object if it has one.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="vulkan.Memory" volatile="1">parentMemory</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method">
					<name>GetSize</name>
					<desc>Returns the memory's size in bytes.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">size</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>GetStartOffset</name>
					<desc>Returns the memory's start offset in bytes.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">startOffset</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method">
					<name>Write</name>
					<desc>Writes the data from the data stream to the memory.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="util.DataStream">dataStream</arg>
							<arg type="int">dataStreamOffset</arg>
							<arg type="int">dataStreamSize</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="util.DataStream">dataStream</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>Read</name>
					<desc>Read the data from the memory and writes it to the specified data stream (or returns a new data stream object).</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="int">size</arg>
							<arg type="util.DataStream">dataStream</arg>
							<arg type="int" default="0">dataStreamOffset</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="int">size</arg>
						</parameters>
						<returnValues>
							<arg type="util.DataStream">dataStream</arg>
						</returnValues>
					</overload>
					<overload>
						<returnValues>
							<arg type="util.DataStream">dataStream</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>Map</name>
					<desc>Maps the data range inside the memory object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="int">size</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
					<overload>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>Unmap</name>
					<desc>Unmaps the memory data if it is currently mapped.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
