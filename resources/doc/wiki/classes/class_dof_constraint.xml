<root>
	<collection type="library">
		<name>phys</name>
		<collection type="class">
			<name>DoFConstraint</name>
			<derivedFrom>phys.Constraint</derivedFrom>
			<desc>TODO</desc>
			<group>
				<function type="method" shared="1">
					<name>SetLinearLowerLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">limit</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearLowerLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">limit</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearUpperLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">limit</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetlinearUpperLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">limit</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">limit</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">lowerLimit</arg>
							<arg type="math.Vector">upperLimit</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularLowerLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">limit</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularLowerLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.EulerAngles">limit</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularUpperLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">limit</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularUpperLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.EulerAngles">limit</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">limit</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">lowerLimit</arg>
							<arg type="math.EulerAngles">upperLimit</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetAngularTargetVelocity</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">targetVelocity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularMaxMotorForce</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">maxMotorForce</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularMaxMotorForce</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">maxMotorForce</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularMaxLimitForce</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">maxLimitForce</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularMaxLimitForce</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">maxMotorForce</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularDamping</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">angularDamping</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularDamping</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">angularDamping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularLimitSoftness</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">limitSoftness</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularLimitSoftness</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">limitSoftness</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">mixingFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">mixingFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularLimitErrorTolerance</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">errorTolerance</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularLimitErrorTolerance</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">errorTolerance</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularLimitForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">mixingFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularLimitForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">mixingFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularRestitutionFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">restitutionFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularRestitutionFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">restitutionFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsAngularMotorEnabled</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">angularMotorEnabled</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularMotorEnabled</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">angularMotorEnabled</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentAngularLimitError</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">limitError</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentAngularPosition</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">angularPosition</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentAngularLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">angularLimit</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentAngularAccumulatedImpulse</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">accumulatedImpulse</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetLinearTargetVelocity</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">linearTargetVelocity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearMaxMotorForce</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">maxMotorForce</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearMaxMotorForce</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">maxMotorForce</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearDamping</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">linearDamping</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearDamping</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">linearDamping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearLimitSoftness</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">limitSoftness</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearLimitSoftness</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">limitSoftness</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">mixingFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">mixingFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearLimitErrorTolerance</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">errorTolerance</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearLimitErrorTolerance</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">errorTolerance</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearLimitForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">mixingFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearLimitForceMixingFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">mixingFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearRestitutionFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">restitutionFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearRestitutionFactor</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">restitutionFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsLinearMotorEnabled</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">motorEnabled</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearMotorEnabled</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">motorEnabled</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentLinearDifference</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">linearDifference</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentLinearLimitError</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">limitError</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentLinearLimit</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">limit</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentLinearAccumulatedImpulse</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">accumulatedImpulse</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
