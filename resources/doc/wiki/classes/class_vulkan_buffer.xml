<root>
	<collection type="library">
		<name>vulkan</name>
		<collection type="class" client="1" gui="1">
			<name>Buffer</name>
			<desc>TODO</desc>
			<function type="method">
				<name>tostring</name>
				<desc>Converts the buffer to a string.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="string">buffer</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method">
				<name>IsValid</name>
				<desc>Returns ''true'' if the buffer is valid.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="bool">valid</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method">
					<name>SetDebugName</name>
					<desc>Changes the buffer's debug name.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">debugName</arg>
						</parameters>
					</overload>
				</function>
				<function type="method">
					<name>GetDebugName</name>
					<desc>Returns the buffer's debug name.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="string">debugName</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method">
					<name>GetStartOffset</name>
					<desc>Returns the buffer's start offset (if it is a sub-buffer).</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">startOffset</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>GetBaseIndex</name>
					<desc>Returns the buffer's base index (if it is a sub-buffer) into the parent buffer.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">baseIndex</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>GetParent</name>
					<desc>Returns the buffer's parent (if it is a sub-buffer).</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="vulkan.Buffer">parent</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method">
				<name>GetSize</name>
				<desc>Returns the buffer's size in bytes.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="int">size</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method">
				<name>GetUsageFlags</name>
				<desc>Returns the buffer's usage flags.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="vulkan.BufferUsage">usageFlags</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method">
					<name>WriteMemory</name>
					<desc>Writes the data from the data stream to the memory object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="util.DataStream">dataStream</arg>
							<arg type="int">dataStreamOffset</arg>
							<arg type="int">dataStreamSize</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="util.DataStream">dataStream</arg>
						</parameters>
					</overload>
				</function>
				<function type="method">
					<name>ReadMemory</name>
					<desc>Writes the data from the data stream to the memory object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="int">size</arg>
							<arg type="util.DataStream">dataStream</arg>
							<arg type="int" default="0">dataStreamOffset</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="int">size</arg>
						</parameters>
						<returnValues>
							<arg type="util.DataStream">dataStream</arg>
						</returnValues>
					</overload>
					<overload>
						<returnValues>
							<arg type="util.DataStream">dataStream</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>SetPermanentlyMapped</name>
					<desc>If set to ''true'', the buffer will be permanently mapped, which will make read and write operations faster (but also requires more memory).</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">permanentlyMapped</arg>
						</parameters>
					</overload>
				</function>
				<function type="method">
					<name>MapMemory</name>
					<desc>Maps the data range inside the buffer memory object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">offset</arg>
							<arg type="int">size</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
					<overload>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>UnmapMemory</name>
					<desc>Unmaps the memory data if it is currently mapped.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
