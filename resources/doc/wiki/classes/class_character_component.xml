<root>
	<collection type="library">
		<name>ents</name>
		<collection type="class">
			<name>CharacterComponent</name>
			<derivedFrom>ents.EntityComponent</derivedFrom>
			<desc>TODO</desc>
			<group>
				<function type="method" shared="1">
					<name>GetFrozenProperty</name>
					<desc>Returns the component's frozen property.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="util.BoolProperty">frozenProperty</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsFrozen</name>
					<desc>Returns true if the character is frozen.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">frozen</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetFrozen</name>
					<desc>Freezes or unfreezes the character, making them unable to move.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">freeze</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>IsAlive</name>
					<desc>Returns true if the character is alive.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">alive</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsDead</name>
					<desc>Returns true if the character is dead.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">dead</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>Kill</name>
					<desc>Kills the character.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetOrientationAxes</name>
					<desc>
						Returns the character's local axes, dependent on the character's up direction. If the up direction is the default (0,1,0), the axes will correspond to the world axes.\n
						The order of the return values is: forward, right, up.
					</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">forward</arg>
							<arg type="math.Vector">right</arg>
							<arg type="math.Vector">up</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetOrientationAxesRotation</name>
					<desc>Returns the rotation between the default up vector (0,1,0) and the current up vector.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">deltaRotation</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>GetShootPos</name>
				<desc>Returns the position form which to cast the rays for bullets from. Same as [pragma:ref]ents.TransformComponent:GetEyePos[/pragma:ref].</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="math.Vector">shootPos</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>GetSlopeLimit</name>
					<desc>Returns the angle at which the character cannot walk on a slope anymore.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">slopeLimit</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetSlopeLimit</name>
					<desc>Changes the angle at which the character cannot walk on a slope anymore.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">slopeLimit</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetSlopeLimitProperty</name>
					<desc>Returns the characters slope-limit property.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="util.FloatProperty">slopeLimitProperty</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetStepOffset</name>
					<desc>Returns the character's step offset.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">stepOffset</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetStepOffset</name>
					<desc>Changes the character's step offset, which represents the height of obstacles the controller can simply step over.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">stepOffset</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetStepOffsetProperty</name>
					<desc>Returns the characters step-offset property.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="util.FloatProperty">stepOffsetProperty</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetTurnSpeed</name>
					<desc>Returns the speed at which this character can turn around.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">turnSpeed</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetTurnSpeed</name>
					<desc>Changes the speed at which this character can turn around.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">turnSpeed</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetUpDirection</name>
					<desc>Returns the character's up direction.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">upDirection</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetUpDirection</name>
					<desc>Changes the character's up direction. This will affect character movement, but not gravity.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">upDirection</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetUpDirectionProperty</name>
					<desc>Returns the characters up-direction property.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="util.VectorProperty">upDirectionProperty</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetViewAngles</name>
					<desc>Returns the character's view angles.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.EulerAngles">viewAngles</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetViewForward</name>
					<desc>Returns the forward direction of the character's view orientation.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">viewForward</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetViewRotation</name>
					<desc>Returns the player's view rotation.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">viewRotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetViewRight</name>
					<desc>Returns the right direction of the character's view orientation.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">viewRight</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetViewUp</name>
					<desc>Returns the up direction of the character's view orientation.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">viewUp</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetViewAngles</name>
					<desc>Changes the character's view angles.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">viewAngles</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetViewRotation</name>
					<desc>Changes the character's view orientation.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Quaternion">viewRotation</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>NormalizeViewRotation</name>
					<desc>Sets the rotation on the roll-axis to 0 and normalizes the pitch to the range [-90,90] for the specified rotation. If no rotation was given, the transformation will be applied directly to the character's view rotation.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Quaternion">rotation</arg>
						</parameters>
					</overload>
					<overload></overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>Ragdolize</name>
				<desc>Turns the character into a ragdoll.</desc>
				<lua></lua>
				<overload></overload>
			</function>
			<function type="method" shared="1">
				<name>GetHitboxPhysicsObject</name>
				<desc>Returns the physics object for the hitboxes of the character.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="phys.Object">hitBoxPhysObj</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>GetWeapons</name>
					<desc>Returns a table of all weapons this character has, or just the ones with the specified class.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="table" subType="ents.Entity">weapons</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="string">className</arg>
						</parameters>
						<returnValues>
							<arg type="table" subType="ents.Entity">weapons</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetWeaponCount</name>
					<desc>Returns the number of weapons the character has.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">weaponCount</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetActiveWeapon</name>
					<desc>Returns the character's currently equipped weapon.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ents.Entity">activeWeapon</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>HasWeapon</name>
					<desc>Returns true if the character has a weapon of the specified class.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">className</arg>
						</parameters>
						<returnValues>
							<arg type="bool">hasWeapon</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>GetAimRayData</name>
				<desc>Returns a [pragma::ref]phys.RayCastData[/pragma::ref] object for a ray-trace pointing form the character's eye position straight forward.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="phys.RayCastData">rayData</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>FootStep</name>
				<desc>Invokes a footstep for the character.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="phys.CharacterComponent.Foot">foot</arg>
					</parameters>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>IsMoving</name>
				<desc>Returns ''true'' if the character is currently moving.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="bool">isMoving</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>SetNeckControllers</name>
					<desc>Initializes the character's neck blend controllers.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">yawController</arg>
							<arg type="string">pitchController</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetNeckYawController</name>
					<desc>Returns the character's yaw controller.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">yawController</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetNeckPitchController</name>
					<desc>Returns the character's pitch controller.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">pitchController</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetMoveController</name>
					<desc>Changes the move blend-controller.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">moveController</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetMoveController</name>
					<desc>Returns the move blend-controller.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">moveController</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetMoveVelocity</name>
					<desc>Returns the character's actual movement velocity, excluding outside forces.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">moveVelocity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetRelativeVelocity</name>
					<desc>Returns the character's movement velocity relative to the ground the character is standing on.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">relativeVelocity</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetOrientation</name>
					<desc>Changes the character's orientation.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">upDirection</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLocalOrientationAngles</name>
					<desc>Returns the characters angles in move space.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.EulerAngles">localOrientationAngles</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLocalOrientationRotation</name>
					<desc>Returns the characters rotation in move space.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">localOrientationRotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLocalOrientationViewAngles</name>
					<desc>Returns the characters view angles in move space.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.EulerAngles">localOrientationViewAngles</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLocalOrientationViewRotation</name>
					<desc>Returns the characters view rotation in move space.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">localOrientationViewRotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>WorldToLocalOrientation</name>
					<desc>Transforms the specified rotation from world space into move space.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Quaternion">worldRotation</arg>
						</parameters>
						<returnValues>
							<arg type="math.Quaternion">localRotation</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">worldAngles</arg>
						</parameters>
						<returnValues>
							<arg type="math.EulerAngles">localAngles</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>LocalOrientationToWorld</name>
					<desc>Transforms the specified rotation from move space into world space.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Quaternion">localRotation</arg>
						</parameters>
						<returnValues>
							<arg type="math.Quaternion">worldRotation</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">localAngles</arg>
						</parameters>
						<returnValues>
							<arg type="math.EulerAngles">worldAngles</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetAmmoCount</name>
					<desc>Returns the amount of ammo the character has of the specified type.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">ammoType</arg>
						</parameters>
						<returnValues>
							<arg type="int">ammoCount</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="int">ammoType</arg>
						</parameters>
						<returnValues>
							<arg type="int">ammoCount</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAmmoCount</name>
					<desc>Changes the character's ammo count for the specified type to the given value.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">ammoType</arg>
							<arg type="int">ammoCount</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="int">ammoType</arg>
							<arg type="int">ammoCount</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>AddAmmo</name>
					<desc>Gives ammo to the character.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">ammoType</arg>
							<arg type="int">ammoCount</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="int">ammoType</arg>
							<arg type="int">ammoCount</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>RemoveAmmo</name>
					<desc>Removes ammo from the character.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">ammoType</arg>
							<arg type="int">ammoCount</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="int">ammoType</arg>
							<arg type="int">ammoCount</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetJumpPower</name>
					<desc>Returns the character's jump power.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">jumpPower</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetJumpPower</name>
					<desc>Changes the character's jump power.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">jumpPower</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetJumpPowerProperty</name>
					<desc>Returns the jump power property.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="util.FloatProperty">jumpPowerProperty</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>Jump</name>
					<desc>Forces the character to jump. If no ''velocity'' is specified, the character will be launched upwards with a force of [pragma:ref]ents.CharacterComponent:GetJumpPower[/pragma:ref]. This function will fail if the character cannot jump (e.g. because the character isn't on solid ground).</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="util.Vector">velocity</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
					<overload>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<enum_set>
				<name>Event</name>
				<enum>EVENT_ON_KILLED</enum>
				<enum>EVENT_ON_RESPAWN</enum>
				<enum>EVENT_ON_FOOT_STEP</enum>
				<enum>EVENT_ON_CHARACTER_ORIENTATION_CHANGED</enum>
				<enum>EVENT_ON_DEPLOY_WEAPON</enum>
				<enum>EVENT_ON_SET_ACTIVE_WEAPON</enum>
				<enum>EVENT_PLAY_FOOTSTEP_SOUND</enum>
				<enum>EVENT_ON_DEATH</enum>
				<enum>EVENT_CALC_MOVEMENT_SPEED</enum>
				<enum>EVENT_CALC_AIR_MOVEMENT_MODIFIER</enum>
				<enum>EVENT_CALC_MOVEMENT_ACCELERATION</enum>
				<enum>EVENT_CALC_MOVEMENT_DIRECTION</enum>
				<enum>EVENT_IS_MOVING</enum>
				<enum>EVENT_HANDLE_VIEW_ROTATION</enum>
				<enum>EVENT_ON_JUMP</enum>
			</enum_set>
			<enum_set>
				<name>Foot</name>
				<enum value="0">FOOT_LEFT</enum>
				<enum value="1">FOOT_RIGHT</enum>
			</enum_set>
			<!-- serverside -->
			<group>
				<function type="method" server="1">
					<name>GiveWeapon</name>
					<desc>Gives the character the specified weapon.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">weaponClass</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>DropActiveWeapon</name>
					<desc>Drops the character's active weapon.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>DropWeapon</name>
					<desc>Drops the character's weapons with the specified class on the floor.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">weaponClass</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.WeaponComponent">weapon</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>RemoveWeapon</name>
					<desc>Removes the character's weapons with the specified class.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">weaponClass</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.WeaponComponent">weapon</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>RemoveWeapons</name>
					<desc>Removes the character's weapons.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>DeployWeapon</name>
					<desc>Forces the character to deploy the specified weapon.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">weaponClass</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.WeaponComponent">weapon</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>HolsterWeapon</name>
					<desc>Forces the character to holster his active weapon.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>SelectNextWeapon</name>
					<desc>Forces the character to deploy his next weapon in his inventory.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>SelectPreviousWeapon</name>
					<desc>Forces the character to deploy his previous weapon in his inventory.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>PrimaryAttack</name>
					<desc>Forces the character to use his primary attack. Only works if the character has a weapon deployed (And the weapon can be fired).</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>SecondaryAttack</name>
					<desc>Forces the character to use his secondary attack. Only works if the character has a weapon deployed (And the weapon can be fired).</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>TertiaryAttack</name>
					<desc>Forces the character to use his tertiary attack. Only works if the character has a weapon deployed (And the weapon can be fired).</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>Attack4</name>
					<desc>Forces the character to use his fourth attack. Only works if the character has a weapon deployed (And the weapon can be fired).</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>ReloadWeapon</name>
					<desc>Forces the character to reload his weapon.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>SetNoTarget</name>
					<desc>Enables or disables notarget-mode.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">noTarget</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetNoTarget</name>
					<desc>Returns ''true'' if the character has notarget-mode enabled.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">noTarget</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>SetGodMode</name>
					<desc>Enables or disables god-mode.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">noTarget</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetGodMode</name>
					<desc>Returns ''true'' if the character has god-mode enabled.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">noTarget</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>GetFaction</name>
					<desc>Returns the character's faction.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.Faction">faction</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetFaction</name>
					<desc>Changes the character's faction.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Faction">faction</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="string">faction</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<!-- serverside -->
		</collection>
	</collection>
</root>
