<root>
	<collection type="library">
		<name>phys</name>
		<collection type="class">
			<name>CollisionObj</name>
			<desc>TODO</desc>
			<group>
				<function type="method" shared="1">
					<name>IsValid</name>
					<desc>Returns true if this collision object is valid.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">valid</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>Remove</name>
					<desc>Removes this collision object from the world.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetPos</name>
					<desc>Changes the collision object's world position.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">position</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetPos</name>
					<desc>Returns the collision object's world position.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">position</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetRotation</name>
					<desc>Changes the collision objects's rotation.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Quaternion">rotation</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetRotation</name>
					<desc>Returns the collision object's rotation.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">rotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngles</name>
					<desc>Changes the collision object's angles.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">angles</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngles</name>
					<desc>Returns the collision object's angles.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.EulerAngles">angles</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetOrigin</name>
					<desc>Returns the collision object's origin relative to its PhysObj.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">origin</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetOrigin</name>
					<desc>Changes the collision object's origin relative to its PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">origin</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetBounds</name>
					<desc>Returns the collision object's bounds.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">min</arg>
							<arg type="math.Vector">max</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetBoundingSphere</name>
					<desc>Returns the center and encompassing radius for this object.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">origin</arg>
							<arg type="float">radius</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>IsRigidBody</name>
					<desc>Returns true if this collision object is a rigid body object.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">isRigidBody</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsGhostObject</name>
					<desc>Returns true if this collision object is a ghost object.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">isGhostBody</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsSoftBody</name>
					<desc>Returns true if this collision object is a soft-body object.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">isSoftBody</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetSimulationEnabled</name>
					<desc>Enables or disables simulation for this collision object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">simulationEnabled</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>DisableSimulation</name>
					<desc>Disables simulation for this collision object.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>EnableSimulation</name>
					<desc>Enables simulation for this collision object.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>IsSimulationEnabled</name>
					<desc>Returns ''true'' if simulation is enabled for this object.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">isSimulationEnabled</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>GetShape</name>
				<desc>Returns the collision object's shape.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="phys.Shape">shape</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>GetActivationState</name>
					<desc>Returns the activation state for the collision objects.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.ActivationState">activationState</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetActivationState</name>
					<desc>Changes the activation state for the collision objects.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="phys.ActivationState">activationState</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>Activate</name>
					<desc>Sets the rigid body's activation state to active.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool" default="false">forceActivation</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>Spawn</name>
				<desc>Spawns the object in the world.</desc>
				<lua></lua>
				<overload></overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>SetCollisionFilterGroup</name>
					<desc>Changes the object's collision group.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="phys.CollisionMask">collisionGroup</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCollisionFilterGroup</name>
					<desc>Returns the object's collision group.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.CollisionMask">collisionGroup</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetCollisionFilterMask</name>
					<desc>Changes the object's collision mask.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="phys.CollisionMask">collisionMask</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCollisionFilterMask</name>
					<desc>Returns the object's collision mask.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.CollisionMask">collisionMask</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetWorldTransform</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="phys.Transform">transform</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetWorldTransform</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.Transform">transform</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
