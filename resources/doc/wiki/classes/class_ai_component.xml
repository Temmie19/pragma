<root>
	<collection type="library">
		<name>ents</name>
		<collection type="class">
			<name>AIComponent</name>
			<derivedFrom>ents.EntityComponent</derivedFrom>
			<desc>TODO</desc>
			<group>
				<function type="method" shared="1">
					<name>SetMoveSpeed</name>
					<desc>Changes the NPC's movement speed for the specified animation.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">animationName</arg>
							<arg type="float">speed</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="int">animationId</arg>
							<arg type="float">speed</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetMoveSpeed</name>
					<desc>Returns the NPC's movement speed for the specified animation, if it has previously been set using [pragma:ref]ents.AIComponent:SetMoveSpeed[/pragma:ref]. Note that the return value is affected by the NPC's scale, so it may not return the same value that was specified [pragma:ref]ents.AIComponent:SetMoveSpeed[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">animationName</arg>
						</parameters>
						<returnValues>
							<arg type="float">speed</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="int">animationId</arg>
						</parameters>
						<returnValues>
							<arg type="float">speed</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ClearMoveSpeed</name>
					<desc>Clears the NPC's movement speed for the specified animation, if it has previously been set using [pragma:ref]ents.AIComponent:SetMoveSpeed[/pragma:ref].</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">animationName</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="int">animationId</arg>
							<arg type="float">speed</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>ClearLookTarget</name>
					<desc>Clears the NPC's current look target.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>SetLookTarget</name>
					<desc>Changes the NPC's look target for the specified amount of time. If no time is specified, the NPC will look at the target until the look target is cleared or changed.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">lookTarget</arg>
							<arg type="float">lookDuration</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">lookTarget</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.Entity">lookTarget</arg>
							<arg type="float">lookDuration</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.Entity">lookTarget</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLookTarget</name>
					<desc>Returns the NPC's current look target.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">lookTarget</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<!-- serverside -->
			<group>
				<function type="method" server="1">
					<name>StartSchedule</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.Schedule">schedule</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>CancelSchedule</name>
					<desc>Stops the NPC's current schedule.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>SetSquad</name>
					<desc>Changes the NPC's squad.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">squad</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetSquad</name>
					<desc>Returns the NPC's current squad or ''nill'', if it isn't in a squad.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.Squad">squad</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>ClearRelationship</name>
					<desc>Clears all custom relationships between this NPC and the target.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="string">className</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ai.Faction">faction</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetDisposition</name>
					<desc>Returns the disposition between this NPC and the target, as well as the priority.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
						</parameters>
						<returnValues>
							<arg type="ai.Disposition">disposition</arg>
							<arg type="int">priority</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="string">className</arg>
						</parameters>
						<returnValues>
							<arg type="ai.Disposition">disposition</arg>
							<arg type="int">priority</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="ai.Faction">faction</arg>
						</parameters>
						<returnValues>
							<arg type="ai.Disposition">disposition</arg>
							<arg type="int">priority</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetRelationship</name>
					<desc>Changes the relationship between this NPC and the specified entity class/Entity/Faction.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="string">className</arg>
							<arg type="ai.Disposition">disposition</arg>
							<arg type="int" default="0">priority</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
							<arg type="ai.Disposition">disposition</arg>
							<arg type="bool" default="true">revert</arg>
							<arg type="int" default="0">priority</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ai.Faction">faction</arg>
							<arg type="ai.Disposition">disposition</arg>
							<arg type="int" default="0">priority</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>GetCurrentSchedule</name>
					<desc>Returns the NPC's current schedule.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
						</parameters>
						<returnValues>
							<arg type="ai.Schedule">schedule</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>TriggerScheduleInterrupt</name>
					<desc>Interrupts the current schedule, if the schedule can be interrupted by the specified interrupt flags.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">interruptFlags</arg>
						</parameters>
						<returnValues>
							<arg type="bool">interrupted</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>GetMemory</name>
					<desc>Returns the NPC's memory.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.Memory">memory</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
						</parameters>
						<returnValues>
							<arg type="ai.Memory.Fragment">memoryFragment</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>Memorize</name>
					<desc>Adds the specified entity to the NPC's memory.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
							<arg type="ai.Memory.Type">memoryType</arg>
							<arg type="math.Vector">position</arg>
							<arg type="math.Vector">velocity</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
							<arg type="ai.Memory.Type">memoryType</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>Forget</name>
					<desc>Forces the NPC to forget all about the specified target.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>ClearMemory</name>
					<desc>Clears the NPC's entire memory.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>IsInMemory</name>
					<desc>Returns ''true'' if the NPC has the specified target in memory.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
						</parameters>
						<returnValues>
							<arg type="bool">inMemory</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>IsInViewCone</name>
					<desc>Returns ''true'' the target is within the visible range of the target entity. If the entity is visible, the distance will be returned as second return value.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.Entity">entity</arg>
						</parameters>
						<returnValues>
							<arg type="bool">inViewCone</arg>
							<arg type="float">distance</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetMemoryDuration</name>
					<desc>Returns how long targets stay within the NPC's memory.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">memoryDuration</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetMemoryDuration</name>
					<desc>Changes how long targets stay within the NPC's memory.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">memoryDuration</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>CanSee</name>
					<desc>Returns true if the NPC is capable of seeing (view angle > 0 and view distance > 0).</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">canSee</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetHearingStrength</name>
					<desc>Changes the NPC's ability to hear. A ''strength'' of 0 equals deafness.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">hearingStrength</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetHearingStrength</name>
					<desc>Returns the NPC's strength of hearing.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">hearingStrength</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>CanHear</name>
					<desc>Returns ''true'' if the NPC is capable of hearing.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">canHear</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetMemoryFragmentCount</name>
					<desc>Returns the number of entity targets in this NPC's memory.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">memoryFragmentCount</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetPrimaryTarget</name>
					<desc>Returns the NPC's memory of its current main target. (Or ''nil'', if it doesn't have one.)</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.Memory.Fragment">memoryFragment</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>HasPrimaryTarget</name>
					<desc>Returns ''true'' if the NPC has an active primary target.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">hasPrimaryTarget</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>IsEnemy</name>
					<desc>Returns ''true'' if the disposition to the target is ''ai.DISPOSITION_HATE'' or ''ai.DISPOSITION_FEAR''.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ents.Entity">target</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>GetNPCState</name>
					<desc>Returns the NPC's current state.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ai.NPCState">state</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetNPCState</name>
					<desc>Changes the NPC's current state.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ai.NPCState">state</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<function type="method" server="1">
				<name>IsMoving</name>
				<desc>Returns ''true'' the NPC is currently moving.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="bool">isMoving</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" server="1">
					<name>IsAIEnabled</name>
					<desc>Returns ''true'' if the NPC's AI is currently enabled.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">aiEnabled</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetAIEnabled</name>
					<desc>Enables or disables the NPC's AI.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">aiEnabled</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>EnableAI</name>
					<desc>Enables the NPC's AI.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>DisableAI</name>
					<desc>Disables the NPC's AI.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>IsControllable</name>
					<desc>Returns ''true'' if the NPC is controllable.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">isControllable</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetControllable</name>
					<desc>Changes whether the NPC can be controlled.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">controllable</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>StartControl</name>
					<desc>Starts control of the NPC by the specified player.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="ents.PlayerComponent">player</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>EndControl</name>
					<desc>Ends control of the NPC through the active [pragma:ref]ents.AIComponent:GetController[/pragma:ref].</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>IsControlled</name>
					<desc>Returns ''true'' the NPC is currently being controlled.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">isControlled</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetController</name>
					<desc>Returns ''true'' the NPC is currently being controlled.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ents.Entity">controller</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" server="1">
					<name>LockAnimation</name>
					<desc>Locks or unlocks the NPC's current animation. If the animation is locked, the NPC's animation cannot be changed unless it's unlocked again.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="bool">lock</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>IsAnimationLocked</name>
					<desc>Returns ''true'' if the NPC's current animation is locked.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">lock</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" server="1">
				<name>TurnStep</name>
				<desc></desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">turnTarget</arg>
						<arg type="float">turnSpeed</arg>
					</parameters>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">turnTarget</arg>
					</parameters>
				</overload>
			</function>
			<group>
				<function type="method" server="1">
					<name>GetDistanceToMoveTarget</name>
					<desc>Returns the distance between the NPC and its current move target.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">distance</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetMoveTarget</name>
					<desc>Returns the NPCs current movement target position.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">moveTarget</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>MoveTo</name>
					<desc>
						Forces the NPC to move to the specified target position. If ''info.moveOnPath'' is set to ''false'', the NPC will not generate a path, and attempt to move on a straight line instead.\n
						If a ''info.faceTarget'' is specified, the NPC will face that target while moving to pos.
					</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">position</arg>
							<arg type="ai.MoveInfo">moveInfo</arg>
						</parameters>
						<returnValues>
							<arg type="ai.MoveState">moveState</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">position</arg>
						</parameters>
						<returnValues>
							<arg type="ai.MoveState">moveState</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>StopMoving</name>
					<desc>Forces the NPC to cancel its current movement.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" server="1">
					<name>HasReachedDestination</name>
					<desc>Returns ''true'' if the NPC has reached its current movement destination.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">hasReachedDestination</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetMoveActivity</name>
					<desc>Returns the NPCs current movement activity.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="game.Model.Animation.Activity">activity</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" server="1">
				<name>GetControllerActionInput</name>
				<desc>Returns NPC's controller action inputs.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="input.Action">actionInputs</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" server="1">
					<name>PlayActivity</name>
					<desc>Plays an animation associated with the specified activity, with specialized AI behavior defined in ''animationInfo''.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="game.Model.Animation.Activity">activity</arg>
							<arg type="ents.AIComponent.AnimationInfo">animationInfo</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>PlayAnimation</name>
					<desc>Plays an animation with specialized AI behavior defined in ''animationInfo''.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="int">animation</arg>
							<arg type="ents.AIComponent.AnimationInfo">animationInfo</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" server="1">
				<name>GetSquadName</name>
				<desc>Returns the NPC's squad.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="string">squadName</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" server="1">
					<name>GetMaxViewDistance</name>
					<desc>Returns the maximum distance at which this NPC can still see targets.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">maxViewDistance</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetMaxViewDistance</name>
					<desc>Changes the maximum distance at which this NPC can still see targets. If the maximum view distance is 0, the NPC will be unable to see at all.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">maxViewDistance</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" server="1">
					<name>GetMaxViewAngle</name>
					<desc>Returns the maximum view angle at which this NPC can still see targets.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">maxViewAngle</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" server="1">
					<name>SetMaxViewAngle</name>
					<desc>Changes the maximum view angle at which this NPC can still see targets. If the angle is ''0'', the NPC will be unable to see at all.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">maxViewAngle</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<enum_set server="1">
				<name>Event</name>
				<enum>EVENT_SELECT_SCHEDULE</enum>
				<enum>EVENT_SELECT_CONTROLLER_SCHEDULE</enum>
				<enum>EVENT_ON_SCHEDULE_COMPLETE</enum>
				<enum>EVENT_ON_PRIMARY_TARGET_CHANGED</enum>
				<enum>EVENT_ON_PATH_CHANGED</enum>
				<enum>EVENT_ON_NPC_STATE_CHANGED</enum>
				<enum>EVENT_ON_TARGET_VISIBILITY_LOST</enum>
				<enum>EVENT_ON_TARGET_VISIBILITY_REACQUIRED</enum>
				<enum>EVENT_ON_MEMORY_GAINED</enum>
				<enum>EVENT_ON_MEMORY_LOST</enum>
				<enum>EVENT_ON_TARGET_ACQUIRED</enum>
				<enum>EVENT_ON_SUSPICIOUS_SOUND_HEARED</enum>
				<enum>EVENT_ON_CONTROLLER_ACTION_INPUT</enum>
				<enum>EVENT_ON_START_CONTROL</enum>
				<enum>EVENT_ON_END_CONTROL</enum>
				<enum>EVENT_ON_PATH_NODE_CHANGED</enum>
				<enum>EVENT_ON_LOOK_TARGET_CHANGED</enum>
				<enum>EVENT_ON_SCHEDULE_STARTED</enum>
			</enum_set>
			<!-- serverside -->
		</collection>
	</collection>
</root>
