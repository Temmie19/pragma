<root>
	<collection type="library">
		<name>shader</name>
		<collection type="class" client="1" gui="1">
			<name>Shader</name>
			<desc>TODO</desc>
			<group>
				<function type="method">
					<name>RecordBindDescriptorSet</name>
					<desc>Binds a descriptor set to a command buffer.</desc>
					<url>https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkCmdBindDescriptorSets.html</url>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="vulkan.DescriptorSet">descriptorSet</arg>
							<arg type="int" default="0">firstSet</arg>
							<arg type="table" subType="int" default="{}">dynamicOffsets</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>RecordBindDescriptorSets</name>
					<desc>Binds descriptor sets to a command buffer.</desc>
					<url>https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkCmdBindDescriptorSets.html</url>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="table" subType="vulkan.DescriptorSet">descriptorSet</arg>
							<arg type="int" default="0">firstSet</arg>
							<arg type="table" subType="int" default="{}">dynamicOffsets</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>RecordPushConstants</name>
					<desc>Update the values of push constants.</desc>
					<url>https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkCmdPushConstants.html</url>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="util.DataStream">dataStream</arg>
							<arg type="int" default="0">offset</arg>
						</parameters>
						<returnValues>
							<arg type="bool">success</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method">
				<name>GetEntrypointName</name>
				<desc>Returns the entry point name for the specified shader stage.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.ShaderStage">shaderStage</arg>
						<arg type="int" default="0">pipelineIndex</arg>
					</parameters>
					<returnValues>
						<arg type="string">entrypointName</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method">
				<name>CreateDescriptorSet</name>
				<desc>Creates a new descriptor set for the bindings at the specified set index.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="int">setIndex</arg>
						<arg type="int" default="0">pipelineIndex</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.DescriptorSet">descriptorSet</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method">
				<name>GetPipelineInfo</name>
				<desc>Returns the pipeline info for the specified shader stage.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.ShaderStage">shaderStage</arg>
						<arg type="int" default="0">pipelineIndex</arg>
					</parameters>
					<returnValues>
						<arg type="shader.BasePipelineCreateInfo" volatile="1">createInfo</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method">
					<name>GetGlslSourceCode</name>
					<desc>Returns the GLSL source code associated with the specified shader stage.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="vulkan.ShaderStage">shaderStage</arg>
							<arg type="int" default="0">pipelineIndex</arg>
						</parameters>
						<returnValues>
							<arg type="string">sourceCode</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>GetSpirvBlob</name>
					<desc>Returns the SPIR-V data associated with the specified shader stage.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="vulkan.ShaderStage">shaderStage</arg>
							<arg type="int" default="0">pipelineIndex</arg>
						</parameters>
						<returnValues>
							<arg type="util.DataStream">spirvData</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method">
				<name>GetStatistics</name>
				<desc>Returns the statistics associated with the specified shader stage.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="vulkan.ShaderStage">shaderStage</arg>
						<arg type="int" default="0">pipelineIndex</arg>
					</parameters>
					<returnValues>
						<arg type="vulkan.ShaderStatisticsInfoAMD">statistics</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method">
					<name>IsGraphicsShader</name>
					<desc>Returns ''true'' if this is a graphics shader.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">graphicsShader</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>IsComputeShader</name>
					<desc>Returns ''true'' if this is a compute shader.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">computeShader</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>GetPipelineBindPoint</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="vulkan.PipelineBindPoint">bindPoint</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method">
				<name>IsValid</name>
				<desc>Returns ''true'' if the shader is valid.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="bool">valid</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method">
				<name>GetIdentifier</name>
				<desc>Returns the shader's identifier.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="string">identifier</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method">
					<name>GetSourceFilePath</name>
					<desc>Returns the shader's source code file path for the specified stage.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="vulkan.ShaderStage">stage</arg>
						</parameters>
						<returnValues>
							<arg type="string">filePath</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method">
					<name>GetSourceFilePaths</name>
					<desc>Returns the shader's source code file paths for all stages.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="table" subType="string">filePaths</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
