<root>
	<collection type="library">
		<name>phys</name>
		<collection type="class">
			<name>Object</name>
			<desc>TODO</desc>
			<function type="method" shared="1">
				<name>IsValid</name>
				<desc>Returns ''true'' if this PhysObj is valid.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="bool">valid</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>SetLinearVelocity</name>
					<desc>Changes the velocity of this PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">velocity</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearVelocity</name>
					<desc>Returns the PhysObj's velocity.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">velocity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>AddLinearVelocity</name>
					<desc>Adds the specified velocity to the PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">velocity</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularVelocity</name>
					<desc>Changes the PhysObj's angular velocity.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">velocity</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularVelocity</name>
					<desc>Returns the PhysObj's angular velocity.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">velocity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>AddAngularVelocity</name>
					<desc>Adds the specified velocity to the PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">velocity</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>PutToSleep</name>
					<desc>Puts this PhysObj to sleep.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>WakeUp</name>
					<desc>Wakes this PhysObj up.</desc>
					<lua></lua>
					<overload></overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetMass</name>
					<desc>Returns the mass of this PhysObj.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">mass</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetMass</name>
					<desc>Changes the mass of this PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">mass</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetLinearFactor</name>
					<desc>Returns the linear factor for this PhysObj.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">linearFactor</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearFactor</name>
					<desc>Allows you to limit the movement of this PhysObj for specific axes.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">linearFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularFactor</name>
					<desc>Allows you to limit the movement of this PhysObj for specific axes.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">linearFactor</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularFactor</name>
					<desc>Allows you to limit the angular movement of this PhysObj for specific axes.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">angularFactor</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>GetCollisionObjects</name>
				<desc>Returns a table of all collision objects associated with this PhysObj.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="table" subType="phys.CollisionObj">collisionObjects</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>GetOwner</name>
				<desc>Returns the PhysObj's owner.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="ents.Entity">owner</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>SetCollisionFilterMask</name>
					<desc>Changes the PhysObj's collision mask. (= What this PhysObj should collide with)</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="phys.CollisionMask">collisionMask</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCollisionFilterMask</name>
					<desc>Returns the PhysObj's collision mask. (= What this PhysObj should collide with)</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.CollisionMask">collisionMask</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetCollisionFilterGroup</name>
					<desc>Changes the PhysObj's collision group. (= Which PhysObj types should collide with this entity)</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="phys.CollisionMask">collisionGroup</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCollisionFilterGroup</name>
					<desc>Returns the PhysObj's collision group. (= Which PhysObj types should collide with this PhysObj)</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.CollisionMask">collisionGroup</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetCollisionFilter</name>
					<desc>Changes the PhysObj's collision group and mask.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="phys.CollisionMask">collisionGroup</arg>
							<arg type="phys.CollisionMask">collisionMask</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>SetDamping</name>
					<desc>Changes the damping factor for this PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">linearDamping</arg>
							<arg type="float">angularDamping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetLinearDamping</name>
					<desc>Changes the linear damping factor for this PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">linearDamping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularDamping</name>
					<desc>Changes the angular damping factor for this PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">angularDamping</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearDamping</name>
					<desc>Returns the linear damping factor for this PhysObj.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">linearDamping</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularDamping</name>
					<desc>Returns the angular damping factor for this PhysObj.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">angularDamping</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>ApplyForce</name>
					<desc>Applies the force on the PhysObj. If no second parameter is given, the force will be applied from the center of the object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">force</arg>
							<arg type="math.Vector">relPos</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">force</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ApplyImpulse</name>
					<desc>Applies the impulse on the PhysObj. If no second parameter is given, the impulse will be applied from the center of the object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">impulse</arg>
							<arg type="math.Vector">relPos</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Vector">impulse</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ApplyTorque</name>
					<desc>Applies the torque on the PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">torque</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ApplyTorqueImpulse</name>
					<desc>Applies the torque impulse on the PhysObj.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">torqueImpulse</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ClearForces</name>
					<desc>Clears all forces currently affecting this PhysObj.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>GetTotalForce</name>
					<desc>Returns the total force currently affecting this PhysObj.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">totalForce</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetTotalTorque</name>
					<desc>Returns the total torque currently affecting this PhysObj.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">totalTorque</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetPos</name>
					<desc>Returns the object's world position.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">position</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetPos</name>
					<desc>Changes the object's world position.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">position</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetRotation</name>
					<desc>Returns the object's rotation.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">rotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetRotation</name>
					<desc>Changes the objects's rotation.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Quaternion">rotation</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>GetBounds</name>
				<desc>Returns the physics object's bounds.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="math.Vector">min</arg>
						<arg type="math.Vector">max</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>SetLinearSleepingThreshold</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">threshold</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetLinearSleepingThreshold</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">threshold</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetAngularSleepingThreshold</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">threshold</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetAngularSleepingThreshold</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">threshold</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>SetSleepingThresholds</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">linearThreshold</arg>
							<arg type="float">angularThreshold</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetSleepingThreshold</name>
					<desc></desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">linearThreshold</arg>
							<arg type="float">angularThreshold</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>GetGroundEntity</name>
					<desc>Returns the entity this controller is standing on.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="ents.Entity">entity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetGroundPhysObject</name>
					<desc>Returns the physics object this controller is standing on.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.Object">physObject</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetGroundPhysCollisionObject</name>
					<desc>Returns the collision object this controller is standing on.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="phys.CollisionObj">collisionObject</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsOnGround</name>
					<desc>Returns ''true'' if this PhysObj is on the ground. Only works for character controllers.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">isOnGround</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>IsGroundWalkable</name>
					<desc>Returns ''true'' if the controller is currently on walkable ground (i.e. the surface is not too steep).</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="bool">onWalkableGround</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetGroundSurfaceMaterial</name>
					<desc>Returns the surface material id of the surface the controller is currently standing on.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="int">surfaceMaterialId</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetMinGroundXZContactDistance</name>
					<desc>Returns the distance to the closest contact point on the ground the player is standing on on the XZ-plane (relative to the controller).</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">distance</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetGroundVelocity</name>
					<desc>Returns the velocity (including velocity caused by angular forces) affecting the controller by the object the controller is standing on.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">groundVelocity</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetCurrentFriction</name>
					<desc>Returns the friction the controller is currently being affected by (by the ground).</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">friction</arg>
						</returnValues>
					</overload>
				</function>
			</group>
		</collection>
	</collection>
</root>
