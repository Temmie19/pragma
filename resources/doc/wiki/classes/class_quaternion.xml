<root>
	<collection type="library">
		<name>math</name>
		<collection type="class" gui="1">
			<name>Quaternion</name>
			<desc>TODO</desc>
			<group>
				<name>Directional</name>
				<function type="method" shared="1">
					<name>GetForward</name>
					<desc>Calculates the normalized forward direction of the quaternion.</desc>
					<lua></lua>
					<overload>
						<parameters>
						</parameters>
						<returnValues>
							<arg type="math.Vector">forward</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetRight</name>
					<desc>Calculates the normalized right direction of the quaternion.</desc>
					<lua></lua>
					<overload>
						<parameters>
						</parameters>
						<returnValues>
							<arg type="math.Vector">right</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetUp</name>
					<desc>Calculates the normalized up direction of the quaternion.</desc>
					<lua></lua>
					<overload>
						<parameters>
						</parameters>
						<returnValues>
							<arg type="math.Vector">up</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>GetOrientation</name>
					<desc>Calculates the normalized forward, right and up directions of the quaternion.</desc>
					<lua></lua>
					<overload>
						<parameters>
						</parameters>
						<returnValues>
							<arg type="math.Vector">forward</arg>
							<arg type="math.Vector">right</arg>
							<arg type="math.Vector">up</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>DotProduct</name>
				<desc>Calculates the angle between this quaternion and the specified quaternion.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Quaternion">rotation</arg>
					</parameters>
					<returnValues>
						<arg type="float">angle</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>Inverse</name>
					<desc>Inverses this quaternion.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>GetInverse</name>
					<desc>Returns the inverse of this quaternion.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">inverseRotation</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<group>
				<function type="method" shared="1">
					<name>Length</name>
					<desc>Returns the length of this quaternion.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="float">length</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>Normalize</name>
					<desc>Normalizes this quaternion to a unit-quaternion.</desc>
					<lua></lua>
					<overload></overload>
				</function>
				<function type="method" shared="1">
					<name>GetNormal</name>
					<desc>Returns a normalized copy of this quaternion.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">unitQuaternion</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>Copy</name>
				<desc>Creates a copy of this object.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="math.Quaternion">copy</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>Lerp</name>
				<desc>Linearly interpolates by the specified factor between this and the given quaternion. This is less accurate than [pragma:ref]math.Quaternion:Slerp[/pragma:ref], but also a lot cheaper.
Only use [pragma:ref]math.Quaternion:Slerp[/pragma:ref], if you really need high precision.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Quaternion">rotation</arg>
						<arg type="float">factor</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">interpQuat</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>Slerp</name>
				<desc>Spherically interpolates by the specified factor between this and the given quaternion. This is more accurate than [pragma:ref]math.Quaternion:Lerp[/pragma:ref], but also a lot more expensive. In general, you should avoid this, and use [pragma:ref]math.Quaternion:Lerp[/pragma:ref], unless you really need high precision.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Quaternion">rotation</arg>
						<arg type="float">factor</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">interpQuat</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>ToMatrix</name>
					<desc>Converts the quaternion to a rotation matrix and returns the result.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Mat4">rotMat</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ToEulerAngles</name>
					<desc>Converts the quaternion to euler angles and returns the result.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.EulerAngles.RotationOrder" default="math.EulerAngles.ROTATION_ORDER_YXZ">rotationOrder</arg>
						</parameters>
						<returnValues>
							<arg type="math.EulerAngles">angles</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>ToAxisAngle</name>
					<desc>Converts the quaternion to an axis and an angle.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Vector">axis</arg>
							<arg type="float">angle</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>Set</name>
				<desc>Changes the quaternion values to the specified arguments.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="float">w</arg>
						<arg type="float">x</arg>
						<arg type="float">y</arg>
						<arg type="float">z</arg>
					</parameters>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>RotateX</name>
					<desc>Rotates this quaternion around the x-axis by the specified angle amount.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">angle</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>RotateY</name>
					<desc>Rotates this quaternion around the y-axis by the specified angle amount.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">angle</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>RotateZ</name>
					<desc>Rotates this quaternion around the z-axis by the specified angle amount.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">angle</arg>
						</parameters>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>Rotate</name>
					<desc>Rotates this quaternion by the given angle around the specified axis / By the given euler angles.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Vector">axis</arg>
							<arg type="float">angle</arg>
						</parameters>
					</overload>
					<overload>
						<parameters>
							<arg type="math.EulerAngles">angles</arg>
						</parameters>
					</overload>
				</function>
			</group>
			<function type="method" shared="1">
				<name>ApproachDirection</name>
				<desc>Approaches this quaternion towards the specified direction and returns the result.</desc>
				<lua></lua>
				<overload>
					<parameters>
						<arg type="math.Vector">up</arg>
						<arg type="math.Vector">targetDirection</arg>
						<arg type="math.Vector2">rotationAmount</arg>
						<arg type="math.Vector2">pitchLimit</arg>
						<arg type="math.Vector2">yawLimit</arg>
						<arg type="math.Quaternion">pivotRotation</arg>
						<arg type="math.EulerAngles">angleOffset</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
						<arg type="math.Vector2">rotAmount</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">up</arg>
						<arg type="math.Vector">targetDirection</arg>
						<arg type="math.Vector2">rotationAmount</arg>
						<arg type="math.Vector2">pitchLimit</arg>
						<arg type="math.Vector2">yawLimit</arg>
						<arg type="math.Quaternion">pivotRotation</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
						<arg type="math.Vector2">rotAmount</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">up</arg>
						<arg type="math.Vector">targetDirection</arg>
						<arg type="math.Vector2">rotationAmount</arg>
						<arg type="math.Vector2">pitchLimit</arg>
						<arg type="math.Vector2">yawLimit</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
						<arg type="math.Vector2">rotAmount</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">up</arg>
						<arg type="math.Vector">targetDirection</arg>
						<arg type="math.Vector2">rotationAmount</arg>
						<arg type="math.Vector2">pitchLimit</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
						<arg type="math.Vector2">rotAmount</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">up</arg>
						<arg type="math.Vector">targetDirection</arg>
						<arg type="math.Vector2">rotationAmount</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
						<arg type="math.Vector2">rotAmount</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>GetConjugate</name>
				<desc>Returns the conjugate of this quaternion.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="math.Quaternion">conjugate</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>constructor</name>
				<desc>Creates a new Quaternion object.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="float">w</arg>
						<arg type="float">x</arg>
						<arg type="float">y</arg>
						<arg type="float">z</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">axis</arg>
						<arg type="float">angle</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">forward</arg>
						<arg type="math.Vector">right</arg>
						<arg type="math.Vector">up</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Quaternion">rotation</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
					</returnValues>
				</overload>
				<overload>
					<parameters>
						<arg type="math.Vector">forward</arg>
						<arg type="math.Vector">up</arg>
					</parameters>
					<returnValues>
						<arg type="math.Quaternion">rotation</arg>
					</returnValues>
				</overload>
			</function>
			<function type="method" shared="1">
				<name>tostring</name>
				<desc>Converts the quaternion to a string.</desc>
				<lua></lua>
				<overload>
					<returnValues>
						<arg type="string">quat</arg>
					</returnValues>
				</overload>
			</function>
			<group>
				<function type="method" shared="1">
					<name>-operator</name>
					<desc>Returns a negated copy of this object.</desc>
					<lua></lua>
					<overload>
						<returnValues>
							<arg type="math.Quaternion">rotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>operator/</name>
					<desc>Divides the quaternion by the specified value and returns them as a new Quaternion object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">value</arg>
						</parameters>
						<returnValues>
							<arg type="math.Quaternion">rotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1" commutative="1">
					<name>operator*</name>
					<desc>Multiplies the quaternion by the specified value and returns them as a new Quaternion object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">value</arg>
						</parameters>
						<returnValues>
							<arg type="math.Quaternion">rotation</arg>
						</returnValues>
					</overload>
					<overload>
						<parameters>
							<arg type="math.Quaternion">rotation</arg>
						</parameters>
						<returnValues>
							<arg type="math.Quaternion">rotation</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>operator==</name>
					<desc>Compares the specified quaternion to this quaternion and returns true if they are equal.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="math.Quaternion">rotation</arg>
						</parameters>
						<returnValues>
							<arg type="bool">equal</arg>
						</returnValues>
					</overload>
				</function>
				<function type="method" shared="1">
					<name>*operator</name>
					<desc>Multiplies the quaternion by the specified value and returns them as a new Quaternion object.</desc>
					<lua></lua>
					<overload>
						<parameters>
							<arg type="float">value</arg>
						</parameters>
						<returnValues>
							<arg type="math.Quaternion">angles</arg>
						</returnValues>
					</overload>
				</function>
			</group>
			<member type="float" mode="rw">
				<name>w</name>
				<desc>TODO</desc>
				<default>1.0</default>
			</member>
			<member type="float" mode="rw">
				<name>x</name>
				<desc>TODO</desc>
				<default>0.0</default>
			</member>
			<member type="float" mode="rw">
				<name>y</name>
				<desc>TODO</desc>
				<default>0.0</default>
			</member>
			<member type="float" mode="rw">
				<name>z</name>
				<desc>TODO</desc>
				<default>0.0</default>
			</member>
		</collection>
	</collection>
</root>
