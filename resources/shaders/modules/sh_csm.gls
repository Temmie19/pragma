#ifndef F_SH_CSM_GLS
#define F_SH_CSM_GLS

#include "sh_uniform_locations.gls"
#include "sh_limits.gls"
#include "../lighting/shadow/sh_shadow.gls"

layout(std140,set = SHADER_UNIFORM_CSM_SET,binding = SHADER_UNIFORM_CSM_BINDING) uniform CSM
{
	mat4 VP[4]; // View-Projection Matrix
	vec4 fard;
	int count;
} u_csm;
#ifdef GLS_FRAGMENT_SHADER
	layout(set = SHADER_UNIFORM_CSM_TEXTURE_ARRAY_SET,binding = SHADER_UNIFORM_CSM_TEXTURE_ARRAY_BINDING) uniform shadowMapSamplerType csmTextures[MAX_CSM_CASCADES];

	int get_csm_cascade_index()
	{
		/*int index = -1;
		for(int i=0;i<u_csm.count;i++)
		{
			if(gl_FragCoord.z < u_csm.fard[i])
			{
				index = i;
				break;
			}
		}*/ // Dynamic indexing doesn't work on all drivers
		if(u_csm.count > 0)
		{
			if(gl_FragCoord.z < u_csm.fard[0])
				return 0;
			if(u_csm.count > 1)
			{
				if(gl_FragCoord.z < u_csm.fard[1])
					return 1;
				if(u_csm.count > 2)
				{
					if(gl_FragCoord.z < u_csm.fard[2])
						return 2;
					if(u_csm.count > 3)
					{
						if(gl_FragCoord.z < u_csm.fard[3])
							return 3;
					}
				}
			}
		}
		return -1;
	}
#endif

#endif
