#ifndef F_FS_SPECULARMAPPING_GLS
#define F_FS_SPECULARMAPPING_GLS

#include "sh_uniform_locations.gls"
#include "sh_rendersettings.gls"

/*layout(std140,set = SHADER_UNIFORM_SPECULAR_SET,binding = 0) uniform Specular
{
	float phongScale;
} u_specular;*/ // Defined in push constants
#ifndef USE_SPECULAR_MAP
	#define USE_SPECULAR_MAP 1
	#define ENABLE_PHONG 1
#endif
#ifndef ENABLE_PHONG
	#define ENABLE_PHONG 0
#endif

#if USE_SPECULAR_MAP == 1
	layout(set = SHADER_UNIFORM_SPECULAR_MAP_SET,binding = SHADER_UNIFORM_SPECULAR_MAP_BINDING) uniform sampler2D u_specularMap;
#endif
//uniform bool u_useSpecularMap; // Defined in push constants

#if ENABLE_PHONG == 1
	#ifndef FC_USE_PHONG
		#define FC_USE_PHONG
		bool use_phong() {return (u_material.flags &FMAT_SPECULAR) != 0;}
	#endif

	#ifndef FC_GET_SPECULAR_COLOR
		#define FC_GET_SPECULAR_COLOR
		vec4 get_specular_color(vec2 uv)
		{
			vec4 col = u_material.phong;
		#if USE_SPECULAR_MAP == 1
			if(use_specular_map() == true)
				col.rgb = texture(u_specularMap,uv).rgb;
			else if(use_specular_from_normal_alpha() == true)
			{
				float a = texture(u_normalMap,uv).a;
				col.rgb = vec3(a,a,a);
			}
			else if(use_specular_from_diffuse_alpha() == true)
			{
				float a = texture(u_diffuseMap,uv).a;
				col.rgb = vec3(a,a,a);
			}
		#endif
			return col;
		}
	#endif
#endif

vec3 apply_phong(mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal,vec3 incidenceVector,vec4 specularColor,vec3 lightColor)
{
	vec3 viewDirection = normalize(u_renderSettings.posCam -fragPosWs);
	
	vec3 normal = normalize(transpose(inverse(mat3(mdlMatrix))) *fragNormal);
	vec3 dirHalf = normalize(incidenceVector +viewDirection);
	float spec = pow(max(dot(normal,dirHalf),0.0),specularColor.a);
#ifdef ENABLE_MATERIAL_PARAMETERS
	spec *= u_material.phongIntensity;
#endif
	return lightColor *specularColor.rgb *spec;
}

vec3 calc_phong(mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal,vec3 incidenceVector,vec4 specularColor,vec3 lightColor)
{
	vec3 r = vec3(0.0,0.0,0.0);
#if ENABLE_PHONG == 1
	if(use_phong() == true)
		return apply_phong(mdlMatrix,fragPosWs,fragNormal,incidenceVector,specularColor,lightColor);
#endif
	return r;
}

vec3 calc_phong(mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal,vec3 incidenceVector,vec3 lightColor,vec2 uv)
{
	vec3 specularColor = vec3(0.0,0.0,0.0);
#if ENABLE_PHONG == 1
	if(use_phong() == true)
	{
		vec4 specularColor = get_specular_color(uv);
		return apply_phong(mdlMatrix,fragPosWs,fragNormal,incidenceVector,specularColor,lightColor);
	}
#endif
	return specularColor;
}

#endif
