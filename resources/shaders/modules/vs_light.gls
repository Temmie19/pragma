#ifndef F_VS_LIGHT_GLS
#define F_VS_LIGHT_GLS

#include "sh_limits.gls"
#include "../lighting/sh_light_sources.gls"

void export_light_fragment_data(vec4 vertPosWs
#if USE_NORMAL_MAP == 1
	,mat4 mBone,vec3 normal,mat4 mdlMatrix
#endif
)
{
#if USE_NORMAL_MAP == 1
	/*vec3 tangent = normalize((mBone *vec4(in_vert_tangent,0.0)).xyz);
	vec3 bitangent = normalize((mBone *vec4(in_vert_bitangent,0.0)).xyz);
	mat3 MV3 = mat3(MV);
	mat3 TBN = transpose(mat3( // Required for normal mapping
		MV3 *tangent,
		MV3 *bitangent,
		MV3 *normal
	));*/
	vec3 tangent = normalize((mBone *vec4(-in_vert_tangent,0.0)).xyz);
	vec3 bitangent = normalize((mBone *vec4(in_vert_bitangent,0.0)).xyz);
	mat3 V = mat3(get_view_matrix());
	mat3 TBN = transpose(V *mat3(
		normalize((mdlMatrix *vec4(tangent,0.0)).xyz),
		normalize((mdlMatrix *vec4(bitangent,0.0)).xyz),
		normalize((mdlMatrix *vec4(normal,0.0)).xyz)
	));
	vs_out.TBN = TBN;
#else
	vs_out.TBN = mat4(1.0);
#endif
/*{
	int numLights = get_light_count();
	if(numLights > 0)
	{
#if USE_NORMAL_MAP == 1
		mat3 MV3 = mat3(MV);
		vec3 tangent = normalize((mBone *vec4(in_vert_tangent,0.0)).xyz);
		vec3 bitangent = normalize((mBone *vec4(in_vert_bitangent,0.0)).xyz);
		vec3 normal = normal;
		mat3 TBN = transpose(mat3( // Required for normal mapping
			MV3 *tangent,
			MV3 *bitangent,
			MV3 *normal
		));
#endif
		vec3 eyeDir_cs = vec3(0,0,0) -vs_out.vert_pos_cs.xyz;
		for(int i=0;i<MAX_LIGHTS;i++)
		{
			if(i >= numLights)
				break;
			LightSourceData light = get_light_source(i);
			if((light.flags &FLIGHT_TYPE_DIRECTIONAL) != 0)
			{
				vs_light_out[i].light_dir_cs = -(get_view_matrix() *vec4(light.direction,0.0)).xyz;
				vs_light_out[i].vert_pos_ls = vertPosWs; // VP Matrix is selected per fragment (By cascade), so we can't add it here yet
			}
			else
			{
				vec3 light_pos_cs = (get_view_matrix() *vec4(light.position,1.0)).xyz;
				vs_light_out[i].light_dir_cs = light_pos_cs +eyeDir_cs;

				//vs_light_out[i].vert_pos_ls = light.depthVP *vertPosWs;
				//vs_light_out[i].vert_pos_ls.z /= light.dist;
			}
#if USE_NORMAL_MAP == 1
			vs_light_out[i].light_dir_ts = TBN *vs_light_out[i].light_dir_cs;
#endif
		}
	}*/
}

#endif
