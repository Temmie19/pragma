#ifndef F_SH_NORMALMAPPING_GLS
#define F_SH_NORMALMAPPING_GLS

#ifndef USE_NORMAL_MAP
	#define USE_NORMAL_MAP 1
#endif

#if USE_NORMAL_MAP == 1
#include "sh_tangentspace.gls"
#endif

#ifdef GLS_FRAGMENT_SHADER
	#include "../lighting/sh_light_sources.gls"
	#include "sh_light_data.gls"
#if USE_NORMAL_MAP == 1
	#include "sh_material.gls"
	#include "sh_light_data.gls"

	layout(set = SHADER_UNIFORM_NORMAL_MAP_SET,binding = SHADER_UNIFORM_NORMAL_MAP_BINDING) uniform sampler2D u_normalMap;
	//layout(set = SHADER_UNIFORM_BUMP_MAP_SET,binding = 0) uniform sampler2D u_bumpMap;
	//layout(set = SHADER_UNIFORM_DISPLACEMENT_MAP_SET,binding = 0) uniform sampler2D u_displacementMap;
#endif
#if ENABLE_TANGENT_SPACE_NORMALS == 1
	vec3 calc_tangent_space_normal(vec2 uv)
	{
		vec3 ncol = texture(u_normalMap,uv).rgb;
		vec3 nmap;
		float normalMapScale = 1.0;
		nmap.xy	= (2.0 *ncol.rg - 1.0) *normalMapScale;
		nmap.z = sqrt(1.0 -dot(nmap.xy,nmap.xy));

		return normalize((fs_in.vert_tangent *nmap.x) +(fs_in.vert_bitangent *nmap.y) +(fs_in.vert_normal *nmap.z));
	}
#endif
	float calculate_normal_light_direction_angle(uint lightIdx,vec2 uv)
	{
		float cosTheta;
		LightSourceData light = get_light_source(lightIdx);
#if USE_NORMAL_MAP == 1
		if(use_normal_map() == true)
		{
			vec3 ntex_ts = normalize(texture(u_normalMap,uv).rgb *2.0 -1.0);
			vec3 n = ntex_ts;
			vec3 l = normalize(get_light_direction_ts(lightIdx));
			cosTheta = clamp(dot(n,l),0.0,1.0);
		}
		else
		{
			vec3 n = get_vertex_normal_cs();
			vec3 l = normalize(get_light_direction_cs(lightIdx));
			cosTheta = clamp(dot(n,l),0.0,1.0);
		}
#endif
		return cosTheta;
	}
#endif

#endif
