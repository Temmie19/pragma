#ifndef F_FS_WORLD_GLS
#define F_FS_WORLD_GLS

#ifndef ENABLE_LIGHT_DEBUG
#define ENABLE_LIGHT_DEBUG 1
#endif

#if ENABLE_LIGHT_DEBUG == 1
#include "../debug/fs_debug_info.gls"
#endif

#include "sh_vertex_data.gls"
#include "sh_normalmapping.gls"
#include "sh_parallaxmapping.gls"
#include "sh_vertex_data.gls"
#include "fs_diffusemap.gls"
#include "fs_glowmap.gls"
#include "fs_scene.gls"
#include "fs_material.gls"
#include "light_map/fs_lightmap.gls"
#include "../lighting/fs_lighting.gls"

#define DEBUG_RENDER_NORMAL 0
#define DEBUG_RENDER_UNLIT 1
#define DEBUG_RENDER_DEPTH_BUFFER 2
#define DEBUG_RENDER_NORMAL_MAP 3
#define DEBUG_RENDER_SPECULAR_MAP 4
#define DEBUG_RENDER_GLOW_MAP 5
#define DEBUG_RENDER_PARALLAX_MAP 6
#define DEBUG_RENDER_NORMALS 7

const int renderMode = DEBUG_RENDER_NORMAL;

vec4 get_processed_color(vec4 texCol,vec2 texCoords)
{
	if(texCol.a <= u_material.alphaDiscardThreshold)
		discard;
	vec4 colProcessed = vec4(1.0,1.0,1.0,1.0);
	vec3 diffuseColor = texCol.rgb;
	if(renderMode == DEBUG_RENDER_NORMAL)
	{
		vec4 colorMod = get_color_modifier();
		colProcessed.rgb = calculate_lighting(diffuseColor,texCoords,get_model_matrix(),get_vertex_position_ws(),fs_in.vert_normal);
#if USE_GLOW_MAP == 1
		colProcessed = add_glow_map_color(colProcessed,texCoords,colProcessed);
#endif
		colProcessed.r *= colorMod.r;
		colProcessed.g *= colorMod.g;
		colProcessed.b *= colorMod.b;
		colProcessed.a = texCol.a;
		if((u_material.flags &FMAT_BLACK_TO_ALPHA) != 0)
			colProcessed.a = clamp(max(max(colProcessed.r,colProcessed.g),colProcessed.b),0,1);
		
		// Deprecated: Fog is now calculated in post-processing
		// colProcessed.rgb = calculate_fog(colProcessed.rgb,u_renderSettings.nearZ,u_renderSettings.farZ).rgb;
	}
	else if(renderMode == DEBUG_RENDER_UNLIT)
	{
		colProcessed.rgb = diffuseColor.rgb;
#if USE_GLOW_MAP == 1
		colProcessed = add_glow_map_color(colProcessed,texCoords,colProcessed);
#endif
		colProcessed.a = texCol.a;
	}
	else if(renderMode == DEBUG_RENDER_DEPTH_BUFFER)
	{
		float z = 1.0 -(gl_FragCoord.z /gl_FragCoord.w) /4000.0;
		colProcessed.r = z;
		colProcessed.g = z;
		colProcessed.b = z;
		colProcessed.a = 1.f;
	}
	else if(renderMode == DEBUG_RENDER_NORMAL_MAP)
	{
#if USE_NORMAL_MAP == 1
		if(use_normal_map() == true)
			colProcessed.rgb = texture(u_normalMap,texCoords).rgb;
		else
#endif
			colProcessed.rgb = diffuseColor;
	}
	else if(renderMode == DEBUG_RENDER_SPECULAR_MAP)
	{
#if USE_SPECULAR_MAP == 1
		if(use_specular_map() == true)
			colProcessed.rgb = texture(u_specularMap,texCoords).rgb;
		else
#endif
			colProcessed.rgb = diffuseColor;
	}
	else if(renderMode == DEBUG_RENDER_GLOW_MAP)
	{
#if USE_GLOW_MAP == 1
		if(use_glow_map())
			colProcessed.rgb = texture(u_glowMap,texCoords).rgb;
		else
#endif
			colProcessed.rgb = diffuseColor;
	}
	else if(renderMode == DEBUG_RENDER_PARALLAX_MAP)
	{
#if USE_PARALLAX_MAP == 1
		if(use_parallax_map() == true)
			colProcessed.rgb = texture(u_parallaxMap,texCoords).rgb;
		else
#endif
			colProcessed.rgb = diffuseColor;
	}
	else if(renderMode == DEBUG_RENDER_NORMALS)
	{
		colProcessed = vec4(fs_in.vert_normal.xyz,1.0);
		if((colProcessed.r +colProcessed.g +colProcessed.b) < 0.0)
		{
			colProcessed.r = 1.0 +colProcessed.r;
			colProcessed.g = 1.0 +colProcessed.g;
			colProcessed.b = 1.0 +colProcessed.b;
		}
	}
	return colProcessed;
}

vec4 get_processed_color(vec4 texCol) {return get_processed_color(texCol,fs_in.vert_uv);}

#endif
