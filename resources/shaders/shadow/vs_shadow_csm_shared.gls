#ifndef F_VS_SHADOW_CSM_SHARED_GLS
#define F_VS_SHADOW_CSM_SHARED_GLS

#define SHADER_UNIFORM_INSTANCE_SET 0
#define SHADER_UNIFORM_INSTANCE_BINDING 0

#define SHADER_UNIFORM_BONE_MATRIX_SET SHADER_UNIFORM_INSTANCE_SET
#define SHADER_UNIFORM_BONE_MATRIX_BINDING (SHADER_UNIFORM_INSTANCE_BINDING +1)

#define SHADER_BONE_WEIGHT_ID_LOCATION 0
#define SHADER_BONE_WEIGHT_LOCATION 1
#define SHADER_VERTEX_BUFFER_LOCATION 2

#ifdef SHADOW_CSM_ENABLE_UV
	#define SHADER_UV_BUFFER_LOCATION 3
#endif

#ifndef USE_PUSH_CONSTANTS
	#define USE_PUSH_CONSTANTS 0
#endif

#include "../modules/vs_weighted.gls"
#include "../modules/sh_entity_info.gls"
#include "sh_shadow_csm.gls"

layout(location = SHADER_VERTEX_BUFFER_LOCATION) in vec3 u_vert_pos;
#ifdef SHADOW_CSM_ENABLE_UV
layout(location = SHADER_UV_BUFFER_LOCATION) in vec2 u_vert_uv;
#endif

#if USE_PUSH_CONSTANTS == 1
layout(push_constant) uniform pushConstants {
	mat4 MVP;
} u_depth;
#else
#define SHADER_UNIFORM_MATRIX_SET (SHADER_UNIFORM_BONE_MATRIX_SET +1)
#define SHADER_UNIFORM_MATRIX_BINDING 0

layout(std140,set = SHADER_UNIFORM_MATRIX_SET,binding = SHADER_UNIFORM_MATRIX_BINDING) uniform DepthMatrix
{
	mat4 MVP;
} u_depth;
#endif

void main()
{
	vec4 vpos = get_weighted_vertex_position(is_weighted(),vec4(u_vert_pos,1.0));
	gl_Position = u_depth.MVP *vpos;
#ifdef SHADOW_CSM_ENABLE_UV
	vs_out.vert_uv = u_vert_uv;
#endif
}

#endif
