#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define SHADER_UNIFORM_TEXTURE_SET 0
#define SHADER_UNIFORM_TEXTURE_BINDING 0

#define SHADER_UNIFORM_DEPTH_BUFFER_SET (SHADER_UNIFORM_TEXTURE_SET +1)
#define SHADER_UNIFORM_DEPTH_BUFFER_BINDING 0

#define SHADER_UNIFORM_REFRACTION_MAP_SET (SHADER_UNIFORM_DEPTH_BUFFER_SET +1)
#define SHADER_UNIFORM_REFRACTION_MAP_BINDING 0

#define SHADER_UNIFORM_CAMERA_SET (SHADER_UNIFORM_REFRACTION_MAP_SET +1)
#define SHADER_UNIFORM_CAMERA_BINDING 0

#define SHADER_UNIFORM_RENDER_SETTINGS_SET SHADER_UNIFORM_CAMERA_SET
#define SHADER_UNIFORM_RENDER_SETTINGS_BINDING (SHADER_UNIFORM_CAMERA_BINDING +1)

#define SHADER_UNIFORM_TIME_SET (SHADER_UNIFORM_RENDER_SETTINGS_SET +1)
#define SHADER_UNIFORM_TIME_BINDING 1

#define SHADER_UNIFORM_FOG_SET (SHADER_UNIFORM_TIME_SET +1)
#define SHADER_UNIFORM_FOG_BINDING 0

#include "../modules/fs_fog.gls"
#include "../modules/sh_math.gls"
#include "../modules/sh_time.gls"
#include "../modules/sh_camera_info.gls"
#include "../modules/sh_rendersettings.gls"
#include "../functions/sh_position_from_depth.gls"

layout(location = 0) in vec2 vs_vert_uv;

layout(set = SHADER_UNIFORM_TEXTURE_SET,binding = SHADER_UNIFORM_TEXTURE_BINDING) uniform sampler2D u_texture;
layout(set = SHADER_UNIFORM_DEPTH_BUFFER_SET,binding = SHADER_UNIFORM_DEPTH_BUFFER_BINDING) uniform sampler2D u_depthBuffer;
layout(set = SHADER_UNIFORM_REFRACTION_MAP_SET,binding = SHADER_UNIFORM_REFRACTION_MAP_BINDING) uniform sampler2D u_refractionMap;

layout(location = 0) out vec4 fs_color;

layout(push_constant) uniform PushConstants
{
	vec4 clipPlane;
} u_pushConstants;

void main()
{
	float d = texture(u_depthBuffer,vs_vert_uv).r;
	
	mat4 invVp = inverse(u_camera.VP);
	vec3 fragPosWs = calc_position_from_depth(d,vs_vert_uv,invVp);

	if(dot(vec4(fragPosWs.xyz,1.0),vec4(u_pushConstants.clipPlane.xyz,u_pushConstants.clipPlane.w -0.1)) > gl_ClipDistance[0])
	{
		 // We don't want fog above water surface
		fs_color = texture(u_texture,vs_vert_uv);
		return;
	}

	vec3 fragPosScreenWs = calc_position_from_depth(gl_FragCoord.z,vs_vert_uv,invVp);
	if(dot(vec4(fragPosScreenWs.xyz,1.0),vec4(u_pushConstants.clipPlane.xyz,u_pushConstants.clipPlane.w)) > gl_ClipDistance[0])
	{
		// Don't render fog below water surface if we're looking at the surface from above (if the camera is clipping the water plane). In this case the fog has already been rendered by the water shader.
		fs_color = texture(u_texture,vs_vert_uv);
		return;
	}

	// Apply screen refraction
	vec2 refractUv = vs_vert_uv +vec2(u_time.realTime,u_time.realTime) *0.02;

	vec4 refractCol = texture(u_refractionMap,refractUv);
	fs_color = texture(u_texture,vs_vert_uv +refractCol.xy *0.01);

	float depthDist = get_depth_distance(d,u_renderSettings.nearZ,u_renderSettings.farZ) *2.0;
	fs_color.rgb = calculate_fog(fs_color.rgb,depthDist);
}
