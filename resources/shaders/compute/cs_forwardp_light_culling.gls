#version 440

// Sources
// https://github.com/bcrusco/Forward-Plus-Renderer
// https://github.com/WindyDarian/Vulkan-Forward-Plus-Renderer

#define SHADER_UNIFORM_LIGHT_SOURCES_SET 0
#define SHADER_UNIFORM_LIGHT_SOURCES_BINDING 0

#define SHADER_UNIFORM_TILE_VIS_LIGHT_INDEX_BUFFER_SET SHADER_UNIFORM_LIGHT_SOURCES_SET
#define SHADER_UNIFORM_TILE_VIS_LIGHT_INDEX_BUFFER_BINDING (SHADER_UNIFORM_LIGHT_SOURCES_BINDING +1)

#define SHADER_UNIFORM_SHADOW_DATA_BUFFER_SET SHADER_UNIFORM_TILE_VIS_LIGHT_INDEX_BUFFER_SET
#define SHADER_UNIFORM_SHADOW_DATA_BUFFER_BINDING (SHADER_UNIFORM_TILE_VIS_LIGHT_INDEX_BUFFER_BINDING +1)

#define SHADER_UNIFORM_VIS_LIGHT_INDEX_BUFFER_SET SHADER_UNIFORM_SHADOW_DATA_BUFFER_SET
#define SHADER_UNIFORM_VIS_LIGHT_INDEX_BUFFER_BINDING (SHADER_UNIFORM_SHADOW_DATA_BUFFER_BINDING +1)

#define SHADER_UNIFORM_DEPTH_MAP_SET SHADER_UNIFORM_VIS_LIGHT_INDEX_BUFFER_SET
#define SHADER_UNIFORM_DEPTH_MAP_BINDING (SHADER_UNIFORM_VIS_LIGHT_INDEX_BUFFER_BINDING +1)

#define SHADER_UNIFORM_CAMERA_SET (SHADER_UNIFORM_LIGHT_SOURCES_SET +1)
#define SHADER_UNIFORM_CAMERA_BINDING 0

#define SHADER_UNIFORM_RENDER_SETTINGS_SET SHADER_UNIFORM_CAMERA_SET
#define SHADER_UNIFORM_RENDER_SETTINGS_BINDING (SHADER_UNIFORM_CAMERA_BINDING +1)

#include "../modules/sh_light_source.gls"
#include "../modules/sh_camera_info.gls"
#include "../modules/sh_rendersettings.gls"
#include "../lighting/sh_light_sources.gls"
#include "../functions/fs_linearize_depth.gls"
#include "cs_forwardp_settings.gls"

layout(std430,set = SHADER_UNIFORM_VIS_LIGHT_INDEX_BUFFER_SET,binding = SHADER_UNIFORM_VIS_LIGHT_INDEX_BUFFER_BINDING) buffer VisibleLightIndicesBuffer {
	uint visibleBits[];
} visibleLightIndicesBuffer;

layout(push_constant) uniform LightInfo
{
	uint lightCount;
} u_lightInfo;

layout(set = SHADER_UNIFORM_DEPTH_MAP_SET,binding = SHADER_UNIFORM_DEPTH_MAP_BINDING) uniform sampler2D u_sceneDepth;

// Shared values between all the threads in the group
shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visibleLightCount;
// Shared local storage for visible indices, will be written out to the global buffer at the end
shared int visibleLightIndices[MAX_SCENE_LIGHTS];
shared mat4 viewProjection;
shared mat4 view;

// vulkan ndc, minDepth = 0.0, maxDepth = 1.0
const vec2 ndc_upper_left = vec2(-1.0,-1.0);
const float ndc_near_plane = 0.0;
const float ndc_far_plane = 1.0;

struct ViewFrustum
{
	vec4 planes[6];
	vec3 points[8]; // 0-3 near 4-7 far
};
shared ViewFrustum frustum;

// Construct view frustum
ViewFrustum create_frustum(ivec2 tile_id,float min_depth,float max_depth)
{
	mat4 inv_projview = inverse(u_camera.VP);

	vec2 ndc_size_per_tile = 2.0 *vec2(FORWARDP_TILE_SIZE,FORWARDP_TILE_SIZE) /vec2(u_renderSettings.viewportW,u_renderSettings.viewportH);

	vec2 ndc_pts[4];  // corners of tile in ndc
	ndc_pts[0] = ndc_upper_left +tile_id *ndc_size_per_tile;  // upper left
	ndc_pts[1] = vec2(ndc_pts[0].x +ndc_size_per_tile.x,ndc_pts[0].y); // upper right
	ndc_pts[2] = ndc_pts[0] +ndc_size_per_tile;
	ndc_pts[3] = vec2(ndc_pts[0].x,ndc_pts[0].y + ndc_size_per_tile.y); // lower left

	ViewFrustum frustum;

	vec4 temp;
	for(int i=0; i<4;i++)
	{
		temp = inv_projview *vec4(ndc_pts[i],min_depth,1.0);
		frustum.points[i] = temp.xyz /temp.w;
		temp = inv_projview *vec4(ndc_pts[i],max_depth,1.0);
		frustum.points[i +4] = temp.xyz /temp.w;
	}

	vec3 temp_normal;
	for(int i=0;i<4;i++)
	{
		//Cax+Cby+Ccz+Cd = 0, planes[i] = (Ca, Cb, Cc, Cd)
		// temp_normal: normal without normalization
		temp_normal = cross(frustum.points[i] -u_renderSettings.posCam,frustum.points[i +1] -u_renderSettings.posCam);
		temp_normal = normalize(temp_normal);
		frustum.planes[i] = vec4(temp_normal,-dot(temp_normal,frustum.points[i]));
	}
	// near plane
	{
		temp_normal = cross(frustum.points[1] -frustum.points[0],frustum.points[3] -frustum.points[0]);
		temp_normal = normalize(temp_normal);
		frustum.planes[4] = vec4(temp_normal, -dot(temp_normal,frustum.points[0]));
	}
	// far plane
	{
		temp_normal = cross(frustum.points[7] -frustum.points[4],frustum.points[5] -frustum.points[4]);
		temp_normal = normalize(temp_normal);
		frustum.planes[5] = vec4(temp_normal,-dot(temp_normal,frustum.points[4]));
	}

	return frustum;
}

bool is_light_in_frustum(vec4 lightPosition,ViewFrustum frustum)
{
	vec3 lightPos = lightPosition.xyz;
	float lightDist = lightPosition.w;
	bool result = true;

    // Step1: sphere-plane test
	for(int i=0;i<6;i++)
	{
		if(dot(lightPos,frustum.planes[i].xyz) +frustum.planes[i].w  < -lightDist)
		{
			result = false;
			break;
		}
	}

    if(!result)
		return false;

    // Step2: bbox corner test (to reduce false positive)
    vec3 light_bbox_max = lightPos +vec3(lightDist);
    vec3 light_bbox_min = lightPos -vec3(lightDist);
    int probe;
    probe=0; for(int i=0; i<8; i++) probe += ((frustum.points[i].x > light_bbox_max.x)?1:0); if(probe==8) return false;
    probe=0; for(int i=0; i<8; i++) probe += ((frustum.points[i].x < light_bbox_min.x)?1:0); if(probe==8) return false;
    probe=0; for(int i=0; i<8; i++) probe += ((frustum.points[i].y > light_bbox_max.y)?1:0); if(probe==8) return false;
    probe=0; for(int i=0; i<8; i++) probe += ((frustum.points[i].y < light_bbox_min.y)?1:0); if(probe==8) return false;
    probe=0; for(int i=0; i<8; i++) probe += ((frustum.points[i].z > light_bbox_max.z)?1:0); if(probe==8) return false;
    probe=0; for(int i=0; i<8; i++) probe += ((frustum.points[i].z < light_bbox_min.z)?1:0); if(probe==8) return false;

	return true;
}


#define SHADOW_INDEX_INTEGER_COUNT ((MAX_ACTIVE_SHADOW_SOURCES /32) +1)

layout(local_size_x = FORWARDP_TILE_SIZE,local_size_y = FORWARDP_TILE_SIZE,local_size_z = 1) in;
void main()
{
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y *tileNumber.x +tileID.x;

	// Initialize shared global values for depth and light count
	if(gl_LocalInvocationIndex == 0)
	{
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visibleLightCount = 0;
		viewProjection = u_camera.VP;
		view = u_camera.V;
	}

	if(gl_WorkGroupID.x == 0 && gl_WorkGroupID.y == 0)
	{
		for(uint i=0;i<SHADOW_INDEX_INTEGER_COUNT;++i)
			visibleLightIndicesBuffer.visibleBits[i] = 0;
	}

	barrier();

	// Step 1: Calculate the minimum and maximum depth values (from the depth buffer) for this group's tile
	float maxDepth, minDepth;
	vec2 uv = vec2(location) /vec2(u_renderSettings.viewportW,u_renderSettings.viewportH);
	float depth = texture(u_sceneDepth,uv).r;

	// Convert depth to uint so we can do atomic min and max comparisons between the threads
	uint depthInt = floatBitsToUint(depth);
	atomicMin(minDepthInt,depthInt);
	atomicMax(maxDepthInt,depthInt);

	barrier();

	// Step 2: One thread should calculate the frustum planes to be used for this tile
	if(gl_LocalInvocationIndex == 0)
	{
		// Convert the min and max across the entire tile back to float
		minDepth = uintBitsToFloat(minDepthInt);
		maxDepth = uintBitsToFloat(maxDepthInt);

		frustum = create_frustum(tileID,minDepth,maxDepth);
	}

	barrier();

	// Step 3: Cull lights.
	// Parallelize the threads against the lights now.
	// Can handle 256 simultaneously. Anymore lights than that and additional passes are performed
	uint threadCount = FORWARDP_TILE_SIZE *FORWARDP_TILE_SIZE;
	uint passCount = (u_lightInfo.lightCount +threadCount -1) /threadCount;
	for(uint i=0; i<passCount;i++)
	{
		// Get the lightIndex to test for this thread / pass. If the index is >= light count, then this thread can stop testing lights
		uint lightIndex = i *threadCount +gl_LocalInvocationIndex;
		if(lightIndex >= u_lightInfo.lightCount)
			break;
		if((lightBuffer.data[lightIndex].flags &FLIGHT_TURNED_ON) == 0)
			continue;
		vec4 position = vec4(lightBuffer.data[lightIndex].position.xyz,1.0);
		float radius = lightBuffer.data[lightIndex].position.w;

		// We check if the light exists in our frustum
		/*float distance = 0.0;
		for (uint j = 0; j < 6; j++) {
			distance = dot(position, frustumPlanes[j]) +radius;

			// If one of the tests fails, then there is no intersection
			if (distance <= 0.0) {
				break;
			}
		}

		// If greater than zero, then it is a visible light
		if (distance > 0.0) {
			// Add index to the shared array of visible indices
			uint offset = atomicAdd(visibleLightCount, 1);
			visibleLightIndices[offset] = int(lightIndex);
		}*/
		if(((lightBuffer.data[lightIndex].flags &FLIGHT_TYPE_DIRECTIONAL) != 0 || is_light_in_frustum(lightBuffer.data[lightIndex].position,frustum)))
		{
			uint offset = atomicAdd(visibleLightCount, 1);
			visibleLightIndices[offset] = int(lightIndex);
		}
	}

	barrier();

	// One thread should fill the global light buffer
	if(gl_LocalInvocationIndex == 0)
	{
		uint offset = index *MAX_SCENE_LIGHTS; // Determine position in global buffer
		for(uint i=0;i<visibleLightCount;i++)
		{
			visibleLightTileIndicesBuffer.data[offset +i].index = visibleLightIndices[i];
			if(lightBuffer.data[visibleLightIndices[i]].shadowIndex != 0) // Light source with shadow?
			{
				uint shadowIdx = lightBuffer.data[visibleLightIndices[i]].shadowIndex -1; // Shadow index is offset by 1, index of 0 means no shadow
				uint integerIdx = shadowIdx /32;
				visibleLightIndicesBuffer.visibleBits[integerIdx] |= 1<<shadowIdx; // Set bit according to shadow buffer index
			}
		}

		if(visibleLightCount != MAX_SCENE_LIGHTS)
		{
			// Unless we have totally filled the entire array, mark its end with -1
			// Final shader step will use this to determine where to stop (without having to pass the light count)
			visibleLightTileIndicesBuffer.data[offset +visibleLightCount].index = -1;
		}
	}
}
