#ifndef F_FS_LIGHTING_GLS
#define F_FS_LIGHTING_GLS

#include "../modules/sh_normalmapping.gls"
#include "../modules/fs_specularmapping.gls"
#include "../modules/sh_rendersettings.gls"

#ifndef LIGHTING_USE_INCIDENCE_ANGLE
#define LIGHTING_USE_INCIDENCE_ANGLE 1
#endif

#define DEBUG_RENDER_LIGHT_DEPTH 0 // 1 = Draw depth from shadow depth map; 2 = Draw depth from current fragment depth

#if DEBUG_RENDER_LIGHT_DEPTH != 0
#include "../functions/fs_linearize_depth.gls"
#endif

#if ENABLE_LIGHT_DEBUG == 1
#include "../debug/fs_debug_info.gls"
#endif

#include "fs_lighting_directional.gls"
#include "fs_lighting_spot.gls"
#include "fs_lighting_point.gls"
#include "../modules/fs_ssao.gls"
#include "../compute/cs_forwardp_settings.gls"

bool is_fragment_in_shadow() // Only for spot-lights for the time being
{
	if(is_unlit() == true)
		return false;
	ivec2 location = ivec2(gl_FragCoord.xy);
	uint tileSize = get_tile_size();
	ivec2 tileID = location / ivec2(tileSize, tileSize);
	uint index = tileID.y * get_number_of_tiles_x() + tileID.x;
	uint offset = index * MAX_SCENE_LIGHTS;
	for (uint i = 0; i < MAX_SCENE_LIGHTS && visibleLightTileIndicesBuffer.data[offset + i].index != -1; i++) {
		uint lightIndex = visibleLightTileIndicesBuffer.data[offset + i].index;

		LightSourceData light = get_light_source(int(lightIndex));
		// TODO: Check if this is a spot light-source
		vec4 depthCoord = get_light_vertex_position(int(lightIndex));
		depthCoord.z *= light.position.w; // Undo transformation from get_light_vertex_position()
		depthCoord = depthCoord /light.position.w;
		float shadow = min(get_spot_light_shadow_sample(lightIndex,false),get_spot_light_shadow_sample(lightIndex,true));
		if(shadow != 1.0)
			return true;
	}
	return false;
}

vec3 test(int i,vec3 diffuseColor,vec2 texCoords,mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal,bool bUseNormal,vec3 fragNormalWs,vec3 finalColor)
{
	LightSourceData light = get_light_source(i);
	vec3 lightPos = light.position.xyz;
	vec3 lightColor = light.color.rgb;
	vec3 fragLightColor = diffuseColor *lightColor;
	vec3 posFromWorldSpace = lightPos -fragPosWs;

	// Specular
	vec3 incidenceVector;
	if((light.flags &FLIGHT_TYPE_DIRECTIONAL) != 0)
		incidenceVector = -light.direction.xyz;
	else
		incidenceVector = normalize(posFromWorldSpace);
	vec3 specularColor = calc_phong(mdlMatrix,fragPosWs,fragNormal,incidenceVector,lightColor,texCoords);

	float cosTheta = 1.0;
	// FIXME
#if LIGHTING_USE_INCIDENCE_ANGLE == 1
	if(bUseNormal == true)
		cosTheta = calculate_normal_light_direction_angle(i,texCoords);
#else
	if(bUseNormal == true)
	{
		vec3 l = normalize(get_light_direction_cs(i));
		cosTheta = clamp(dot(fragNormalWs,l),0.0,1.0);
	}
#endif

	if((light.flags &FLIGHT_TYPE_SPOT) != 0)
		finalColor.rgb = calculate_spot_lighting(i,i,finalColor.rgb,diffuseColor,specularColor,cosTheta,posFromWorldSpace);
	else if((light.flags &FLIGHT_TYPE_POINT) != 0)
	{
		float lightDist = length(lightPos -fragPosWs);
		finalColor.rgb = calculate_point_lighting(i,i,finalColor.rgb,fragLightColor,specularColor,cosTheta,lightDist,fragPosWs);
	}
	else
		finalColor.rgb = calculate_directional_lighting(i,finalColor.rgb,fragLightColor,specularColor,cosTheta);
	return finalColor;
}

vec3 calculate_lighting(vec3 diffuseColor,vec2 texCoords,mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal,bool bUseNormal,vec3 fragNormalWs)
{
	if(is_unlit() == true)
		return diffuseColor;

	vec3 ambientColor = vec3(0.0,0.0,0.0);
	vec3 finalColor = vec3(0.0,0.0,0.0);
	float ssaoFactor = 1.0;
#if ENABLE_LIGHTMAP == 1
	if(is_light_map_enabled())
	{
		vec4 colLightMap = texture(u_lightMap,fs_in.vert_uv_lightmap.xy);
		colLightMap.rgb /= 255.0;
		finalColor.rgb = diffuseColor *colLightMap.rgb;
	}
	else
#endif
	{
		ambientColor = diffuseColor;
		ambientColor *= u_renderSettings.ambientColor.rgb *u_renderSettings.ambientColor.a;
		if(is_ssao_enabled() == true)
			ssaoFactor = get_ssao_occlusion();
	}

	ivec2 location = ivec2(gl_FragCoord.xy);
	uint tileSize = get_tile_size();
	ivec2 tileID = location / ivec2(tileSize, tileSize);
	uint index = tileID.y * get_number_of_tiles_x() + tileID.x;
	uint offset = index * MAX_SCENE_LIGHTS;
	for (uint i = 0; i < MAX_SCENE_LIGHTS && visibleLightTileIndicesBuffer.data[offset + i].index != -1; i++) {
		uint lightIndex = visibleLightTileIndicesBuffer.data[offset + i].index;
		finalColor = test(int(lightIndex),diffuseColor,texCoords,mdlMatrix,fragPosWs,fragNormal,bUseNormal,fragNormalWs,finalColor);
	}
	finalColor += ambientColor;
	
#if ENABLE_LIGHT_DEBUG == 1
	if((u_debug.flags &DEBUG_FORWARD_PLUS_HEATMAP) != 0)
	{
		ivec2 location = ivec2(gl_FragCoord.xy);
		uint tileSize = get_tile_size();
		ivec2 tileID = location /ivec2(tileSize,tileSize);
		uint index = tileID.y *get_number_of_tiles_x() +tileID.x;
		uint offset = index *MAX_SCENE_LIGHTS;
		uint numLights = 0;
		for (uint i = 0; i < MAX_SCENE_LIGHTS && visibleLightTileIndicesBuffer.data[offset + i].index != -1; i++)
		{
			uint lightIndex = visibleLightTileIndicesBuffer.data[offset + i].index;
			LightSourceData light = get_light_source(int(lightIndex));
			if((light.flags &FLIGHT_TYPE_DIRECTIONAL) == 0)
				++numLights;
		}
		if(numLights > 0)
		{
			const float dbgIntensity = 0.95;
			finalColor.rgb = (vec3(tileID.x /float(tileSize),tileID.y /float(tileSize),0) *(numLights /float(5))) *pow(1.0,dbgIntensity *1.0)
					+finalColor.rgb *(1.0 -dbgIntensity);
		}
	}
#endif
	
	return finalColor *ssaoFactor;
}

vec3 calculate_lighting(vec3 diffuseColor,vec2 texCoords,mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal,bool bUseNormal) {return calculate_lighting(diffuseColor,texCoords,mdlMatrix,fragPosWs,fragNormal,bUseNormal,vec3(0.0,0.0,0.0));}
vec3 calculate_lighting(vec3 diffuseColor,vec2 texCoords,mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal) {return calculate_lighting(diffuseColor,texCoords,mdlMatrix,fragPosWs,fragNormal,true);}
vec3 calculate_lighting(vec3 diffuseColor,vec2 texCoords,vec3 fragPosWs,vec3 fragNormal) {return calculate_lighting(diffuseColor,texCoords,mat4(1.0),fragPosWs,fragNormal);}
vec3 calculate_lighting(vec3 diffuseColor,vec2 texCoords,mat4 mdlMatrix,vec3 fragPosWs,vec3 fragNormal,vec3 fragNormalWs) {return calculate_lighting(diffuseColor,texCoords,mdlMatrix,fragPosWs,fragNormal,true,fragNormalWs);}

#endif
