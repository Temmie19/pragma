#ifndef F_FS_SHADOW_POINT_GLS
#define F_FS_SHADOW_POINT_GLS

#include "../../modules/sh_camera_info.gls"
#include "../../modules/sh_math.gls"
#include "../../modules/sh_rendersettings.gls"
#include "sh_shadow.gls"

float get_shadow_value(samplerCube shadowMap,vec3 c,float fragDepth)
{
	float d = texture(shadowMap,c).r;
	return (d < fragDepth) ? 0.0 : 1.0;
}

float exp_scale_factor(float v,float e) // Grows more quickly the closer it comes to 1
{
	return 1.0 -pow((1.0 -v),e);
}

float calculate_point_shadow(vec3 fragPosWs,samplerCube shadowMap,float fragDepth,vec3 lightPosition,float bias,const float maxSampleOffset,const int samples)
{
	vec3 lightVec = normalize(fragPosWs -lightPosition);

	float biasDepth = fragDepth -bias;
	if(samples <= 1)
		return get_shadow_value(shadowMap,lightVec,biasDepth);
	float offset = max(maxSampleOffset *(1.0 -exp_scale_factor(fragDepth,6.4)),MIN_SHADOW_SAMPLE_OFFSET);
	float nsamples = cbrt(float(samples));
	float inc = (offset /nsamples) *2.0;

	float shadow = 0.0;
	for(float x=-offset;x<offset;x+=inc)
	{
		for(float y=-offset;y<offset;y+=inc)
		{
			for(float z=-offset;z<offset;z+=inc)
				shadow += get_shadow_value(shadowMap,lightVec +vec3(x,y,z),biasDepth);
		}
	}
	shadow /= float(samples);
	return shadow;
}

float calculate_point_shadow(vec3 fragPosWs,samplerCube shadowMap,float fragDepth,vec3 lightPosition)
{
	float bias = 0.01 *exp_scale_factor(fragDepth,0.9);
	float maxSampleOffset = 0.0;
	int samples = 0;
	int numPoissonSamples = 0;

	int quality = u_renderSettings.shaderQuality;
	if(quality > 1)
	{
		numPoissonSamples = 2;
		if(quality > 5)
		{
			maxSampleOffset = 0.004;
			if(quality > 7)
			{
				if(quality == 10)
					samples = pow3(4);
				else
					samples = pow3(3);
			}
			else
				samples = pow3(2);
		}
		else
		{
			maxSampleOffset = MIN_SHADOW_SAMPLE_OFFSET;
			samples = pow3(1);
		}
	}
	return calculate_point_shadow(fragPosWs,shadowMap,fragDepth,lightPosition,bias,maxSampleOffset,samples);
}

#endif
