#ifndef F_SH_LIGHT_SOURCES_GLS
#define F_SH_LIGHT_SOURCES_GLS

#include "../modules/sh_uniform_locations.gls"
#include "../modules/sh_vertex_data_locations.gls"
#include "../modules/sh_limits.gls"
#include "../modules/sh_light_source.gls"
#include "../modules/sh_math.gls"
#include "sh_vis_light_buffer.gls"

const int LIGHT_TYPE_DIRECTIONAL = 1;
const int LIGHT_TYPE_POINT = 2;
const int LIGHT_TYPE_SPOT = 3;

layout(std430,set = SHADER_UNIFORM_LIGHT_SOURCES_SET,binding = SHADER_UNIFORM_LIGHT_SOURCES_BINDING) readonly buffer LightBuffer {
	LightSourceData data[];
} lightBuffer;

LightSourceData get_light_source(int i)
{
	return lightBuffer.data[i];
}

struct ShadowData
{
	mat4 depthVP;
	mat4 view;
	mat4 projection;
};
layout(std430,set = SHADER_UNIFORM_SHADOW_DATA_BUFFER_SET,binding = SHADER_UNIFORM_SHADOW_DATA_BUFFER_BINDING) readonly buffer ShadowBuffer {
	ShadowData data[];
} shadowBuffer;

// See https://de45xmedrsdbp.cloudfront.net/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf ("Real Shading in Unreal Engine 4" - Lighting Model)
float calc_light_falloff(in float distance,in float radius)
{
	float falloff = 0;
	float fDistOverRadius = pow4(distance /radius);
	falloff = pow2(clamp(1.0 -fDistOverRadius,0.0,1.0));
	falloff /= pow2(units_to_meters(distance)) +1.0;
	return falloff;
}

#endif
