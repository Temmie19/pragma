#ifndef F_VS_PARTICLE_VERTEX_GLS
#define F_VS_PARTICLE_VERTEX_GLS

#include "sh_particle_mode.gls"
#include "../modules/sh_math.gls"

layout(location = SHADER_VERTEX_BUFFER_LOCATION) in vec2 in_squareVertices;
layout(location = SHADER_XYZS_BUFFER_LOCATION) in vec4 in_xyzs;

#ifndef ENABLE_PARTICLE_ROTATION
	#define ENABLE_PARTICLE_ROTATION 1
#endif

#ifndef ENABLE_PARTICLE_ORIENTATION
	#define ENABLE_PARTICLE_ORIENTATION 1
#endif

#ifndef ENABLE_PARTICLE_LENGTH
	#define ENABLE_PARTICLE_LENGTH 1
#endif

#if ENABLE_PARTICLE_ROTATION == 1
	layout(location = SHADER_ROTATION_BUFFER_LOCATION) in float in_rotation;
#endif

#if ENABLE_PARTICLE_LENGTH == 1
	layout(location = SHADER_LENGTH_BUFFER_LOCATION) in float in_length;
#endif

float get_particle_extent(float radius) {return sqrt(pow2(radius) *2.0);} // Convert radius to box extent

vec3 get_corner_particle_vertex_position(vec3 origin
#if ENABLE_PARTICLE_ORIENTATION == 1
	,int orientation
#endif
)
{
	vec3 particleCenterWs = in_xyzs.xyz;
	vec2 vsize = vec2(get_particle_extent(in_xyzs.w),get_particle_extent(in_length));
	vec3 squareVert = vec3(in_squareVertices,0.0);
#if ENABLE_PARTICLE_ORIENTATION == 1
	vec3 right;
	vec3 up;
	switch(orientation)
	{
		case PARTICLE_ORIENTATION_TYPE_UPRIGHT:
			vec3 dir = u_instance.camUp_ws; // 'camUp_ws' is the particle world-rotation if this orientation type is selected
			right = cross(normalize(particleCenterWs -origin),dir);
			up = -dir;
			break;
		case PARTICLE_ORIENTATION_TYPE_STATIC:
			right = vec3(0,1,0);
			up = u_instance.camUp_ws;
			break;
		case PARTICLE_ORIENTATION_TYPE_WORLD:
			up = -normalize(u_instance.camUp_ws);
			right = -normalize(u_instance.camRight_ws);
			vsize = vec2(u_instance.nearZ,u_instance.farZ);
			break;
		default:
			right = u_instance.camRight_ws;
			up = u_instance.camUp_ws;
	}
#if ENABLE_PARTICLE_ROTATION == 1
	squareVert = (get_rotation_matrix(normalize(vec3(0,0,1)),radians(in_rotation)) *vec4(squareVert.xyz,1)).xyz;
#endif
#else
	vec3 right = u_instance.camRight_ws;
	vec3 up = u_instance.camUp_ws;
#endif
	return right *squareVert.x *vsize.x
		+up *squareVert.y *vsize.y;
}

vec3 get_particle_vertex_position(vec3 origin
#if ENABLE_PARTICLE_ORIENTATION == 1
	,int orientation
#endif
)
{
	return in_xyzs.xyz +get_corner_particle_vertex_position(origin,orientation);
}

#if ENABLE_PARTICLE_ORIENTATION == 1
	vec3 get_corner_particle_vertex_position(vec3 origin)
	{
		return get_corner_particle_vertex_position(origin,u_instance.orientation);
	}
	vec3 get_particle_vertex_position(vec3 origin)
	{
		return get_particle_vertex_position(origin,u_instance.orientation);
	}
#endif

#endif
