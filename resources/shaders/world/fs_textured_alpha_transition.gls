#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include "sh_textured_alpha_transition.gls"
#include "../debug/fs_debug_csm.gls"
#include "../modules/fs_world.gls"
#include "../modules/sh_csm.gls"
#include "../modules/sh_parallaxmapping.gls"

#define SHADER_UNIFORM_DIFFUSE2_MAP_BINDING (SHADER_UNIFORM_GLOW_MAP_BINDING +1)
#define SHADER_UNIFORM_DIFFUSE3_MAP_BINDING (SHADER_UNIFORM_DIFFUSE2_MAP_BINDING +1)

layout(set = SHADER_UNIFORM_DIFFUSE_MAP_SET,binding = SHADER_UNIFORM_DIFFUSE2_MAP_BINDING) uniform sampler2D u_diffuseMap2;
layout(set = SHADER_UNIFORM_DIFFUSE_MAP_SET,binding = SHADER_UNIFORM_DIFFUSE3_MAP_BINDING) uniform sampler2D u_diffuseMap3;

void main()
{
	vec2 texCoords = apply_parallax(use_parallax_map(),fs_in.vert_uv);
	vec3 diffuse = get_processed_color(get_texture_color(u_diffuseMap,texCoords),texCoords).xyz;
	if(u_material.alphaCount > 0)
	{
		vec3 diffuse2 = get_processed_color(get_texture_color(u_diffuseMap2,texCoords),texCoords).xyz;
		if(u_material.alphaCount > 1)
		{
			vec3 diffuse3 = get_processed_color(get_texture_color(u_diffuseMap3,texCoords),texCoords).xyz;
			diffuse = diffuse *(1.0 -(fs_disp_in.alpha.x +fs_disp_in.alpha.y)) +diffuse2 *fs_disp_in.alpha.x +diffuse3 *fs_disp_in.alpha.y;
		}
		else
			diffuse = diffuse *(1.0 -fs_disp_in.alpha.x) +diffuse2 *fs_disp_in.alpha.x;
	}
	fs_color = vec4(diffuse.xyz,1);
	fs_color = debug_get_csm_cascade_color(fs_color);
	//fs_color = vec4(fs_in.vert_normal.xyz,1.0);
	extract_bright_color(fs_color);
}
