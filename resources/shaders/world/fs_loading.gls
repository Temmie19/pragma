#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

// http://glslsandbox.com/e#27991.1

// Created by inigo quilez - iq/2015
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

#define USE_DIFFUSE_MAP 0
#define USE_NORMAL_MAP 0
#define USE_SPECULAR_MAP 0
#define USE_PARALLAX_MAP 0
#define USE_GLOW_MAP 0

#include "../modules/sh_vertex_data.gls"
#include "../modules/sh_time.gls"
#include "../modules/fs_world.gls"
#include "../modules/sh_csm.gls"
#include "../modules/sh_math.gls"

vec4 get_color(vec2 uvCoords)
{
	vec2 resolution = vec2(1.0,1.0);
	vec2 uv = 256.0 *(uvCoords /resolution.x);
	float time = real_time();

	uv /= 16.0;

	vec2 a = floor(uv);
	vec2 b = fract(uv);

	vec4 w = fract((sin(a.x *7.0 +31.0 *a.y +0.01 *time) +vec4(0.035,0.01,0.0,0.7)) *13.545317); // randoms

	vec3 col = 
		smoothstep(0.45,0.55,w.w) * // intensity
		vec3(sqrt(16.0 *b.x *b.y *(1.0 -b.x) *(1.0 -b.y))); // pattern
	col = pow(2.5 *col,vec3(1.0,1.0,0.7)); // contrast and color shape

	return vec4(col,1.0);
}

void main()
{
	fs_color = get_processed_color(get_color(fs_in.vert_uv),fs_in.vert_uv);
	fs_color.a = 1.0;
	extract_bright_color(fs_color);
}