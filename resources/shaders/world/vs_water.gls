#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include "../modules/vs_world.gls"

void main()
{
	mat4 mdlMatrix = get_model_matrix();
	vec3 vertPos = in_vert_pos;
	mat4 MV = u_camera.V *mdlMatrix;
	mat4 MVP = u_camera.P *MV;

	mat4 mBone = calc_bone_matrix(is_weighted());
	vec4 vpos = mBone *vec4(vertPos,1.0);

	gl_Position = MVP *vpos;

	vec4 vposWs = mdlMatrix *vpos;
	vposWs.xyz /= vposWs.w;
	vposWs.w = 1.0;

	float lenSqrClipPlane = length_sqr(u_material.clipPlane);
	if(lenSqrClipPlane > 0.0)
	{
		float lenClipPlane = sqrt(lenSqrClipPlane);
		gl_ClipDistance[0] = dot(vec4(vposWs.xyz,1.0),vec4(u_material.clipPlane /lenClipPlane,lenClipPlane));
	}
	else
		gl_ClipDistance[0] = 1.0;

	vec3 normal = normalize((mBone *vec4(in_vert_normal,0.0)).xyz);
	vs_out.vert_pos_ws = vposWs.xyz;
	//vs_out.vert_pos_cs = (u_camera.V *vposWs).xyz;

	vs_out.vert_normal = normal;
	vs_out.vert_normal_cs = (u_camera.V *mdlMatrix *vec4(normal,0)).xyz;
	
	vs_out.vert_uv = in_vert_uv;

#if ENABLE_TANGENT_SPACE_NORMALS == 1
	vs_out.vert_tangent = normalize((mBone *vec4(in_vert_tangent,0.0)).xyz);
	vs_out.vert_bitangent = normalize((mBone *vec4(in_vert_bitangent,0.0)).xyz);
#endif

	export_light_fragment_data(vposWs,mBone,normal,mdlMatrix);//MV);
	//export_world_fragment_data();
}
