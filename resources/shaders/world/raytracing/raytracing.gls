#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (local_size_x = 4,local_size_y = 4) in;

#define SHADER_OUTPUT_IMAGE_SET 0
#define SHADER_OUTPUT_IMAGE_BINDING 0

#define SHADER_GAME_SCENE_SET 1
#define SHADER_GAME_SCENE_BINDING 0

#define SHADER_UNIFORM_CAMERA_SET 2
#define SHADER_UNIFORM_CAMERA_BINDING 0

#define SHADER_UNIFORM_RENDER_SETTINGS_SET 2
#define SHADER_UNIFORM_RENDER_SETTINGS_BINDING 1

#define SHADER_UNIFORM_LIGHT_SOURCES_SET 3
#define SHADER_UNIFORM_LIGHT_SOURCES_BINDING 0

#define SHADER_UNIFORM_IRRADIANCE_MAP_SET 4
#define SHADER_UNIFORM_IRRADIANCE_MAP_BINDING 0

#define SHADER_UNIFORM_PREFILTER_MAP_SET SHADER_UNIFORM_IRRADIANCE_MAP_SET
#define SHADER_UNIFORM_PREFILTER_MAP_BINDING (SHADER_UNIFORM_IRRADIANCE_MAP_BINDING +1)

#define SHADER_UNIFORM_BRDF_MAP_SET SHADER_UNIFORM_IRRADIANCE_MAP_SET
#define SHADER_UNIFORM_BRDF_MAP_BINDING (SHADER_UNIFORM_PREFILTER_MAP_BINDING +1)

layout(set = SHADER_OUTPUT_IMAGE_SET,binding = SHADER_OUTPUT_IMAGE_BINDING,rgba8) uniform image2D raytracedImage;

#include "/modules/sh_camera_info.gls"
#include "/modules/sh_rendersettings.gls"
#include "/modules/sh_math.gls"
#include "/modules/sh_light_source.gls"
#include "/modules/sh_pbr.gls"
#include "/math/camera.gls"
#include "/math/intersection.gls"
#include "game_scene_data.gls"
#include "/modules/fs_ibl.gls"

struct Ray
{
	vec3 origin;
	vec3 direction;
	float distSqr;
};

layout(std430,set = SHADER_UNIFORM_LIGHT_SOURCES_SET,binding = SHADER_UNIFORM_LIGHT_SOURCES_BINDING) readonly buffer LightBuffer {
	LightSourceData data[];
} lightBuffer;

LightSourceData get_light_source(uint lightIndex)
{
	return lightBuffer.data[lightIndex];
}

// See https://de45xmedrsdbp.cloudfront.net/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf ("Real Shading in Unreal Engine 4" - Lighting Model)
float calc_light_falloff(in float distance,in float radius)
{
	float falloff = 0;
	float fDistOverRadius = pow4(distance /radius);
	falloff = pow2(clamp(1.0 -fDistOverRadius,0.0,1.0));
	falloff /= pow2(units_to_meters(distance)) +1.0;
	return falloff;
}

float calc_point_light_attenuation(uint lightIdx,vec3 fragWorldPos)
{
	LightSourceData light = get_light_source(lightIdx);
	float lightDist = length(light.position.xyz -fragWorldPos);
	float attenuation = calc_light_falloff(lightDist,light.position.w);
	attenuation = pow(attenuation,light.falloffExponent); // Distance falloff
	return attenuation;
}

#include "../fs_pbr_lighting.gls"

//////////////////////////////

layout(push_constant) uniform PushConstants {
	uint numMeshes;
	uint numLights;
	uint width;
	uint height;
	float fov;
	uint pxOffset; // First 16 bits = x-offset, last 16 bits = y-offset of the target image
	uint renderFlags;
} u_pushConstants;

#define FRENDER_NO_IBL (FSUB_MESH_USE_NORMAL_MAP<<1)

uint get_pixel_offset_x()
{
	return (u_pushConstants.pxOffset<<16)>>16;
}

uint get_pixel_offset_y()
{
	return u_pushConstants.pxOffset>>16;
}

bool is_mesh_visible(in SubMeshInfoData meshData)
{
	uint renderModeFlags = FSUB_MESH_RENDER_MODE_WORLD | FSUB_MESH_RENDER_MODE_VIEW | FSUB_MESH_RENDER_MODE_SKYBOX | FSUB_MESH_RENDER_MODE_WATER;
	return (meshData.flags &FSUB_MESH_VISIBLE) != 0 && ((meshData.flags &renderModeFlags) &(u_pushConstants.renderFlags &renderModeFlags)) != 0 &&
		meshData.materialArrayIndex != INVALID_ARRAY_INDEX && meshData.entityBufferIndex != INVALID_ARRAY_INDEX;
}

struct RaycastHit
{
	float fragDepth;
	Vertex v0;
	Vertex v1;
	Vertex v2;
	vec3 faceP0;
	vec3 faceP1;
	vec3 faceP2;
	vec3 hitPoint;
	vec3 tuv;
	MaterialInfo material;
	SubMeshInfoData mesh;
};

void raycast_mesh_detail(
	in vec3 rayOrigin,in vec3 rayDir,
	in EntityInstanceData instanceData,in SubMeshInfoData subMeshInfo,in MaterialInfo matInfo,
	inout RaycastHit hitResult
)
{
	uint numTris = subMeshInfo.numTriangles;
	for(uint i=0;i<numTris;++i)
	{
		uint triVertexOffset = i *3;
		uint idx0 = get_triangle_vertex_index(subMeshInfo.indexBufferStartIndex +triVertexOffset);
		uint idx1 = get_triangle_vertex_index(subMeshInfo.indexBufferStartIndex +triVertexOffset +1);
		uint idx2 = get_triangle_vertex_index(subMeshInfo.indexBufferStartIndex +triVertexOffset +2);

		Vertex v0 = get_vertex(subMeshInfo.vertexBufferStartIndex +idx0);
		Vertex v1 = get_vertex(subMeshInfo.vertexBufferStartIndex +idx1);
		Vertex v2 = get_vertex(subMeshInfo.vertexBufferStartIndex +idx2);

		vec3 pos0 = v0.position.xyz;
		vec3 pos1 = v1.position.xyz;
		vec3 pos2 = v2.position.xyz;

		if((instanceData.flags.x &FINSTANCE_WEIGHTED) != 0 && subMeshInfo.vertexWeightBufferIndex != INVALID_ARRAY_INDEX)
		{
			VertexWeight vw0 = vertexWeightBuffer.weights[subMeshInfo.vertexWeightBufferIndex +idx0];
			VertexWeight vw1 = vertexWeightBuffer.weights[subMeshInfo.vertexWeightBufferIndex +idx1];
			VertexWeight vw2 = vertexWeightBuffer.weights[subMeshInfo.vertexWeightBufferIndex +idx2];
			mat4 m0 = mat4(1.0);
			mat4 m1 = mat4(1.0);
			mat4 m2 = mat4(1.0);
			//uint boneBufferStartIndex = 512;
			//m0 = boneMatrixBuffer.data[subMeshInfo.boneBufferStartIndex].matrices[0];
			for(int i=0;i<BONE_WEIGHT_COUNT;++i)
			{
				if(vw0.boneIds[i] != -1)
					m0 += vw0.weights[i] *boneMatrixBuffer.data[subMeshInfo.boneBufferStartIndex].matrices[vw0.boneIds[i]];
				if(vw1.boneIds[i] != -1)
					m1 += vw1.weights[i] *boneMatrixBuffer.data[subMeshInfo.boneBufferStartIndex].matrices[vw1.boneIds[i]];
				if(vw2.boneIds[i] != -1)
					m2 += vw2.weights[i] *boneMatrixBuffer.data[subMeshInfo.boneBufferStartIndex].matrices[vw2.boneIds[i]];
			}
			// Apply matrix
			// TODO: get_weighted_vertex_position
			pos0 = (m0 *vec4(pos0,1.0)).xyz;
			pos1 = (m1 *vec4(pos1,1.0)).xyz;
			pos2 = (m2 *vec4(pos2,1.0)).xyz;
		}

		//pos0.z = -pos0.z;
		//pos1.z = -pos1.z;
		//pos2.z = -pos2.z;

		float t;
		float u;
		float v;
		//bool rayTriIntersection = rayTriangleIntersect(ray.origin,ray.direction,origin +pos0,origin +pos1,origin +pos2,t,u,v);
		vec3 tuv = intersect_ray_triangle(rayOrigin,rayDir,pos0,pos1,pos2);
		if(tuv.x > 0.0)
		{
			{
				u = tuv.y;
				v = tuv.z;
				t = 1.0 -(u +v);
				vec3 hitPoint = pos0.xyz *t +pos1.xyz *u +pos2.xyz *v;
				float depth = length_sqr(hitPoint -rayOrigin);
				if(depth >= hitResult.fragDepth)
					continue;
				hitResult.fragDepth = depth;
				hitResult.hitPoint = hitPoint;
				hitResult.material = matInfo;
				hitResult.mesh = subMeshInfo;
				hitResult.v0 = v0;
				hitResult.v1 = v1;
				hitResult.v2 = v2;
				hitResult.faceP0 = pos0;
				hitResult.faceP1 = pos1;
				hitResult.faceP2 = pos2;
				hitResult.tuv = vec3(t,u,v);

	//vec3 emission = Light(hitPoint);
	//if (length(emission) > Epsilon)
		//return finalColor * emission;
				//vec3 emission = Light(origin);
				//vec2 uv = v0.uv.xy *t +v1.uv.xy *u +v2.uv.xy *v;

				//vec3 normal = normalize(v0.normal.xyz *t +v1.normal.xyz *u +v2.normal.xyz *v);
				// TODO: Normal map
				//calculate_raycast_lighting(rayDir,hitPoint,normal,matInfo,uv,fragColor);
			}
		}
	}

}

bool raycast_mesh(
	in Ray ray,
	in EntityInstanceData instanceData,in SubMeshInfoData subMeshInfo,in MaterialInfo matInfo,
	inout RaycastHit hitResult
)
{
	vec3 origin = vec3(instanceData.M[3][0],instanceData.M[3][1],instanceData.M[3][2]);
	vec3 scale = vec3(
		length(vec3(instanceData.M[0][0],instanceData.M[0][1],instanceData.M[0][2])),
		length(vec3(instanceData.M[1][0],instanceData.M[1][1],instanceData.M[1][2])),
		length(vec3(instanceData.M[2][0],instanceData.M[2][1],instanceData.M[2][2]))
	);
	mat4 matRotation = inverse(mat4(
		instanceData.M[0][0] /scale.x,instanceData.M[1][0] /scale.y,instanceData.M[2][0] /scale.z,0.0,
		instanceData.M[0][1] /scale.x,instanceData.M[1][1] /scale.y,instanceData.M[2][1] /scale.z,0.0,
		instanceData.M[0][2] /scale.x,instanceData.M[1][2] /scale.y,instanceData.M[2][2] /scale.z,0.0,
		0.0,0.0,0.0,1.0
	));

	vec3 meshMin = subMeshInfo.aabbMin.xyz -vec3(1);
	vec3 meshMax = subMeshInfo.aabbMax.xyz +vec3(1);

	vec3 rayOrigin = ray.origin;
	vec3 rayDir = ray.direction;
	rayOrigin -= origin;
	rayOrigin = (vec4(rayOrigin,1.0) *matRotation).xyz;
	rayDir = normalize((vec4(rayDir,0.0) *matRotation).xyz);
	vec3 rayDirInv = vec3(
		(rayDir.x != 0) ? (1.0 /rayDir.x) : 0.0,
		(rayDir.y != 0) ? (1.0 /rayDir.y) : 0.0,
		(rayDir.z != 0) ? (1.0 /rayDir.z) : 0.0
	);
	vec3 outColor = vec3(0,0,0);
	if(intersect_ray_aabb(rayOrigin,rayDirInv,meshMin,meshMax) == false)
		return false;
	raycast_mesh_detail(rayOrigin,rayDir,instanceData,subMeshInfo,matInfo,hitResult);
	return true;
}

void raycast_scene(inout Ray ray,inout RaycastHit hitResult)
{
	float fragDepth = hitResult.fragDepth;
	uint numMeshes = u_pushConstants.numMeshes;
	for(uint i=0;i<numMeshes;++i)
	{
		SubMeshInfoData subMeshInfo = subMeshInfoBuffer.data[i];
		if(is_mesh_visible(subMeshInfo) == false)
			continue;
		MaterialInfo matInfo = materialInfoBuffer.data[subMeshInfo.materialArrayIndex];
		EntityInstanceData entData = entityInstanceBuffer.data[subMeshInfo.entityBufferIndex];
		raycast_mesh(ray,entData,subMeshInfo,matInfo,hitResult);
	}
}

bool raycast_scene_aabb(inout Ray ray,inout RaycastHit hitResult)
{
	float fragDepth = hitResult.fragDepth;
	uint numMeshes = u_pushConstants.numMeshes;
	for(uint i=0;i<numMeshes;++i)
	{
		SubMeshInfoData subMeshInfo = subMeshInfoBuffer.data[i];
		if(is_mesh_visible(subMeshInfo) == false)
			continue;
		MaterialInfo matInfo = materialInfoBuffer.data[subMeshInfo.materialArrayIndex];
		EntityInstanceData entData = entityInstanceBuffer.data[subMeshInfo.entityBufferIndex];
		if(raycast_mesh(ray,entData,subMeshInfo,matInfo,hitResult) == true)
			return true;
	}
	return false;
}

RaycastHit raycast_scene(inout Ray ray)
{
	RaycastHit hitResult;
	hitResult.fragDepth = ray.distSqr;
	raycast_scene(ray,hitResult);
	return hitResult;
}

void calculate_raycast_lighting(in Ray ray,in RaycastHit hitResult,inout vec3 fragColor)
{
	float t = hitResult.tuv.x;
	float u = hitResult.tuv.y;
	float v = hitResult.tuv.z;
	Vertex v0 = hitResult.v0;
	Vertex v1 = hitResult.v1;
	Vertex v2 = hitResult.v2;
	vec2 uv = v0.uv.xy *t +v1.uv.xy *u +v2.uv.xy *v;

	vec3 albedo = pow(texture(u_textures[hitResult.material.albedoTextureArrayIndex],uv).rgb,vec3(2.2));

	vec3 hitNormal = normalize(v0.normal.xyz *t +v1.normal.xyz *u +v2.normal.xyz *v);
	vec3 tangent = normalize(v0.tangent.xyz *t +v1.tangent.xyz *u +v2.tangent.xyz *v);
	vec3 biTangent = normalize(v0.biTangent.xyz *t +v1.biTangent.xyz *u +v2.biTangent.xyz *v);

	if((hitResult.mesh.flags &FSUB_MESH_USE_NORMAL_MAP) != 0)
	{
		vec3 texNormal = texture(u_textures[hitResult.material.normalTextureArrayIndex],vec2(uv)).rgb *2.0 -1.0; // TODO: Make sure normal exists!
		mat3 tbn = mat3(tangent,biTangent,hitNormal);
		hitNormal = normalize(tbn *texNormal);
	}

	// TODO
	float ao = texture(u_textures[hitResult.material.ambientOcclusionTextureArrayIndex],vec2(uv)).r;
	float metallic = texture(u_textures[hitResult.material.metallicTextureArrayIndex],vec2(uv)).r;
	float roughness = texture(u_textures[hitResult.material.roughnessTextureArrayIndex],vec2(uv)).r;

	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, albedo, metallic);
	vec3 Lo = vec3(0.0);

	vec3 V = -ray.direction;
	vec3 N = hitNormal;
	vec3 R = reflect(-V,N);

	for(int i=0;i<u_pushConstants.numLights;++i)
	{
		LightSourceData light = lightBuffer.data[i];
		uint flags = FLIGHT_TURNED_ON | FLIGHT_TYPE_POINT;
		if((light.flags &flags) != flags)
			continue;
		vec3 L = normalize(light.position.xyz -hitResult.hitPoint);
		float distToLightSourceSqr = length_sqr(hitResult.hitPoint -light.position.xyz);

		Ray ray;
		ray.origin = hitResult.hitPoint +hitNormal *1.0; // TODO: Bias?
		ray.direction = normalize(L);
		ray.distSqr = distToLightSourceSqr;
		RaycastHit shadowRayResult = raycast_scene(ray);
		if(shadowRayResult.fragDepth >= distToLightSourceSqr)
			Lo += pbr_calc_light_radiance(i,hitResult.hitPoint,N,V,F0,albedo,roughness,metallic);
	}

    vec3 ambient;
    if((u_pushConstants.renderFlags &FRENDER_NO_IBL) == 0)
    {
	    // ambient lighting (we now use IBL as the ambient term)
	    vec3 F = fresnel_schlick_roughness(max(dot(N,V),0.0),F0,roughness);
	    vec3 kS = F;
	    vec3 kD = 1.0 -kS;
	    kD *= 1.0 -metallic;
	    vec3 irradiance = texture(u_irradianceMap,N).rgb;
	    vec3 diffuse = irradiance *albedo;

	    // sample both the pre-filter map and the BRDF lut and combine them together as per the Split-Sum approximation to get the IBL specular part.
	    const float MAX_REFLECTION_LOD = 4.0;
	    vec3 prefilteredColor = textureLod(u_prefilterMap,R,roughness *MAX_REFLECTION_LOD).rgb;
	    vec2 brdf = texture(u_brdfLUT,vec2(max(dot(N,V),0.0),roughness)).rg;
	    vec3 specular = prefilteredColor *(F *brdf.x +brdf.y);
    	ambient = (kD *diffuse +specular) *ao;
    }
    else
    {
    	// TODO
    	//vec3 ambient = vec3(0.03) * albedo * ao;
  		vec3 ambientColor = vec3(0.03);//u_renderSettings.ambientColor.rgb *u_renderSettings.ambientColor.a;
    	ambient = vec3(0);//ambientColor *albedo *ao;
    }

    vec3 color = ambient + Lo;

    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
   // color = pow(color, vec3(1.0/2.2)); 

	fragColor = color;//light.color.rgb *attenuation;//color;

	//fragColor = vec3(ao,ao,ao);
}

void main()
{
	ivec2 fragCoords = ivec2(get_pixel_offset_x() +gl_GlobalInvocationID.x,get_pixel_offset_y() +gl_GlobalInvocationID.y);

	Ray ray;
	ray.origin = u_renderSettings.posCam;
	ray.distSqr = FLT_MAX;
	vec3 rayEndPoint = calc_far_plane_point(
		ray.origin, // camPos
		vec3(0,0,1),vec3(-1,0,0),vec3(0,1,0), // forward, right, up
		u_pushConstants.fov, // fov
		u_renderSettings.farZ, // farPlane
		float(u_pushConstants.height) /float(u_pushConstants.width), // aspectRatio
		vec2(fragCoords.x /float(u_pushConstants.width),fragCoords.y /float(u_pushConstants.height)) // uv
	);

	ray.direction = normalize(rayEndPoint -ray.origin);
	// Apply camera rotation
	ray.direction = (vec4(-ray.direction.x,ray.direction.y,-ray.direction.z,0.0) *u_camera.V).xyz;
	ray.direction = normalize(ray.direction);


	vec3 fragColor = vec3(0.0);

	bool debugAabb = false;
	if(debugAabb == true)
	{
		RaycastHit hitResult;
		hitResult.fragDepth = ray.distSqr;
		if(raycast_scene_aabb(ray,hitResult))
			fragColor += vec3(0.25);
	}
	else
	{
		// Iterate scene geometry
		uint reflectionDepth = 0;
		uint maxReflectionDepth = 1;
		while(reflectionDepth < maxReflectionDepth)
		{
			++reflectionDepth;
			RaycastHit hitResult = raycast_scene(ray);
			if(hitResult.fragDepth == FLT_MAX)
				break; // Nothing has been hit
			calculate_raycast_lighting(ray,hitResult,fragColor);

			if(hitResult.fragDepth != FLT_MAX)
			{
				vec3 normal = normalize(hitResult.v0.normal.xyz *hitResult.tuv.x +hitResult.v1.normal.xyz *hitResult.tuv.y +hitResult.v2.normal.xyz *hitResult.tuv.z);
				ray.origin = hitResult.hitPoint;
				ray.direction = reflect(ray.direction,normal);
				ray.distSqr = FLT_MAX;
				hitResult = raycast_scene(ray);
				vec3 reflectedColor = vec3(0.0);
				calculate_raycast_lighting(ray,hitResult,reflectedColor);


				/*if(hitResult.fragDepth != FLT_MAX)
				{
					vec3 normal = normalize(hitResult.v0.normal.xyz *hitResult.tuv.x +hitResult.v1.normal.xyz *hitResult.tuv.y +hitResult.v2.normal.xyz *hitResult.tuv.z);
					ray.origin = hitResult.hitPoint;
					ray.direction = reflect(ray.direction,normal);
					ray.distSqr = FLT_MAX;
					hitResult = raycast_scene(ray);
					vec3 reflectedColor2 = vec3(0.0);
					calculate_raycast_lighting(ray,hitResult,reflectedColor2);


					
					reflectedColor += reflectedColor2 *0.2;
				}*/


				//fragColor += reflectedColor *0.1;
			}
		}
	}
	




	/*if(hitResult.fragDepth == fragDepth)
		return; // Ray hasn't hit anything
	vec3 refl = reflect(ray.direction,vec3(0,1,0));
	raycast_scene(ray,hitResult);
hitColor += 0.8 * castRay(hitPoint + hitNormal * options.bias, R, objects, lights, options, depth + 1); 
*/


	fragColor = vec3(clamp(fragColor.x,0.0,1.0),clamp(fragColor.y,0.0,1.0),clamp(fragColor.z,0.0,1.0));

	imageStore(raytracedImage,fragCoords,vec4(fragColor,1.0));
}
