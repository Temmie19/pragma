#ifndef F_GAME_SCENE_DATA_GLS
#define F_GAME_SCENE_DATA_GLS

#include "/modules/sh_math.gls"
#include "/modules/sh_entity_info.gls"
#include "/modules/sh_limits.gls"
#include "/game_scene/vertex.gls"
#include "/game_scene/material.gls"
#include "/game_scene/mesh.gls"
#include "/game_scene/animation.gls"
#include "/game_scene/vertex_weight.gls"

#define INVALID_ARRAY_INDEX MAX_UINT
#define INVALID_BUFFER_INDEX MAX_UINT

#ifndef SHADER_GAME_SCENE_SET
	#define SHADER_GAME_SCENE_SET 0
#endif

#define SHADER_GAME_SCENE_TEXTURES_BINDING 0
#define SHADER_GAME_SCENE_MATERIALS_BINDING (SHADER_GAME_SCENE_TEXTURES_BINDING +1)
#define SHADER_GAME_SCENE_MESHES_BINDING (SHADER_GAME_SCENE_MATERIALS_BINDING +1)
#define SHADER_GAME_SCENE_ENTITY_DATA_BINDING (SHADER_GAME_SCENE_MESHES_BINDING +1)
#define SHADER_GAME_SCENE_BONE_DATA_BINDING (SHADER_GAME_SCENE_ENTITY_DATA_BINDING +1)
#define SHADER_GAME_SCENE_VERTICES_BINDING (SHADER_GAME_SCENE_BONE_DATA_BINDING +1)
#define SHADER_GAME_SCENE_INDICES_BINDING (SHADER_GAME_SCENE_VERTICES_BINDING +1)
#define SHADER_GAME_SCENE_VERTEX_WEIGHTS_BINDING (SHADER_GAME_SCENE_INDICES_BINDING +1)
#define SHADER_GAME_SCENE_ALPHAS_BINDING (SHADER_GAME_SCENE_VERTEX_WEIGHTS_BINDING +1)

layout(set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_TEXTURES_BINDING) uniform sampler2D u_textures[2048];

layout (std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_MATERIALS_BINDING) readonly buffer MaterialInfoBuffer
{
	MaterialInfo data[];
} materialInfoBuffer;

layout (std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_MESHES_BINDING) readonly buffer SubMeshInfoBuffer
{
	SubMeshInfoData data[];
} subMeshInfoBuffer;

layout (std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_ENTITY_DATA_BINDING) readonly buffer EntityInstanceBuffer
{
	EntityInstanceData data[];
} entityInstanceBuffer;

layout(std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_BONE_DATA_BINDING) readonly buffer Bones
{
	EntityBoneMatrixData data[];
} boneMatrixBuffer;

layout (std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_VERTICES_BINDING) readonly buffer VertexBuffer
{
	Vertex verts[];
} vertexBuffer;

layout (std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_INDICES_BINDING) readonly buffer IndexBuffer
{
	uint indices[];
} indexBuffer;

layout (std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_VERTEX_WEIGHTS_BINDING) readonly buffer VertexWeightBuffer
{
	VertexWeight weights[];
} vertexWeightBuffer;

layout (std430,set=SHADER_GAME_SCENE_SET,binding=SHADER_GAME_SCENE_ALPHAS_BINDING) readonly buffer AlphaBuffer
{
	vec2 alpha[];
} alphaBuffer;

Vertex get_vertex(uint index)
{
	return vertexBuffer.verts[index];
}

uint get_triangle_vertex_index(uint index)
{
	uint indexBufferIndex = indexBuffer.indices[index /2];
	if((index %2) != 0)
		indexBufferIndex = indexBufferIndex>>16;
	else
		indexBufferIndex = (indexBufferIndex<<16)>>16;
	return indexBufferIndex;
}

#endif
